
sicid_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee28  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800f0c0  0800f0c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2d0  0800f2d0  00011080  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2d0  0800f2d0  000102d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2d8  0800f2d8  00011080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2d8  0800f2d8  000102d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f2dc  0800f2dc  000102dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  24000000  0800f2e0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010254  24000080  0800f360  00011080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240102d4  0800f360  000112d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00011080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef56  00000000  00000000  000110ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e2  00000000  00000000  00030004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  000334e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012b9  00000000  00000000  00034ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003dbae  00000000  00000000  00035fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000203d3  00000000  00000000  00073b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a0037  00000000  00000000  00093f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00233f59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006958  00000000  00000000  00233f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0023a8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000080 	.word	0x24000080
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f0a8 	.word	0x0800f0a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000084 	.word	0x24000084
 80002d4:	0800f0a8 	.word	0x0800f0a8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b49      	ldr	r3, [pc, #292]	@ (80006f4 <SystemInit+0x12c>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a48      	ldr	r2, [pc, #288]	@ (80006f4 <SystemInit+0x12c>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b45      	ldr	r3, [pc, #276]	@ (80006f4 <SystemInit+0x12c>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a44      	ldr	r2, [pc, #272]	@ (80006f4 <SystemInit+0x12c>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b43      	ldr	r3, [pc, #268]	@ (80006f8 <SystemInit+0x130>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b40      	ldr	r3, [pc, #256]	@ (80006f8 <SystemInit+0x130>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a3e      	ldr	r2, [pc, #248]	@ (80006f8 <SystemInit+0x130>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b3d      	ldr	r3, [pc, #244]	@ (80006fc <SystemInit+0x134>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a3c      	ldr	r2, [pc, #240]	@ (80006fc <SystemInit+0x134>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b3a      	ldr	r3, [pc, #232]	@ (80006fc <SystemInit+0x134>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b39      	ldr	r3, [pc, #228]	@ (80006fc <SystemInit+0x134>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4938      	ldr	r1, [pc, #224]	@ (80006fc <SystemInit+0x134>)
 800061c:	4b38      	ldr	r3, [pc, #224]	@ (8000700 <SystemInit+0x138>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b35      	ldr	r3, [pc, #212]	@ (80006f8 <SystemInit+0x130>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <SystemInit+0x130>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a30      	ldr	r2, [pc, #192]	@ (80006f8 <SystemInit+0x130>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b2f      	ldr	r3, [pc, #188]	@ (80006fc <SystemInit+0x134>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b2d      	ldr	r3, [pc, #180]	@ (80006fc <SystemInit+0x134>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <SystemInit+0x134>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <SystemInit+0x134>)
 8000652:	4a2c      	ldr	r2, [pc, #176]	@ (8000704 <SystemInit+0x13c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <SystemInit+0x134>)
 8000658:	4a2b      	ldr	r2, [pc, #172]	@ (8000708 <SystemInit+0x140>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <SystemInit+0x134>)
 800065e:	4a2b      	ldr	r2, [pc, #172]	@ (800070c <SystemInit+0x144>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <SystemInit+0x134>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <SystemInit+0x134>)
 800066a:	4a28      	ldr	r2, [pc, #160]	@ (800070c <SystemInit+0x144>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <SystemInit+0x134>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <SystemInit+0x134>)
 8000676:	4a25      	ldr	r2, [pc, #148]	@ (800070c <SystemInit+0x144>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <SystemInit+0x134>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a1d      	ldr	r2, [pc, #116]	@ (80006fc <SystemInit+0x134>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <SystemInit+0x134>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <SystemInit+0x148>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a1e      	ldr	r2, [pc, #120]	@ (8000710 <SystemInit+0x148>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <SystemInit+0x14c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <SystemInit+0x150>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <SystemInit+0x154>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <SystemInit+0x134>)
 80006b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d113      	bne.n	80006e8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <SystemInit+0x134>)
 80006c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006c6:	4a0d      	ldr	r2, [pc, #52]	@ (80006fc <SystemInit+0x134>)
 80006c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <SystemInit+0x158>)
 80006d2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006d6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006d8:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <SystemInit+0x134>)
 80006da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006de:	4a07      	ldr	r2, [pc, #28]	@ (80006fc <SystemInit+0x134>)
 80006e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00
 80006f8:	52002000 	.word	0x52002000
 80006fc:	58024400 	.word	0x58024400
 8000700:	eaf6ed7f 	.word	0xeaf6ed7f
 8000704:	02020200 	.word	0x02020200
 8000708:	01ff0000 	.word	0x01ff0000
 800070c:	01010280 	.word	0x01010280
 8000710:	580000c0 	.word	0x580000c0
 8000714:	5c001000 	.word	0x5c001000
 8000718:	ffff0000 	.word	0xffff0000
 800071c:	51008108 	.word	0x51008108
 8000720:	52004000 	.word	0x52004000

08000724 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <ExitRun0Mode+0x2c>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	4a08      	ldr	r2, [pc, #32]	@ (8000750 <ExitRun0Mode+0x2c>)
 800072e:	f023 0302 	bic.w	r3, r3, #2
 8000732:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000734:	bf00      	nop
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <ExitRun0Mode+0x2c>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f9      	beq.n	8000736 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	58024800 	.word	0x58024800

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af02      	add	r7, sp, #8
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f003 f80f 	bl	800377c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f937 	bl	80009d0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000762:	f000 f9b1 	bl	8000ac8 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000766:	4b83      	ldr	r3, [pc, #524]	@ (8000974 <main+0x220>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076c:	4a81      	ldr	r2, [pc, #516]	@ (8000974 <main+0x220>)
 800076e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000772:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000776:	4b7f      	ldr	r3, [pc, #508]	@ (8000974 <main+0x220>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000784:	2000      	movs	r0, #0
 8000786:	f007 fb1f 	bl	8007dc8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800078a:	2100      	movs	r1, #0
 800078c:	2000      	movs	r0, #0
 800078e:	f007 fb35 	bl	8007dfc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000792:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000796:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000798:	bf00      	nop
 800079a:	4b76      	ldr	r3, [pc, #472]	@ (8000974 <main+0x220>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d104      	bne.n	80007b0 <main+0x5c>
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	1e5a      	subs	r2, r3, #1
 80007aa:	60fa      	str	r2, [r7, #12]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dcf4      	bgt.n	800079a <main+0x46>
if ( timeout < 0 )
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	da01      	bge.n	80007ba <main+0x66>
{
Error_Handler();
 80007b6:	f002 faf3 	bl	8002da0 <Error_Handler>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 fd2f 	bl	800121c <MX_GPIO_Init>
  MX_DMA_Init();
 80007be:	f000 fced 	bl	800119c <MX_DMA_Init>
  MX_ADC3_Init();
 80007c2:	f000 fa2f 	bl	8000c24 <MX_ADC3_Init>
  MX_DAC1_Init();
 80007c6:	f000 fac5 	bl	8000d54 <MX_DAC1_Init>
  MX_TIM1_Init();
 80007ca:	f000 faf5 	bl	8000db8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007ce:	f000 fb47 	bl	8000e60 <MX_TIM2_Init>
  MX_TIM4_Init();
 80007d2:	f000 fb91 	bl	8000ef8 <MX_TIM4_Init>
  MX_TIM6_Init();
 80007d6:	f000 fbe5 	bl	8000fa4 <MX_TIM6_Init>
  MX_TIM8_Init();
 80007da:	f000 fc19 	bl	8001010 <MX_TIM8_Init>
  MX_ADC1_Init();
 80007de:	f000 f9a3 	bl	8000b28 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  InitLUT();
 80007e2:	f002 f935 	bl	8002a50 <InitLUT>
  SensorlessLUT();
 80007e6:	f002 f999 	bl	8002b1c <SensorlessLUT>
  generate_L_sin();
 80007ea:	f002 fa41 	bl	8002c70 <generate_L_sin>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80007ee:	2100      	movs	r1, #0
 80007f0:	4861      	ldr	r0, [pc, #388]	@ (8000978 <main+0x224>)
 80007f2:	f00b f987 	bl	800bb04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80007f6:	2104      	movs	r1, #4
 80007f8:	485f      	ldr	r0, [pc, #380]	@ (8000978 <main+0x224>)
 80007fa:	f00b f983 	bl	800bb04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80007fe:	2108      	movs	r1, #8
 8000800:	485d      	ldr	r0, [pc, #372]	@ (8000978 <main+0x224>)
 8000802:	f00b f97f 	bl	800bb04 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8000806:	2100      	movs	r1, #0
 8000808:	485b      	ldr	r0, [pc, #364]	@ (8000978 <main+0x224>)
 800080a:	f00c fc5f 	bl	800d0cc <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 800080e:	2104      	movs	r1, #4
 8000810:	4859      	ldr	r0, [pc, #356]	@ (8000978 <main+0x224>)
 8000812:	f00c fc5b 	bl	800d0cc <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8000816:	2108      	movs	r1, #8
 8000818:	4857      	ldr	r0, [pc, #348]	@ (8000978 <main+0x224>)
 800081a:	f00c fc57 	bl	800d0cc <HAL_TIMEx_PWMN_Start>

  HAL_TIM_Base_Start_IT(&htim2); // Timer 2 Start
 800081e:	4857      	ldr	r0, [pc, #348]	@ (800097c <main+0x228>)
 8000820:	f00b f896 	bl	800b950 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000824:	4856      	ldr	r0, [pc, #344]	@ (8000980 <main+0x22c>)
 8000826:	f00b f893 	bl	800b950 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800082a:	4856      	ldr	r0, [pc, #344]	@ (8000984 <main+0x230>)
 800082c:	f00b f890 	bl	800b950 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000830:	4851      	ldr	r0, [pc, #324]	@ (8000978 <main+0x224>)
 8000832:	f00b f88d 	bl	800b950 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc3, &adc_val[0], 4);
 8000836:	2204      	movs	r2, #4
 8000838:	4953      	ldr	r1, [pc, #332]	@ (8000988 <main+0x234>)
 800083a:	4854      	ldr	r0, [pc, #336]	@ (800098c <main+0x238>)
 800083c:	f003 fc32 	bl	80040a4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, &uvw_val[0], 1);
 8000840:	2201      	movs	r2, #1
 8000842:	4953      	ldr	r1, [pc, #332]	@ (8000990 <main+0x23c>)
 8000844:	4853      	ldr	r0, [pc, #332]	@ (8000994 <main+0x240>)
 8000846:	f003 fc2d 	bl	80040a4 <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800084a:	2100      	movs	r1, #0
 800084c:	4852      	ldr	r0, [pc, #328]	@ (8000998 <main+0x244>)
 800084e:	f004 fc6f 	bl	8005130 <HAL_DAC_Start>
  //HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 // HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &converted_L_a_filtered_average, 1, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &converted_L_a_filtered_average, 1, DAC_ALIGN_12B_R);
 8000852:	2300      	movs	r3, #0
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2301      	movs	r3, #1
 8000858:	4a50      	ldr	r2, [pc, #320]	@ (800099c <main+0x248>)
 800085a:	2100      	movs	r1, #0
 800085c:	484e      	ldr	r0, [pc, #312]	@ (8000998 <main+0x244>)
 800085e:	f004 fcbf 	bl	80051e0 <HAL_DAC_Start_DMA>
 // HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, &converted_L_c_filtered_average, 1, DAC_ALIGN_12B_R);
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000862:	213c      	movs	r1, #60	@ 0x3c
 8000864:	484e      	ldr	r0, [pc, #312]	@ (80009a0 <main+0x24c>)
 8000866:	f00b fb01 	bl	800be6c <HAL_TIM_Encoder_Start>

  // Start Motor
  HAL_Delay(1000);
 800086a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800086e:	f003 f817 	bl	80038a0 <HAL_Delay>

  TIM8->CCR1 = 30;
 8000872:	4b4c      	ldr	r3, [pc, #304]	@ (80009a4 <main+0x250>)
 8000874:	221e      	movs	r2, #30
 8000876:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM8->CCR2 = 0;
 8000878:	4b4a      	ldr	r3, [pc, #296]	@ (80009a4 <main+0x250>)
 800087a:	2200      	movs	r2, #0
 800087c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM8->CCR3 = 0;
 800087e:	4b49      	ldr	r3, [pc, #292]	@ (80009a4 <main+0x250>)
 8000880:	2200      	movs	r2, #0
 8000882:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(2000);
 8000884:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000888:	f003 f80a 	bl	80038a0 <HAL_Delay>


  // Intialize the Encoder 2

	TIM4->CNT = 0;
 800088c:	4b46      	ldr	r3, [pc, #280]	@ (80009a8 <main+0x254>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->CNT = 0;
 8000892:	4b46      	ldr	r3, [pc, #280]	@ (80009ac <main+0x258>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24

	TIM8->CCR1 = 0;
 8000898:	4b42      	ldr	r3, [pc, #264]	@ (80009a4 <main+0x250>)
 800089a:	2200      	movs	r2, #0
 800089c:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM8->CCR2 = 0;
 800089e:	4b41      	ldr	r3, [pc, #260]	@ (80009a4 <main+0x250>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM8->CCR3 = 0;
 80008a4:	4b3f      	ldr	r3, [pc, #252]	@ (80009a4 <main+0x250>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2140      	movs	r1, #64	@ 0x40
 80008ae:	4840      	ldr	r0, [pc, #256]	@ (80009b0 <main+0x25c>)
 80008b0:	f007 fa3c 	bl	8007d2c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008b8:	f002 fff2 	bl	80038a0 <HAL_Delay>


	for(int i=0;i<10;i++){
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	e02b      	b.n	800091a <main+0x1c6>
		uvw_offset[0]+=uvw_val[0]/10;
 80008c2:	4b3c      	ldr	r3, [pc, #240]	@ (80009b4 <main+0x260>)
 80008c4:	881a      	ldrh	r2, [r3, #0]
 80008c6:	4b32      	ldr	r3, [pc, #200]	@ (8000990 <main+0x23c>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	493b      	ldr	r1, [pc, #236]	@ (80009b8 <main+0x264>)
 80008cc:	fba1 1303 	umull	r1, r3, r1, r3
 80008d0:	08db      	lsrs	r3, r3, #3
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	4413      	add	r3, r2
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4b36      	ldr	r3, [pc, #216]	@ (80009b4 <main+0x260>)
 80008da:	801a      	strh	r2, [r3, #0]
	  for(int j=1;j<4;j++) current_offset[j]+=adc_val[j]/10;
 80008dc:	2301      	movs	r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	e015      	b.n	800090e <main+0x1ba>
 80008e2:	4a36      	ldr	r2, [pc, #216]	@ (80009bc <main+0x268>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008ea:	4927      	ldr	r1, [pc, #156]	@ (8000988 <main+0x234>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008f2:	4931      	ldr	r1, [pc, #196]	@ (80009b8 <main+0x264>)
 80008f4:	fba1 1303 	umull	r1, r3, r1, r3
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	4413      	add	r3, r2
 80008fe:	b299      	uxth	r1, r3
 8000900:	4a2e      	ldr	r2, [pc, #184]	@ (80009bc <main+0x268>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3301      	adds	r3, #1
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b03      	cmp	r3, #3
 8000912:	dde6      	ble.n	80008e2 <main+0x18e>
	for(int i=0;i<10;i++){
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	3301      	adds	r3, #1
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	2b09      	cmp	r3, #9
 800091e:	ddd0      	ble.n	80008c2 <main+0x16e>
	}
	motor_start = encoder;
 8000920:	4b27      	ldr	r3, [pc, #156]	@ (80009c0 <main+0x26c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a27      	ldr	r2, [pc, #156]	@ (80009c4 <main+0x270>)
 8000926:	6013      	str	r3, [r2, #0]
	sicid_start=1-encoder;
 8000928:	4b25      	ldr	r3, [pc, #148]	@ (80009c0 <main+0x26c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f1c3 0301 	rsb	r3, r3, #1
 8000930:	4a25      	ldr	r2, [pc, #148]	@ (80009c8 <main+0x274>)
 8000932:	6013      	str	r3, [r2, #0]

  /* Initialize leds */


  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000934:	2101      	movs	r1, #1
 8000936:	2000      	movs	r0, #0
 8000938:	f002 fdce 	bl	80034d8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800093c:	4b23      	ldr	r3, [pc, #140]	@ (80009cc <main+0x278>)
 800093e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000942:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000944:	4b21      	ldr	r3, [pc, #132]	@ (80009cc <main+0x278>)
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800094a:	4b20      	ldr	r3, [pc, #128]	@ (80009cc <main+0x278>)
 800094c:	2200      	movs	r2, #0
 800094e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000950:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <main+0x278>)
 8000952:	2200      	movs	r2, #0
 8000954:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000956:	4b1d      	ldr	r3, [pc, #116]	@ (80009cc <main+0x278>)
 8000958:	2200      	movs	r2, #0
 800095a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800095c:	491b      	ldr	r1, [pc, #108]	@ (80009cc <main+0x278>)
 800095e:	2000      	movs	r0, #0
 8000960:	f002 fe4a 	bl	80035f8 <BSP_COM_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d002      	beq.n	8000970 <main+0x21c>
  {
    Error_Handler();
 800096a:	f002 fa19 	bl	8002da0 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <main+0x21c>
 8000974:	58024400 	.word	0x58024400
 8000978:	24000420 	.word	0x24000420
 800097c:	2400033c 	.word	0x2400033c
 8000980:	240002f0 	.word	0x240002f0
 8000984:	240003d4 	.word	0x240003d4
 8000988:	2400c118 	.word	0x2400c118
 800098c:	24000110 	.word	0x24000110
 8000990:	2400c120 	.word	0x2400c120
 8000994:	240000ac 	.word	0x240000ac
 8000998:	24000264 	.word	0x24000264
 800099c:	24010218 	.word	0x24010218
 80009a0:	24000388 	.word	0x24000388
 80009a4:	40010400 	.word	0x40010400
 80009a8:	40000800 	.word	0x40000800
 80009ac:	40010000 	.word	0x40010000
 80009b0:	58021400 	.word	0x58021400
 80009b4:	2400c12c 	.word	0x2400c12c
 80009b8:	cccccccd 	.word	0xcccccccd
 80009bc:	2400c124 	.word	0x2400c124
 80009c0:	2400003c 	.word	0x2400003c
 80009c4:	2400046c 	.word	0x2400046c
 80009c8:	2400c204 	.word	0x2400c204
 80009cc:	2400009c 	.word	0x2400009c

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b09c      	sub	sp, #112	@ 0x70
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009da:	224c      	movs	r2, #76	@ 0x4c
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f00d fd68 	bl	800e4b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2220      	movs	r2, #32
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f00d fd62 	bl	800e4b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009f0:	2004      	movs	r0, #4
 80009f2:	f007 fa17 	bl	8007e24 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b31      	ldr	r3, [pc, #196]	@ (8000ac0 <SystemClock_Config+0xf0>)
 80009fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009fe:	4a30      	ldr	r2, [pc, #192]	@ (8000ac0 <SystemClock_Config+0xf0>)
 8000a00:	f023 0301 	bic.w	r3, r3, #1
 8000a04:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a06:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac0 <SystemClock_Config+0xf0>)
 8000a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <SystemClock_Config+0xf4>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a2b      	ldr	r2, [pc, #172]	@ (8000ac4 <SystemClock_Config+0xf4>)
 8000a16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ac4 <SystemClock_Config+0xf4>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a28:	bf00      	nop
 8000a2a:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <SystemClock_Config+0xf4>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a36:	d1f8      	bne.n	8000a2a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a40:	2340      	movs	r3, #64	@ 0x40
 8000a42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a44:	2302      	movs	r3, #2
 8000a46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000a50:	2332      	movs	r3, #50	@ 0x32
 8000a52:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000a58:	2305      	movs	r3, #5
 8000a5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a60:	230c      	movs	r3, #12
 8000a62:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a70:	4618      	mov	r0, r3
 8000a72:	f007 fa31 	bl	8007ed8 <HAL_RCC_OscConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000a7c:	f002 f990 	bl	8002da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a80:	233f      	movs	r3, #63	@ 0x3f
 8000a82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a84:	2303      	movs	r3, #3
 8000a86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a90:	2340      	movs	r3, #64	@ 0x40
 8000a92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a94:	2340      	movs	r3, #64	@ 0x40
 8000a96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a9e:	2340      	movs	r3, #64	@ 0x40
 8000aa0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 fe70 	bl	800878c <HAL_RCC_ClockConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000ab2:	f002 f975 	bl	8002da0 <Error_Handler>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3770      	adds	r7, #112	@ 0x70
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	58000400 	.word	0x58000400
 8000ac4:	58024800 	.word	0x58024800

08000ac8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0b0      	sub	sp, #192	@ 0xc0
 8000acc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ace:	463b      	mov	r3, r7
 8000ad0:	22c0      	movs	r2, #192	@ 0xc0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f00d fced 	bl	800e4b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ada:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ade:	f04f 0300 	mov.w	r3, #0
 8000ae2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000aea:	230a      	movs	r3, #10
 8000aec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000afa:	23c0      	movs	r3, #192	@ 0xc0
 8000afc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000afe:	2320      	movs	r3, #32
 8000b00:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f008 f9c8 	bl	8008ea4 <HAL_RCCEx_PeriphCLKConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000b1a:	f002 f941 	bl	8002da0 <Error_Handler>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	37c0      	adds	r7, #192	@ 0xc0
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
 8000b48:	615a      	str	r2, [r3, #20]
 8000b4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b4c:	4b32      	ldr	r3, [pc, #200]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000b4e:	4a33      	ldr	r2, [pc, #204]	@ (8000c1c <MX_ADC1_Init+0xf4>)
 8000b50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000b52:	4b31      	ldr	r3, [pc, #196]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000b54:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000b58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b60:	4b2d      	ldr	r3, [pc, #180]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b66:	4b2c      	ldr	r3, [pc, #176]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000b68:	2204      	movs	r2, #4
 8000b6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b72:	4b29      	ldr	r3, [pc, #164]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000b78:	4b27      	ldr	r3, [pc, #156]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b7e:	4b26      	ldr	r3, [pc, #152]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8000b84:	4b24      	ldr	r3, [pc, #144]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000b86:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8000b8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000b8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b92:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b94:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000b96:	2203      	movs	r2, #3
 8000b98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb4:	4818      	ldr	r0, [pc, #96]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000bb6:	f003 f8d3 	bl	8003d60 <HAL_ADC_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000bc0:	f002 f8ee 	bl	8002da0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000bd0:	f004 f88a 	bl	8004ce8 <HAL_ADCEx_MultiModeConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000bda:	f002 f8e1 	bl	8002da0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <MX_ADC1_Init+0xf8>)
 8000be0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be2:	2306      	movs	r3, #6
 8000be4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000be6:	2305      	movs	r3, #5
 8000be8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bea:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bee:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_ADC1_Init+0xf0>)
 8000c02:	f003 fb31 	bl	8004268 <HAL_ADC_ConfigChannel>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000c0c:	f002 f8c8 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	@ 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	240000ac 	.word	0x240000ac
 8000c1c:	40022000 	.word	0x40022000
 8000c20:	08600004 	.word	0x08600004

08000c24 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	615a      	str	r2, [r3, #20]
 8000c3a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c3c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000c3e:	4a40      	ldr	r2, [pc, #256]	@ (8000d40 <MX_ADC3_Init+0x11c>)
 8000c40:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c42:	4b3e      	ldr	r3, [pc, #248]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000c44:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c48:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c50:	4b3a      	ldr	r3, [pc, #232]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000c52:	2204      	movs	r2, #4
 8000c54:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c56:	4b39      	ldr	r3, [pc, #228]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000c5c:	4b37      	ldr	r3, [pc, #220]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000c62:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000c64:	2204      	movs	r2, #4
 8000c66:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c68:	4b34      	ldr	r3, [pc, #208]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000c6e:	4b33      	ldr	r3, [pc, #204]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000c70:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000c74:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c76:	4b31      	ldr	r3, [pc, #196]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000c78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000c80:	2203      	movs	r2, #3
 8000c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c90:	4b2a      	ldr	r3, [pc, #168]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 2;
 8000c98:	4b28      	ldr	r3, [pc, #160]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c9e:	4827      	ldr	r0, [pc, #156]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000ca0:	f003 f85e 	bl	8003d60 <HAL_ADC_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000caa:	f002 f879 	bl	8002da0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000cae:	4b25      	ldr	r3, [pc, #148]	@ (8000d44 <MX_ADC3_Init+0x120>)
 8000cb0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cb2:	2306      	movs	r3, #6
 8000cb4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cba:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cbe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481a      	ldr	r0, [pc, #104]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000cd2:	f003 fac9 	bl	8004268 <HAL_ADC_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_ADC3_Init+0xbc>
  {
    Error_Handler();
 8000cdc:	f002 f860 	bl	8002da0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <MX_ADC3_Init+0x124>)
 8000ce2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4813      	ldr	r0, [pc, #76]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000cee:	f003 fabb 	bl	8004268 <HAL_ADC_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_ADC3_Init+0xd8>
  {
    Error_Handler();
 8000cf8:	f002 f852 	bl	8002da0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cfc:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_ADC3_Init+0x128>)
 8000cfe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d00:	2312      	movs	r3, #18
 8000d02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	480c      	ldr	r0, [pc, #48]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000d0a:	f003 faad 	bl	8004268 <HAL_ADC_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 8000d14:	f002 f844 	bl	8002da0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d18:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <MX_ADC3_Init+0x12c>)
 8000d1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d1c:	2318      	movs	r3, #24
 8000d1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_ADC3_Init+0x118>)
 8000d26:	f003 fa9f 	bl	8004268 <HAL_ADC_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_ADC3_Init+0x110>
  {
    Error_Handler();
 8000d30:	f002 f836 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	24000110 	.word	0x24000110
 8000d40:	58026000 	.word	0x58026000
 8000d44:	19200040 	.word	0x19200040
 8000d48:	1d500080 	.word	0x1d500080
 8000d4c:	08600004 	.word	0x08600004
 8000d50:	0c900008 	.word	0x0c900008

08000d54 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2224      	movs	r2, #36	@ 0x24
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f00d fba7 	bl	800e4b4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d66:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <MX_DAC1_Init+0x5c>)
 8000d68:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <MX_DAC1_Init+0x60>)
 8000d6a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d6c:	4810      	ldr	r0, [pc, #64]	@ (8000db0 <MX_DAC1_Init+0x5c>)
 8000d6e:	f004 f9bd 	bl	80050ec <HAL_DAC_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000d78:	f002 f812 	bl	8002da0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8000d80:	2306      	movs	r3, #6
 8000d82:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	@ (8000db0 <MX_DAC1_Init+0x5c>)
 8000d98:	f004 fb00 	bl	800539c <HAL_DAC_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000da2:	f001 fffd 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	@ 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	24000264 	.word	0x24000264
 8000db4:	40007400 	.word	0x40007400

08000db8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e58 <MX_TIM1_Init+0xa0>)
 8000dda:	4a20      	ldr	r2, [pc, #128]	@ (8000e5c <MX_TIM1_Init+0xa4>)
 8000ddc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <MX_TIM1_Init+0xa0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_TIM1_Init+0xa0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5-1;
 8000dea:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <MX_TIM1_Init+0xa0>)
 8000dec:	2204      	movs	r2, #4
 8000dee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df0:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_TIM1_Init+0xa0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000df6:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <MX_TIM1_Init+0xa0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_TIM1_Init+0xa0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e02:	4815      	ldr	r0, [pc, #84]	@ (8000e58 <MX_TIM1_Init+0xa0>)
 8000e04:	f00a fd4c 	bl	800b8a0 <HAL_TIM_Base_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e0e:	f001 ffc7 	bl	8002da0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000e12:	2307      	movs	r3, #7
 8000e14:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e16:	2310      	movs	r3, #16
 8000e18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480d      	ldr	r0, [pc, #52]	@ (8000e58 <MX_TIM1_Init+0xa0>)
 8000e22:	f00b fbc5 	bl	800c5b0 <HAL_TIM_SlaveConfigSynchro>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e2c:	f001 ffb8 	bl	8002da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e30:	2320      	movs	r3, #32
 8000e32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e34:	2300      	movs	r3, #0
 8000e36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000e38:	2380      	movs	r3, #128	@ 0x80
 8000e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <MX_TIM1_Init+0xa0>)
 8000e42:	f00c fa05 	bl	800d250 <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e4c:	f001 ffa8 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	240002f0 	.word	0x240002f0
 8000e5c:	40010000 	.word	0x40010000

08000e60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000e80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000e88:	22c7      	movs	r2, #199	@ 0xc7
 8000e8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4-1;
 8000e92:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000e94:	2203      	movs	r2, #3
 8000e96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ea4:	4813      	ldr	r0, [pc, #76]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000ea6:	f00a fcfb 	bl	800b8a0 <HAL_TIM_Base_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000eb0:	f001 ff76 	bl	8002da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000ec2:	f00b fa7d 	bl	800c3c0 <HAL_TIM_ConfigClockSource>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ecc:	f001 ff68 	bl	8002da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ed0:	2320      	movs	r3, #32
 8000ed2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000ed4:	2380      	movs	r3, #128	@ 0x80
 8000ed6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000ede:	f00c f9b7 	bl	800d250 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ee8:	f001 ff5a 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	3720      	adds	r7, #32
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2400033c 	.word	0x2400033c

08000ef8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	@ 0x30
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	2224      	movs	r2, #36	@ 0x24
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f00d fad4 	bl	800e4b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f16:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <MX_TIM4_Init+0xa4>)
 8000f18:	4a21      	ldr	r2, [pc, #132]	@ (8000fa0 <MX_TIM4_Init+0xa8>)
 8000f1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <MX_TIM4_Init+0xa4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b1e      	ldr	r3, [pc, #120]	@ (8000f9c <MX_TIM4_Init+0xa4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f28:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <MX_TIM4_Init+0xa4>)
 8000f2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <MX_TIM4_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <MX_TIM4_Init+0xa4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f40:	2300      	movs	r3, #0
 8000f42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f44:	2301      	movs	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f54:	2301      	movs	r3, #1
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	4619      	mov	r1, r3
 8000f66:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <MX_TIM4_Init+0xa4>)
 8000f68:	f00a feda 	bl	800bd20 <HAL_TIM_Encoder_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000f72:	f001 ff15 	bl	8002da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4619      	mov	r1, r3
 8000f82:	4806      	ldr	r0, [pc, #24]	@ (8000f9c <MX_TIM4_Init+0xa4>)
 8000f84:	f00c f964 	bl	800d250 <HAL_TIMEx_MasterConfigSynchronization>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000f8e:	f001 ff07 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	3730      	adds	r7, #48	@ 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	24000388 	.word	0x24000388
 8000fa0:	40000800 	.word	0x40000800

08000fa4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <MX_TIM6_Init+0x64>)
 8000fb6:	4a15      	ldr	r2, [pc, #84]	@ (800100c <MX_TIM6_Init+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8000fba:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <MX_TIM6_Init+0x64>)
 8000fbc:	22c7      	movs	r2, #199	@ 0xc7
 8000fbe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <MX_TIM6_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535-1;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <MX_TIM6_Init+0x64>)
 8000fc8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000fcc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <MX_TIM6_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000fd4:	480c      	ldr	r0, [pc, #48]	@ (8001008 <MX_TIM6_Init+0x64>)
 8000fd6:	f00a fc63 	bl	800b8a0 <HAL_TIM_Base_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000fe0:	f001 fede 	bl	8002da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	@ (8001008 <MX_TIM6_Init+0x64>)
 8000ff2:	f00c f92d 	bl	800d250 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ffc:	f001 fed0 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	240003d4 	.word	0x240003d4
 800100c:	40001000 	.word	0x40001000

08001010 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b09a      	sub	sp, #104	@ 0x68
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001016:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001026:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001032:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001046:	463b      	mov	r3, r7
 8001048:	222c      	movs	r2, #44	@ 0x2c
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f00d fa31 	bl	800e4b4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001052:	4b50      	ldr	r3, [pc, #320]	@ (8001194 <MX_TIM8_Init+0x184>)
 8001054:	4a50      	ldr	r2, [pc, #320]	@ (8001198 <MX_TIM8_Init+0x188>)
 8001056:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001058:	4b4e      	ldr	r3, [pc, #312]	@ (8001194 <MX_TIM8_Init+0x184>)
 800105a:	2200      	movs	r2, #0
 800105c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	4b4d      	ldr	r3, [pc, #308]	@ (8001194 <MX_TIM8_Init+0x184>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 8001064:	4b4b      	ldr	r3, [pc, #300]	@ (8001194 <MX_TIM8_Init+0x184>)
 8001066:	2231      	movs	r2, #49	@ 0x31
 8001068:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b4a      	ldr	r3, [pc, #296]	@ (8001194 <MX_TIM8_Init+0x184>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001070:	4b48      	ldr	r3, [pc, #288]	@ (8001194 <MX_TIM8_Init+0x184>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b47      	ldr	r3, [pc, #284]	@ (8001194 <MX_TIM8_Init+0x184>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800107c:	4845      	ldr	r0, [pc, #276]	@ (8001194 <MX_TIM8_Init+0x184>)
 800107e:	f00a fc0f 	bl	800b8a0 <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001088:	f001 fe8a 	bl	8002da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800108c:	4841      	ldr	r0, [pc, #260]	@ (8001194 <MX_TIM8_Init+0x184>)
 800108e:	f00a fcd7 	bl	800ba40 <HAL_TIM_PWM_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8001098:	f001 fe82 	bl	8002da0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800109c:	2307      	movs	r3, #7
 800109e:	657b      	str	r3, [r7, #84]	@ 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80010a0:	2310      	movs	r3, #16
 80010a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80010a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010a8:	4619      	mov	r1, r3
 80010aa:	483a      	ldr	r0, [pc, #232]	@ (8001194 <MX_TIM8_Init+0x184>)
 80010ac:	f00b fa80 	bl	800c5b0 <HAL_TIM_SlaveConfigSynchro>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 80010b6:	f001 fe73 	bl	8002da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010ba:	2320      	movs	r3, #32
 80010bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80010c2:	2380      	movs	r3, #128	@ 0x80
 80010c4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010c6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010ca:	4619      	mov	r1, r3
 80010cc:	4831      	ldr	r0, [pc, #196]	@ (8001194 <MX_TIM8_Init+0x184>)
 80010ce:	f00c f8bf 	bl	800d250 <HAL_TIMEx_MasterConfigSynchronization>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80010d8:	f001 fe62 	bl	8002da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010dc:	2360      	movs	r3, #96	@ 0x60
 80010de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e4:	2300      	movs	r3, #0
 80010e6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80010e8:	2308      	movs	r3, #8
 80010ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010f0:	2300      	movs	r3, #0
 80010f2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010fc:	2200      	movs	r2, #0
 80010fe:	4619      	mov	r1, r3
 8001100:	4824      	ldr	r0, [pc, #144]	@ (8001194 <MX_TIM8_Init+0x184>)
 8001102:	f00b f849 	bl	800c198 <HAL_TIM_PWM_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800110c:	f001 fe48 	bl	8002da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001110:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001114:	2204      	movs	r2, #4
 8001116:	4619      	mov	r1, r3
 8001118:	481e      	ldr	r0, [pc, #120]	@ (8001194 <MX_TIM8_Init+0x184>)
 800111a:	f00b f83d 	bl	800c198 <HAL_TIM_PWM_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001124:	f001 fe3c 	bl	8002da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800112c:	2208      	movs	r2, #8
 800112e:	4619      	mov	r1, r3
 8001130:	4818      	ldr	r0, [pc, #96]	@ (8001194 <MX_TIM8_Init+0x184>)
 8001132:	f00b f831 	bl	800c198 <HAL_TIM_PWM_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 800113c:	f001 fe30 	bl	8002da0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001154:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001158:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001162:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001166:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	4619      	mov	r1, r3
 8001174:	4807      	ldr	r0, [pc, #28]	@ (8001194 <MX_TIM8_Init+0x184>)
 8001176:	f00c f8f9 	bl	800d36c <HAL_TIMEx_ConfigBreakDeadTime>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM8_Init+0x174>
  {
    Error_Handler();
 8001180:	f001 fe0e 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <MX_TIM8_Init+0x184>)
 8001186:	f002 f871 	bl	800326c <HAL_TIM_MspPostInit>

}
 800118a:	bf00      	nop
 800118c:	3768      	adds	r7, #104	@ 0x68
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	24000420 	.word	0x24000420
 8001198:	40010400 	.word	0x40010400

0800119c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001218 <MX_DMA_Init+0x7c>)
 80011a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001218 <MX_DMA_Init+0x7c>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011b2:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <MX_DMA_Init+0x7c>)
 80011b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <MX_DMA_Init+0x7c>)
 80011c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011c6:	4a14      	ldr	r2, [pc, #80]	@ (8001218 <MX_DMA_Init+0x7c>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011d0:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_DMA_Init+0x7c>)
 80011d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	200b      	movs	r0, #11
 80011e4:	f003 ff39 	bl	800505a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011e8:	200b      	movs	r0, #11
 80011ea:	f003 ff50 	bl	800508e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	200c      	movs	r0, #12
 80011f4:	f003 ff31 	bl	800505a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011f8:	200c      	movs	r0, #12
 80011fa:	f003 ff48 	bl	800508e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2101      	movs	r1, #1
 8001202:	2038      	movs	r0, #56	@ 0x38
 8001204:	f003 ff29 	bl	800505a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001208:	2038      	movs	r0, #56	@ 0x38
 800120a:	f003 ff40 	bl	800508e <HAL_NVIC_EnableIRQ>

}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	58024400 	.word	0x58024400

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	@ 0x30
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001232:	4b76      	ldr	r3, [pc, #472]	@ (800140c <MX_GPIO_Init+0x1f0>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001238:	4a74      	ldr	r2, [pc, #464]	@ (800140c <MX_GPIO_Init+0x1f0>)
 800123a:	f043 0320 	orr.w	r3, r3, #32
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001242:	4b72      	ldr	r3, [pc, #456]	@ (800140c <MX_GPIO_Init+0x1f0>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001248:	f003 0320 	and.w	r3, r3, #32
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	4b6e      	ldr	r3, [pc, #440]	@ (800140c <MX_GPIO_Init+0x1f0>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001256:	4a6d      	ldr	r2, [pc, #436]	@ (800140c <MX_GPIO_Init+0x1f0>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001260:	4b6a      	ldr	r3, [pc, #424]	@ (800140c <MX_GPIO_Init+0x1f0>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	4b67      	ldr	r3, [pc, #412]	@ (800140c <MX_GPIO_Init+0x1f0>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001274:	4a65      	ldr	r2, [pc, #404]	@ (800140c <MX_GPIO_Init+0x1f0>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800127e:	4b63      	ldr	r3, [pc, #396]	@ (800140c <MX_GPIO_Init+0x1f0>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b5f      	ldr	r3, [pc, #380]	@ (800140c <MX_GPIO_Init+0x1f0>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001292:	4a5e      	ldr	r2, [pc, #376]	@ (800140c <MX_GPIO_Init+0x1f0>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800129c:	4b5b      	ldr	r3, [pc, #364]	@ (800140c <MX_GPIO_Init+0x1f0>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012aa:	4b58      	ldr	r3, [pc, #352]	@ (800140c <MX_GPIO_Init+0x1f0>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b0:	4a56      	ldr	r2, [pc, #344]	@ (800140c <MX_GPIO_Init+0x1f0>)
 80012b2:	f043 0308 	orr.w	r3, r3, #8
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ba:	4b54      	ldr	r3, [pc, #336]	@ (800140c <MX_GPIO_Init+0x1f0>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c8:	4b50      	ldr	r3, [pc, #320]	@ (800140c <MX_GPIO_Init+0x1f0>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ce:	4a4f      	ldr	r2, [pc, #316]	@ (800140c <MX_GPIO_Init+0x1f0>)
 80012d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d8:	4b4c      	ldr	r3, [pc, #304]	@ (800140c <MX_GPIO_Init+0x1f0>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	2140      	movs	r1, #64	@ 0x40
 80012ea:	4849      	ldr	r0, [pc, #292]	@ (8001410 <MX_GPIO_Init+0x1f4>)
 80012ec:	f006 fd1e 	bl	8007d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	21e0      	movs	r1, #224	@ 0xe0
 80012f4:	4847      	ldr	r0, [pc, #284]	@ (8001414 <MX_GPIO_Init+0x1f8>)
 80012f6:	f006 fd19 	bl	8007d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012fa:	2340      	movs	r3, #64	@ 0x40
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	483f      	ldr	r0, [pc, #252]	@ (8001410 <MX_GPIO_Init+0x1f4>)
 8001312:	f006 fb5b 	bl	80079cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001316:	2332      	movs	r3, #50	@ 0x32
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001326:	230b      	movs	r3, #11
 8001328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4839      	ldr	r0, [pc, #228]	@ (8001418 <MX_GPIO_Init+0x1fc>)
 8001332:	f006 fb4b 	bl	80079cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001336:	2386      	movs	r3, #134	@ 0x86
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001346:	230b      	movs	r3, #11
 8001348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4832      	ldr	r0, [pc, #200]	@ (800141c <MX_GPIO_Init+0x200>)
 8001352:	f006 fb3b 	bl	80079cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001356:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001368:	230b      	movs	r3, #11
 800136a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	482b      	ldr	r0, [pc, #172]	@ (8001420 <MX_GPIO_Init+0x204>)
 8001374:	f006 fb2a 	bl	80079cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001378:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001384:	2301      	movs	r3, #1
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	4821      	ldr	r0, [pc, #132]	@ (8001414 <MX_GPIO_Init+0x1f8>)
 8001390:	f006 fb1c 	bl	80079cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001394:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013a6:	230a      	movs	r3, #10
 80013a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	481a      	ldr	r0, [pc, #104]	@ (800141c <MX_GPIO_Init+0x200>)
 80013b2:	f006 fb0b 	bl	80079cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013b6:	23e0      	movs	r3, #224	@ 0xe0
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4811      	ldr	r0, [pc, #68]	@ (8001414 <MX_GPIO_Init+0x1f8>)
 80013ce:	f006 fafd 	bl	80079cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80013d2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e4:	230b      	movs	r3, #11
 80013e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	480d      	ldr	r0, [pc, #52]	@ (8001424 <MX_GPIO_Init+0x208>)
 80013f0:	f006 faec 	bl	80079cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	2028      	movs	r0, #40	@ 0x28
 80013fa:	f003 fe2e 	bl	800505a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013fe:	2028      	movs	r0, #40	@ 0x28
 8001400:	f003 fe45 	bl	800508e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001404:	bf00      	nop
 8001406:	3730      	adds	r7, #48	@ 0x30
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	58024400 	.word	0x58024400
 8001410:	58021400 	.word	0x58021400
 8001414:	58020c00 	.word	0x58020c00
 8001418:	58020800 	.word	0x58020800
 800141c:	58020000 	.word	0x58020000
 8001420:	58020400 	.word	0x58020400
 8001424:	58021800 	.word	0x58021800

08001428 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_14&& p1_LUT[enc_c]) {
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001438:	d123      	bne.n	8001482 <HAL_GPIO_EXTI_Callback+0x5a>
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <HAL_GPIO_EXTI_Callback+0x68>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a15      	ldr	r2, [pc, #84]	@ (8001494 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d01c      	beq.n	8001482 <HAL_GPIO_EXTI_Callback+0x5a>
        if (!first_triggered) {
 8001448:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <HAL_GPIO_EXTI_Callback+0x70>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d108      	bne.n	8001462 <HAL_GPIO_EXTI_Callback+0x3a>
            // 첫 번째 EXTI 발생 시: CNT 값을 enc_z_phase에 저장
            enc_z_phase = TIM4->CNT;
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_GPIO_EXTI_Callback+0x74>)
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001454:	461a      	mov	r2, r3
 8001456:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_GPIO_EXTI_Callback+0x78>)
 8001458:	601a      	str	r2, [r3, #0]
            first_triggered = 1;
 800145a:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <HAL_GPIO_EXTI_Callback+0x70>)
 800145c:	2201      	movs	r2, #1
 800145e:	801a      	strh	r2, [r3, #0]
                TIM4->CNT = enc_z_phase;
                trigger_count = 0; // 카운터 초기화
            }
        }
    }
}
 8001460:	e00f      	b.n	8001482 <HAL_GPIO_EXTI_Callback+0x5a>
        	trigger_count++;
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	4a0e      	ldr	r2, [pc, #56]	@ (80014a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800146a:	6013      	str	r3, [r2, #0]
            if (trigger_count >= 5) {
 800146c:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b04      	cmp	r3, #4
 8001472:	dd06      	ble.n	8001482 <HAL_GPIO_EXTI_Callback+0x5a>
                TIM4->CNT = enc_z_phase;
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_GPIO_EXTI_Callback+0x78>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b08      	ldr	r3, [pc, #32]	@ (800149c <HAL_GPIO_EXTI_Callback+0x74>)
 800147a:	625a      	str	r2, [r3, #36]	@ 0x24
                trigger_count = 0; // 카운터 초기화
 800147c:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2400c114 	.word	0x2400c114
 8001494:	24000474 	.word	0x24000474
 8001498:	24010214 	.word	0x24010214
 800149c:	40000800 	.word	0x40000800
 80014a0:	2400c1f0 	.word	0x2400c1f0
 80014a4:	2401009c 	.word	0x2401009c

080014a8 <HAL_TIM_PeriodElapsedCallback>:
	  __NOP();
  }
} */
// Timer 1,8 interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

	if(htim->Instance == htim8.Instance)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b92      	ldr	r3, [pc, #584]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	f040 865c 	bne.w	8002176 <HAL_TIM_PeriodElapsedCallback+0xcce>
	{
		tim8_finish=TIM6->CNT;
 80014be:	4b91      	ldr	r3, [pc, #580]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b90      	ldr	r3, [pc, #576]	@ (8001708 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80014c6:	601a      	str	r2, [r3, #0]
		tim8_count=tim8_finish-tim8_start;
 80014c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001708 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b8f      	ldr	r3, [pc, #572]	@ (800170c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	4a8f      	ldr	r2, [pc, #572]	@ (8001710 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80014d4:	6013      	str	r3, [r2, #0]
		tim8_start= TIM6->CNT;
 80014d6:	4b8b      	ldr	r3, [pc, #556]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80014d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014da:	461a      	mov	r2, r3
 80014dc:	4b8b      	ldr	r3, [pc, #556]	@ (800170c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80014de:	601a      	str	r2, [r3, #0]
		tim8_start2= TIM6->CNT;
 80014e0:	4b88      	ldr	r3, [pc, #544]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80014e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001714 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80014e8:	601a      	str	r2, [r3, #0]


		chai_plus_a = (current_num_a1 != 0) ? (temp_chai_a1 / current_num_a1) : 0;
 80014ea:	4b8b      	ldr	r3, [pc, #556]	@ (8001718 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d006      	beq.n	8001500 <HAL_TIM_PeriodElapsedCallback+0x58>
 80014f2:	4b8a      	ldr	r3, [pc, #552]	@ (800171c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4b88      	ldr	r3, [pc, #544]	@ (8001718 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80014fe:	e000      	b.n	8001502 <HAL_TIM_PeriodElapsedCallback+0x5a>
 8001500:	2300      	movs	r3, #0
 8001502:	4a87      	ldr	r2, [pc, #540]	@ (8001720 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001504:	6013      	str	r3, [r2, #0]
		chai_minus_a = (current_num_a2 != 0) ? (temp_chai_a2 / current_num_a2) : 0;
 8001506:	4b87      	ldr	r3, [pc, #540]	@ (8001724 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <HAL_TIM_PeriodElapsedCallback+0x74>
 800150e:	4b86      	ldr	r3, [pc, #536]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b84      	ldr	r3, [pc, #528]	@ (8001724 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	fb92 f3f3 	sdiv	r3, r2, r3
 800151a:	e000      	b.n	800151e <HAL_TIM_PeriodElapsedCallback+0x76>
 800151c:	2300      	movs	r3, #0
 800151e:	4a83      	ldr	r2, [pc, #524]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001520:	6013      	str	r3, [r2, #0]
		chai_plus_b = (current_num_b1 != 0) ? (temp_chai_b1 / current_num_b1) : 0;
 8001522:	4b83      	ldr	r3, [pc, #524]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <HAL_TIM_PeriodElapsedCallback+0x90>
 800152a:	4b82      	ldr	r3, [pc, #520]	@ (8001734 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4b80      	ldr	r3, [pc, #512]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	fb92 f3f3 	sdiv	r3, r2, r3
 8001536:	e000      	b.n	800153a <HAL_TIM_PeriodElapsedCallback+0x92>
 8001538:	2300      	movs	r3, #0
 800153a:	4a7f      	ldr	r2, [pc, #508]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800153c:	6013      	str	r3, [r2, #0]
		chai_minus_b = (current_num_b2 != 0) ? (temp_chai_b2 / current_num_b2) : 0;
 800153e:	4b7f      	ldr	r3, [pc, #508]	@ (800173c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d006      	beq.n	8001554 <HAL_TIM_PeriodElapsedCallback+0xac>
 8001546:	4b7e      	ldr	r3, [pc, #504]	@ (8001740 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b7c      	ldr	r3, [pc, #496]	@ (800173c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001552:	e000      	b.n	8001556 <HAL_TIM_PeriodElapsedCallback+0xae>
 8001554:	2300      	movs	r3, #0
 8001556:	4a7b      	ldr	r2, [pc, #492]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001558:	6013      	str	r3, [r2, #0]
		chai_plus_c = (current_num_c1 != 0) ? (temp_chai_c1 / current_num_c1) : 0;
 800155a:	4b7b      	ldr	r3, [pc, #492]	@ (8001748 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d006      	beq.n	8001570 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8001562:	4b7a      	ldr	r3, [pc, #488]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b78      	ldr	r3, [pc, #480]	@ (8001748 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	fb92 f3f3 	sdiv	r3, r2, r3
 800156e:	e000      	b.n	8001572 <HAL_TIM_PeriodElapsedCallback+0xca>
 8001570:	2300      	movs	r3, #0
 8001572:	4a77      	ldr	r2, [pc, #476]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001574:	6013      	str	r3, [r2, #0]
		chai_minus_c = (current_num_c2 != 0) ? (temp_chai_c2 / current_num_c2) : 0;
 8001576:	4b77      	ldr	r3, [pc, #476]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d006      	beq.n	800158c <HAL_TIM_PeriodElapsedCallback+0xe4>
 800157e:	4b76      	ldr	r3, [pc, #472]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b74      	ldr	r3, [pc, #464]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	fb92 f3f3 	sdiv	r3, r2, r3
 800158a:	e000      	b.n	800158e <HAL_TIM_PeriodElapsedCallback+0xe6>
 800158c:	2300      	movs	r3, #0
 800158e:	4a73      	ldr	r2, [pc, #460]	@ (800175c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001590:	6013      	str	r3, [r2, #0]

		temp_chai_a1=0;
 8001592:	4b62      	ldr	r3, [pc, #392]	@ (800171c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
		current_num_a1=0;
 8001598:	4b5f      	ldr	r3, [pc, #380]	@ (8001718 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
		temp_chai_a2=0;
 800159e:	4b62      	ldr	r3, [pc, #392]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
		current_num_a2=0;
 80015a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001724 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]

		temp_chai_b1=0;
 80015aa:	4b62      	ldr	r3, [pc, #392]	@ (8001734 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
		current_num_b1=0;
 80015b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
		temp_chai_b2=0;
 80015b6:	4b62      	ldr	r3, [pc, #392]	@ (8001740 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
		current_num_b2=0;
 80015bc:	4b5f      	ldr	r3, [pc, #380]	@ (800173c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

		temp_chai_c1=0;
 80015c2:	4b62      	ldr	r3, [pc, #392]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
		current_num_c1=0;
 80015c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001748 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
		temp_chai_c2=0;
 80015ce:	4b62      	ldr	r3, [pc, #392]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
		current_num_c2=0;
 80015d4:	4b5f      	ldr	r3, [pc, #380]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]

		if(chai_plus_a==0||chai_minus_a==0) L_a= prev_L_a;
 80015da:	4b51      	ldr	r3, [pc, #324]	@ (8001720 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_TIM_PeriodElapsedCallback+0x142>
 80015e2:	4b52      	ldr	r3, [pc, #328]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d104      	bne.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x14c>
 80015ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001760 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a5d      	ldr	r2, [pc, #372]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e032      	b.n	800165a <HAL_TIM_PeriodElapsedCallback+0x1b2>
		else
			{
		plus_di_dt_a=chai_plus_a;
 80015f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001720 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001600:	4b59      	ldr	r3, [pc, #356]	@ (8001768 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001602:	edc3 7a00 	vstr	s15, [r3]
		minus_di_dt_a=chai_minus_a;
 8001606:	4b49      	ldr	r3, [pc, #292]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001612:	4b56      	ldr	r3, [pc, #344]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001614:	edc3 7a00 	vstr	s15, [r3]
				L_a = temp/(plus_di_dt_a-minus_di_dt_a);
 8001618:	4b55      	ldr	r3, [pc, #340]	@ (8001770 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	ee07 3a90 	vmov	s15, r3
 8001620:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001624:	4b50      	ldr	r3, [pc, #320]	@ (8001768 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001626:	ed93 7a00 	vldr	s14, [r3]
 800162a:	4b50      	ldr	r3, [pc, #320]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001638:	4b4a      	ldr	r3, [pc, #296]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800163a:	edc3 7a00 	vstr	s15, [r3]
				if(L_a>=4096) L_a=4096;
 800163e:	4b49      	ldr	r3, [pc, #292]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001774 <HAL_TIM_PeriodElapsedCallback+0x2cc>
 8001648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	db03      	blt.n	800165a <HAL_TIM_PeriodElapsedCallback+0x1b2>
 8001652:	4b44      	ldr	r3, [pc, #272]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001654:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001658:	601a      	str	r2, [r3, #0]
			}
				L_a_filtered = 0.8*L_a + 0.2 * L_a_filtered;
 800165a:	4b42      	ldr	r3, [pc, #264]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001664:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 80016f0 <HAL_TIM_PeriodElapsedCallback+0x248>
 8001668:	ee27 6b06 	vmul.f64	d6, d7, d6
 800166c:	4b42      	ldr	r3, [pc, #264]	@ (8001778 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001676:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 80016f8 <HAL_TIM_PeriodElapsedCallback+0x250>
 800167a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800167e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001682:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001686:	4b3c      	ldr	r3, [pc, #240]	@ (8001778 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001688:	edc3 7a00 	vstr	s15, [r3]
				//if((L_a-L_a_filtered))
				L_a_filtered_values[filtered_index_a] = L_a_filtered;
 800168c:	4b3b      	ldr	r3, [pc, #236]	@ (800177c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a39      	ldr	r2, [pc, #228]	@ (8001778 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	493a      	ldr	r1, [pc, #232]	@ (8001780 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	601a      	str	r2, [r3, #0]
				if(filtered_index_a>=index_num)
 800169c:	4b37      	ldr	r3, [pc, #220]	@ (800177c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b38      	ldr	r3, [pc, #224]	@ (8001784 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	db0e      	blt.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0x21e>
					{
					L_a_filtered_average = calculate_average(L_a_filtered_values, index_num);
 80016a8:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	4834      	ldr	r0, [pc, #208]	@ (8001780 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80016b0:	f001 fb46 	bl	8002d40 <calculate_average>
 80016b4:	eef0 7a40 	vmov.f32	s15, s0
 80016b8:	4b33      	ldr	r3, [pc, #204]	@ (8001788 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80016ba:	edc3 7a00 	vstr	s15, [r3]
					filtered_index_a =1;
 80016be:	4b2f      	ldr	r3, [pc, #188]	@ (800177c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e004      	b.n	80016d0 <HAL_TIM_PeriodElapsedCallback+0x228>
					}
				else filtered_index_a++;
 80016c6:	4b2d      	ldr	r3, [pc, #180]	@ (800177c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	4a2b      	ldr	r2, [pc, #172]	@ (800177c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80016ce:	6013      	str	r3, [r2, #0]


		if(chai_plus_b==0||chai_minus_b==0) L_b= prev_L_b;
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_TIM_PeriodElapsedCallback+0x238>
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d159      	bne.n	8001794 <HAL_TIM_PeriodElapsedCallback+0x2ec>
 80016e0:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001790 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e087      	b.n	80017fa <HAL_TIM_PeriodElapsedCallback+0x352>
 80016ea:	bf00      	nop
 80016ec:	f3af 8000 	nop.w
 80016f0:	9999999a 	.word	0x9999999a
 80016f4:	3fe99999 	.word	0x3fe99999
 80016f8:	9999999a 	.word	0x9999999a
 80016fc:	3fc99999 	.word	0x3fc99999
 8001700:	24000420 	.word	0x24000420
 8001704:	40001000 	.word	0x40001000
 8001708:	2400c174 	.word	0x2400c174
 800170c:	2400c170 	.word	0x2400c170
 8001710:	2400c16c 	.word	0x2400c16c
 8001714:	2400c180 	.word	0x2400c180
 8001718:	24010110 	.word	0x24010110
 800171c:	2401010c 	.word	0x2401010c
 8001720:	2400c1b4 	.word	0x2400c1b4
 8001724:	24010118 	.word	0x24010118
 8001728:	24010114 	.word	0x24010114
 800172c:	2400c1b8 	.word	0x2400c1b8
 8001730:	2401017c 	.word	0x2401017c
 8001734:	24010178 	.word	0x24010178
 8001738:	2400c1bc 	.word	0x2400c1bc
 800173c:	24010184 	.word	0x24010184
 8001740:	24010180 	.word	0x24010180
 8001744:	2400c1c0 	.word	0x2400c1c0
 8001748:	240101e8 	.word	0x240101e8
 800174c:	240101e4 	.word	0x240101e4
 8001750:	2400c1c4 	.word	0x2400c1c4
 8001754:	240101f0 	.word	0x240101f0
 8001758:	240101ec 	.word	0x240101ec
 800175c:	2400c1c8 	.word	0x2400c1c8
 8001760:	2401011c 	.word	0x2401011c
 8001764:	2400c148 	.word	0x2400c148
 8001768:	2400c1d4 	.word	0x2400c1d4
 800176c:	2400c1d8 	.word	0x2400c1d8
 8001770:	24000050 	.word	0x24000050
 8001774:	45800000 	.word	0x45800000
 8001778:	24000040 	.word	0x24000040
 800177c:	24010104 	.word	0x24010104
 8001780:	240100b4 	.word	0x240100b4
 8001784:	2400004c 	.word	0x2400004c
 8001788:	24010108 	.word	0x24010108
 800178c:	24010188 	.word	0x24010188
 8001790:	2400c14c 	.word	0x2400c14c
		else
			{
		plus_di_dt_b=chai_plus_b;
 8001794:	4b76      	ldr	r3, [pc, #472]	@ (8001970 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	ee07 3a90 	vmov	s15, r3
 800179c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a0:	4b74      	ldr	r3, [pc, #464]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80017a2:	edc3 7a00 	vstr	s15, [r3]
		minus_di_dt_b=chai_minus_b;
 80017a6:	4b74      	ldr	r3, [pc, #464]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b2:	4b72      	ldr	r3, [pc, #456]	@ (800197c <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80017b4:	edc3 7a00 	vstr	s15, [r3]
				L_b = temp/(plus_di_dt_b-minus_di_dt_b);
 80017b8:	4b71      	ldr	r3, [pc, #452]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	ee07 3a90 	vmov	s15, r3
 80017c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80017c6:	ed93 7a00 	vldr	s14, [r3]
 80017ca:	4b6c      	ldr	r3, [pc, #432]	@ (800197c <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80017da:	edc3 7a00 	vstr	s15, [r3]
				if(L_b>=4096) L_b=4096;
 80017de:	4b69      	ldr	r3, [pc, #420]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8001988 <HAL_TIM_PeriodElapsedCallback+0x4e0>
 80017e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	db03      	blt.n	80017fa <HAL_TIM_PeriodElapsedCallback+0x352>
 80017f2:	4b64      	ldr	r3, [pc, #400]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80017f4:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 80017f8:	601a      	str	r2, [r3, #0]
			}
				L_b_filtered = 0.8*L_b + 0.2 * L_b_filtered;
 80017fa:	4b62      	ldr	r3, [pc, #392]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001804:	ed9f 6b56 	vldr	d6, [pc, #344]	@ 8001960 <HAL_TIM_PeriodElapsedCallback+0x4b8>
 8001808:	ee27 6b06 	vmul.f64	d6, d7, d6
 800180c:	4b5f      	ldr	r3, [pc, #380]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001816:	ed9f 5b54 	vldr	d5, [pc, #336]	@ 8001968 <HAL_TIM_PeriodElapsedCallback+0x4c0>
 800181a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800181e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001822:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001826:	4b59      	ldr	r3, [pc, #356]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001828:	edc3 7a00 	vstr	s15, [r3]

				L_b_filtered_values[filtered_index_b] = L_b_filtered;
 800182c:	4b58      	ldr	r3, [pc, #352]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a56      	ldr	r2, [pc, #344]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	4957      	ldr	r1, [pc, #348]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	601a      	str	r2, [r3, #0]
				if(filtered_index_b>=index_num)
 800183c:	4b54      	ldr	r3, [pc, #336]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b55      	ldr	r3, [pc, #340]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	db0e      	blt.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x3be>
					{
					L_b_filtered_average = calculate_average(L_b_filtered_values, index_num);
 8001848:	4b53      	ldr	r3, [pc, #332]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	4851      	ldr	r0, [pc, #324]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001850:	f001 fa76 	bl	8002d40 <calculate_average>
 8001854:	eef0 7a40 	vmov.f32	s15, s0
 8001858:	4b50      	ldr	r3, [pc, #320]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 800185a:	edc3 7a00 	vstr	s15, [r3]
					filtered_index_b =1;
 800185e:	4b4c      	ldr	r3, [pc, #304]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001860:	2201      	movs	r2, #1
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e004      	b.n	8001870 <HAL_TIM_PeriodElapsedCallback+0x3c8>
					}
				else filtered_index_b++;
 8001866:	4b4a      	ldr	r3, [pc, #296]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3301      	adds	r3, #1
 800186c:	4a48      	ldr	r2, [pc, #288]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800186e:	6013      	str	r3, [r2, #0]


		if(chai_plus_c==0||chai_minus_c==0) L_c= prev_L_c;
 8001870:	4b4b      	ldr	r3, [pc, #300]	@ (80019a0 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_TIM_PeriodElapsedCallback+0x3d8>
 8001878:	4b4a      	ldr	r3, [pc, #296]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d104      	bne.n	800188a <HAL_TIM_PeriodElapsedCallback+0x3e2>
 8001880:	4b49      	ldr	r3, [pc, #292]	@ (80019a8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a49      	ldr	r2, [pc, #292]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e032      	b.n	80018f0 <HAL_TIM_PeriodElapsedCallback+0x448>
		else
			{
		plus_di_dt_c=chai_plus_c;
 800188a:	4b45      	ldr	r3, [pc, #276]	@ (80019a0 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001896:	4b46      	ldr	r3, [pc, #280]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001898:	edc3 7a00 	vstr	s15, [r3]
		minus_di_dt_c=chai_minus_c;
 800189c:	4b41      	ldr	r3, [pc, #260]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a8:	4b42      	ldr	r3, [pc, #264]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80018aa:	edc3 7a00 	vstr	s15, [r3]
				L_c = temp/(plus_di_dt_c-minus_di_dt_c);
 80018ae:	4b34      	ldr	r3, [pc, #208]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018ba:	4b3d      	ldr	r3, [pc, #244]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80018bc:	ed93 7a00 	vldr	s14, [r3]
 80018c0:	4b3c      	ldr	r3, [pc, #240]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80018c2:	edd3 7a00 	vldr	s15, [r3]
 80018c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ce:	4b37      	ldr	r3, [pc, #220]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x504>)
 80018d0:	edc3 7a00 	vstr	s15, [r3]
				if(L_c>=4096) L_c=4096;
 80018d4:	4b35      	ldr	r3, [pc, #212]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x504>)
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001988 <HAL_TIM_PeriodElapsedCallback+0x4e0>
 80018de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	db03      	blt.n	80018f0 <HAL_TIM_PeriodElapsedCallback+0x448>
 80018e8:	4b30      	ldr	r3, [pc, #192]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x504>)
 80018ea:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 80018ee:	601a      	str	r2, [r3, #0]
			}
				L_c_filtered = 0.8* L_c + 0.2 * L_c_filtered;
 80018f0:	4b2e      	ldr	r3, [pc, #184]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x504>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018fa:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8001960 <HAL_TIM_PeriodElapsedCallback+0x4b8>
 80018fe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001902:	4b2d      	ldr	r3, [pc, #180]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800190c:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8001968 <HAL_TIM_PeriodElapsedCallback+0x4c0>
 8001910:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001914:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001918:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800191c:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800191e:	edc3 7a00 	vstr	s15, [r3]

				L_c_filtered_values[filtered_index_c] = L_c_filtered;
 8001922:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0x514>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a24      	ldr	r2, [pc, #144]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	4925      	ldr	r1, [pc, #148]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x518>)
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	601a      	str	r2, [r3, #0]
				if(filtered_index_c>=index_num)
 8001932:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0x514>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	db44      	blt.n	80019c8 <HAL_TIM_PeriodElapsedCallback+0x520>
					{
					L_c_filtered_average = calculate_average(L_c_filtered_values, index_num);
 800193e:	4b16      	ldr	r3, [pc, #88]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4619      	mov	r1, r3
 8001944:	481e      	ldr	r0, [pc, #120]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8001946:	f001 f9fb 	bl	8002d40 <calculate_average>
 800194a:	eef0 7a40 	vmov.f32	s15, s0
 800194e:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8001950:	edc3 7a00 	vstr	s15, [r3]
					filtered_index_c =1;
 8001954:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0x514>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	e03a      	b.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x52a>
 800195c:	f3af 8000 	nop.w
 8001960:	9999999a 	.word	0x9999999a
 8001964:	3fe99999 	.word	0x3fe99999
 8001968:	9999999a 	.word	0x9999999a
 800196c:	3fc99999 	.word	0x3fc99999
 8001970:	2400c1bc 	.word	0x2400c1bc
 8001974:	2400c1dc 	.word	0x2400c1dc
 8001978:	2400c1c0 	.word	0x2400c1c0
 800197c:	2400c1e0 	.word	0x2400c1e0
 8001980:	24000050 	.word	0x24000050
 8001984:	2400c14c 	.word	0x2400c14c
 8001988:	45800000 	.word	0x45800000
 800198c:	24000044 	.word	0x24000044
 8001990:	24010170 	.word	0x24010170
 8001994:	24010120 	.word	0x24010120
 8001998:	2400004c 	.word	0x2400004c
 800199c:	24010174 	.word	0x24010174
 80019a0:	2400c1c4 	.word	0x2400c1c4
 80019a4:	2400c1c8 	.word	0x2400c1c8
 80019a8:	240101f4 	.word	0x240101f4
 80019ac:	2400c150 	.word	0x2400c150
 80019b0:	2400c1e4 	.word	0x2400c1e4
 80019b4:	2400c1e8 	.word	0x2400c1e8
 80019b8:	24000048 	.word	0x24000048
 80019bc:	240101dc 	.word	0x240101dc
 80019c0:	2401018c 	.word	0x2401018c
 80019c4:	240101e0 	.word	0x240101e0
					}
				else filtered_index_c++;
 80019c8:	4bc3      	ldr	r3, [pc, #780]	@ (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	4ac2      	ldr	r2, [pc, #776]	@ (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80019d0:	6013      	str	r3, [r2, #0]




				used_L_a=L_a_filtered_average;
 80019d2:	4bc2      	ldr	r3, [pc, #776]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x834>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4ac2      	ldr	r2, [pc, #776]	@ (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x838>)
 80019d8:	6013      	str	r3, [r2, #0]
				used_L_b=L_b_filtered_average;
 80019da:	4bc2      	ldr	r3, [pc, #776]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4ac2      	ldr	r2, [pc, #776]	@ (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x840>)
 80019e0:	6013      	str	r3, [r2, #0]
				used_L_c=L_c_filtered_average;
 80019e2:	4bc2      	ldr	r3, [pc, #776]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x844>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4ac2      	ldr	r2, [pc, #776]	@ (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80019e8:	6013      	str	r3, [r2, #0]

				if(adc_val[1] > 35000) L_a_filtered_average = 1500;
 80019ea:	4bc2      	ldr	r3, [pc, #776]	@ (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 80019ec:	885b      	ldrh	r3, [r3, #2]
 80019ee:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d902      	bls.n	80019fc <HAL_TIM_PeriodElapsedCallback+0x554>
 80019f6:	4bb9      	ldr	r3, [pc, #740]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x834>)
 80019f8:	4abf      	ldr	r2, [pc, #764]	@ (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x850>)
 80019fa:	601a      	str	r2, [r3, #0]
				if(adc_val[2] > 35000) L_b_filtered_average = 1500;
 80019fc:	4bbd      	ldr	r3, [pc, #756]	@ (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 80019fe:	889b      	ldrh	r3, [r3, #4]
 8001a00:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d902      	bls.n	8001a0e <HAL_TIM_PeriodElapsedCallback+0x566>
 8001a08:	4bb6      	ldr	r3, [pc, #728]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001a0a:	4abb      	ldr	r2, [pc, #748]	@ (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8001a0c:	601a      	str	r2, [r3, #0]
				if(adc_val[3] > 35000) L_c_filtered_average = 1500;
 8001a0e:	4bb9      	ldr	r3, [pc, #740]	@ (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001a10:	88db      	ldrh	r3, [r3, #6]
 8001a12:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d902      	bls.n	8001a20 <HAL_TIM_PeriodElapsedCallback+0x578>
 8001a1a:	4bb4      	ldr	r3, [pc, #720]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001a1c:	4ab6      	ldr	r2, [pc, #728]	@ (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8001a1e:	601a      	str	r2, [r3, #0]


				//sicid의 안정성을 높이기 위해 2번 기울기 비교 후, 진입

				prev_L_a = L_a_filtered_average;
 8001a20:	4bae      	ldr	r3, [pc, #696]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4ab5      	ldr	r2, [pc, #724]	@ (8001cfc <HAL_TIM_PeriodElapsedCallback+0x854>)
 8001a26:	6013      	str	r3, [r2, #0]
				prev_L_b = L_b_filtered_average;
 8001a28:	4bae      	ldr	r3, [pc, #696]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4ab4      	ldr	r2, [pc, #720]	@ (8001d00 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8001a2e:	6013      	str	r3, [r2, #0]
				prev_L_c = L_c_filtered_average;
 8001a30:	4bae      	ldr	r3, [pc, #696]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4ab3      	ldr	r2, [pc, #716]	@ (8001d04 <HAL_TIM_PeriodElapsedCallback+0x85c>)
 8001a36:	6013      	str	r3, [r2, #0]

			    prev2_L_a = prev_L_a;
 8001a38:	4bb0      	ldr	r3, [pc, #704]	@ (8001cfc <HAL_TIM_PeriodElapsedCallback+0x854>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4ab2      	ldr	r2, [pc, #712]	@ (8001d08 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8001a3e:	6013      	str	r3, [r2, #0]
			    prev2_L_b = prev_L_b;
 8001a40:	4baf      	ldr	r3, [pc, #700]	@ (8001d00 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4ab1      	ldr	r2, [pc, #708]	@ (8001d0c <HAL_TIM_PeriodElapsedCallback+0x864>)
 8001a46:	6013      	str	r3, [r2, #0]
			    prev2_L_c = prev_L_c;
 8001a48:	4bae      	ldr	r3, [pc, #696]	@ (8001d04 <HAL_TIM_PeriodElapsedCallback+0x85c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4ab0      	ldr	r2, [pc, #704]	@ (8001d10 <HAL_TIM_PeriodElapsedCallback+0x868>)
 8001a4e:	6013      	str	r3, [r2, #0]


			if(L_a_filtered_average>L_c_filtered_average&&L_a_filtered_average>L_b_filtered_average) //a ??????????????????  ? ??  ?
 8001a50:	4ba2      	ldr	r3, [pc, #648]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001a52:	ed93 7a00 	vldr	s14, [r3]
 8001a56:	4ba5      	ldr	r3, [pc, #660]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	dd60      	ble.n	8001b28 <HAL_TIM_PeriodElapsedCallback+0x680>
 8001a66:	4b9d      	ldr	r3, [pc, #628]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001a68:	ed93 7a00 	vldr	s14, [r3]
 8001a6c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7a:	dd55      	ble.n	8001b28 <HAL_TIM_PeriodElapsedCallback+0x680>
				{
					Lma=L_a_filtered_average-((L_b_filtered_average+L_c_filtered_average)/2);
 8001a7c:	4b97      	ldr	r3, [pc, #604]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001a7e:	ed93 7a00 	vldr	s14, [r3]
 8001a82:	4b98      	ldr	r3, [pc, #608]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001a84:	edd3 6a00 	vldr	s13, [r3]
 8001a88:	4b98      	ldr	r3, [pc, #608]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a92:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001a96:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a9e:	4b9d      	ldr	r3, [pc, #628]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x86c>)
 8001aa0:	edc3 7a00 	vstr	s15, [r3]
					Lna=0.866*(L_b_filtered_average-L_c_filtered_average);
 8001aa4:	4b8f      	ldr	r3, [pc, #572]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001aa6:	ed93 7a00 	vldr	s14, [r3]
 8001aaa:	4b90      	ldr	r3, [pc, #576]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ab8:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 8001ca8 <HAL_TIM_PeriodElapsedCallback+0x800>
 8001abc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ac0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ac4:	4b94      	ldr	r3, [pc, #592]	@ (8001d18 <HAL_TIM_PeriodElapsedCallback+0x870>)
 8001ac6:	edc3 7a00 	vstr	s15, [r3]
					theta_a=FastArcTan(Lna/Lma)+6.28;
 8001aca:	4b93      	ldr	r3, [pc, #588]	@ (8001d18 <HAL_TIM_PeriodElapsedCallback+0x870>)
 8001acc:	edd3 6a00 	vldr	s13, [r3]
 8001ad0:	4b90      	ldr	r3, [pc, #576]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x86c>)
 8001ad2:	ed93 7a00 	vldr	s14, [r3]
 8001ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ada:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ade:	eeb0 0b47 	vmov.f64	d0, d7
 8001ae2:	f001 f89d 	bl	8002c20 <FastArcTan>
 8001ae6:	eeb0 7b40 	vmov.f64	d7, d0
 8001aea:	ed9f 6b71 	vldr	d6, [pc, #452]	@ 8001cb0 <HAL_TIM_PeriodElapsedCallback+0x808>
 8001aee:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001af2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001af6:	4b89      	ldr	r3, [pc, #548]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x874>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]
					 angle_a=45*(theta_a/3.14)*15;
 8001afc:	4b87      	ldr	r3, [pc, #540]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x874>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b06:	ed9f 5b6c 	vldr	d5, [pc, #432]	@ 8001cb8 <HAL_TIM_PeriodElapsedCallback+0x810>
 8001b0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b0e:	ed9f 6b6c 	vldr	d6, [pc, #432]	@ 8001cc0 <HAL_TIM_PeriodElapsedCallback+0x818>
 8001b12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b16:	eeb2 6b0e 	vmov.f64	d6, #46	@ 0x41700000  15.0
 8001b1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b22:	4b7f      	ldr	r3, [pc, #508]	@ (8001d20 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8001b24:	edc3 7a00 	vstr	s15, [r3]

				}

				if(L_b_filtered_average>L_c_filtered_average&&L_b_filtered_average>L_a_filtered_average) //b ??????????????????  ? ??  ?
 8001b28:	4b6e      	ldr	r3, [pc, #440]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001b2a:	ed93 7a00 	vldr	s14, [r3]
 8001b2e:	4b6f      	ldr	r3, [pc, #444]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3c:	dd60      	ble.n	8001c00 <HAL_TIM_PeriodElapsedCallback+0x758>
 8001b3e:	4b69      	ldr	r3, [pc, #420]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001b40:	ed93 7a00 	vldr	s14, [r3]
 8001b44:	4b65      	ldr	r3, [pc, #404]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001b46:	edd3 7a00 	vldr	s15, [r3]
 8001b4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b52:	dd55      	ble.n	8001c00 <HAL_TIM_PeriodElapsedCallback+0x758>
								{
					Lmb=L_b_filtered_average-((L_a_filtered_average+L_c_filtered_average)/2);
 8001b54:	4b63      	ldr	r3, [pc, #396]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001b56:	ed93 7a00 	vldr	s14, [r3]
 8001b5a:	4b60      	ldr	r3, [pc, #384]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001b5c:	edd3 6a00 	vldr	s13, [r3]
 8001b60:	4b62      	ldr	r3, [pc, #392]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b6a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001b6e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b76:	4b6b      	ldr	r3, [pc, #428]	@ (8001d24 <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8001b78:	edc3 7a00 	vstr	s15, [r3]
					Lnb=0.866*(L_c_filtered_average-L_a_filtered_average);
 8001b7c:	4b5b      	ldr	r3, [pc, #364]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001b7e:	ed93 7a00 	vldr	s14, [r3]
 8001b82:	4b56      	ldr	r3, [pc, #344]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b90:	ed9f 6b45 	vldr	d6, [pc, #276]	@ 8001ca8 <HAL_TIM_PeriodElapsedCallback+0x800>
 8001b94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b9c:	4b62      	ldr	r3, [pc, #392]	@ (8001d28 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8001b9e:	edc3 7a00 	vstr	s15, [r3]
					theta_b=FastArcTan(Lnb/Lmb)+2.09;
 8001ba2:	4b61      	ldr	r3, [pc, #388]	@ (8001d28 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8001ba4:	edd3 6a00 	vldr	s13, [r3]
 8001ba8:	4b5e      	ldr	r3, [pc, #376]	@ (8001d24 <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8001baa:	ed93 7a00 	vldr	s14, [r3]
 8001bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bb6:	eeb0 0b47 	vmov.f64	d0, d7
 8001bba:	f001 f831 	bl	8002c20 <FastArcTan>
 8001bbe:	eeb0 7b40 	vmov.f64	d7, d0
 8001bc2:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8001cc8 <HAL_TIM_PeriodElapsedCallback+0x820>
 8001bc6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001bca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bce:	4b57      	ldr	r3, [pc, #348]	@ (8001d2c <HAL_TIM_PeriodElapsedCallback+0x884>)
 8001bd0:	edc3 7a00 	vstr	s15, [r3]
					angle_a=45*(theta_b/3.14)*15;
 8001bd4:	4b55      	ldr	r3, [pc, #340]	@ (8001d2c <HAL_TIM_PeriodElapsedCallback+0x884>)
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001bde:	ed9f 5b36 	vldr	d5, [pc, #216]	@ 8001cb8 <HAL_TIM_PeriodElapsedCallback+0x810>
 8001be2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001be6:	ed9f 6b36 	vldr	d6, [pc, #216]	@ 8001cc0 <HAL_TIM_PeriodElapsedCallback+0x818>
 8001bea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001bee:	eeb2 6b0e 	vmov.f64	d6, #46	@ 0x41700000  15.0
 8001bf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001bf6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bfa:	4b49      	ldr	r3, [pc, #292]	@ (8001d20 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8001bfc:	edc3 7a00 	vstr	s15, [r3]
								}

				if(L_c_filtered_average>L_a_filtered_average&&L_c_filtered_average>L_b_filtered_average) //c ??????????????????  ? ??  ?
 8001c00:	4b3a      	ldr	r3, [pc, #232]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001c02:	ed93 7a00 	vldr	s14, [r3]
 8001c06:	4b35      	ldr	r3, [pc, #212]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001c08:	edd3 7a00 	vldr	s15, [r3]
 8001c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	f340 80ad 	ble.w	8001d72 <HAL_TIM_PeriodElapsedCallback+0x8ca>
 8001c18:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001c1a:	ed93 7a00 	vldr	s14, [r3]
 8001c1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	f340 80a1 	ble.w	8001d72 <HAL_TIM_PeriodElapsedCallback+0x8ca>
								{
					Lmc=L_c_filtered_average-((L_b_filtered_average+L_a_filtered_average)/2);
 8001c30:	4b2e      	ldr	r3, [pc, #184]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001c32:	ed93 7a00 	vldr	s14, [r3]
 8001c36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001c38:	edd3 6a00 	vldr	s13, [r3]
 8001c3c:	4b27      	ldr	r3, [pc, #156]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001c3e:	edd3 7a00 	vldr	s15, [r3]
 8001c42:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c46:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001c4a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c52:	4b37      	ldr	r3, [pc, #220]	@ (8001d30 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8001c54:	edc3 7a00 	vstr	s15, [r3]
					Lnc=0.866*(L_a_filtered_average-L_b_filtered_average);
 8001c58:	4b20      	ldr	r3, [pc, #128]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001c5a:	ed93 7a00 	vldr	s14, [r3]
 8001c5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c6c:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8001ca8 <HAL_TIM_PeriodElapsedCallback+0x800>
 8001c70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c78:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8001c7a:	edc3 7a00 	vstr	s15, [r3]
					theta_c=FastArcTan(Lnc/Lmc)+4.18;
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8001c80:	edd3 6a00 	vldr	s13, [r3]
 8001c84:	4b2a      	ldr	r3, [pc, #168]	@ (8001d30 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8001c86:	ed93 7a00 	vldr	s14, [r3]
 8001c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c92:	eeb0 0b47 	vmov.f64	d0, d7
 8001c96:	f000 ffc3 	bl	8002c20 <FastArcTan>
 8001c9a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c9e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8001cd0 <HAL_TIM_PeriodElapsedCallback+0x828>
 8001ca2:	e049      	b.n	8001d38 <HAL_TIM_PeriodElapsedCallback+0x890>
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	a1cac083 	.word	0xa1cac083
 8001cac:	3febb645 	.word	0x3febb645
 8001cb0:	51eb851f 	.word	0x51eb851f
 8001cb4:	40191eb8 	.word	0x40191eb8
 8001cb8:	51eb851f 	.word	0x51eb851f
 8001cbc:	40091eb8 	.word	0x40091eb8
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	40468000 	.word	0x40468000
 8001cc8:	eb851eb8 	.word	0xeb851eb8
 8001ccc:	4000b851 	.word	0x4000b851
 8001cd0:	eb851eb8 	.word	0xeb851eb8
 8001cd4:	4010b851 	.word	0x4010b851
 8001cd8:	240101dc 	.word	0x240101dc
 8001cdc:	24010108 	.word	0x24010108
 8001ce0:	240100a8 	.word	0x240100a8
 8001ce4:	24010174 	.word	0x24010174
 8001ce8:	240100ac 	.word	0x240100ac
 8001cec:	240101e0 	.word	0x240101e0
 8001cf0:	240100b0 	.word	0x240100b0
 8001cf4:	2400c118 	.word	0x2400c118
 8001cf8:	44bb8000 	.word	0x44bb8000
 8001cfc:	2401011c 	.word	0x2401011c
 8001d00:	24010188 	.word	0x24010188
 8001d04:	240101f4 	.word	0x240101f4
 8001d08:	24010208 	.word	0x24010208
 8001d0c:	2401020c 	.word	0x2401020c
 8001d10:	24010210 	.word	0x24010210
 8001d14:	2400c154 	.word	0x2400c154
 8001d18:	2400c158 	.word	0x2400c158
 8001d1c:	2400c1f4 	.word	0x2400c1f4
 8001d20:	2400c1f8 	.word	0x2400c1f8
 8001d24:	2400c15c 	.word	0x2400c15c
 8001d28:	2400c160 	.word	0x2400c160
 8001d2c:	2400c1fc 	.word	0x2400c1fc
 8001d30:	2400c168 	.word	0x2400c168
 8001d34:	2400c164 	.word	0x2400c164
 8001d38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d40:	4ba5      	ldr	r3, [pc, #660]	@ (8001fd8 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8001d42:	edc3 7a00 	vstr	s15, [r3]
					angle_a=45*(theta_c/3.14)*15;
 8001d46:	4ba4      	ldr	r3, [pc, #656]	@ (8001fd8 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8001d48:	edd3 7a00 	vldr	s15, [r3]
 8001d4c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001d50:	ed9f 5b9d 	vldr	d5, [pc, #628]	@ 8001fc8 <HAL_TIM_PeriodElapsedCallback+0xb20>
 8001d54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d58:	ed9f 6b9d 	vldr	d6, [pc, #628]	@ 8001fd0 <HAL_TIM_PeriodElapsedCallback+0xb28>
 8001d5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d60:	eeb2 6b0e 	vmov.f64	d6, #46	@ 0x41700000  15.0
 8001d64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d6c:	4b9b      	ldr	r3, [pc, #620]	@ (8001fdc <HAL_TIM_PeriodElapsedCallback+0xb34>)
 8001d6e:	edc3 7a00 	vstr	s15, [r3]
				if(angle_a<min_angle_a)
					min_angle_a=angle_a;  */



				if(measure_minmax)
 8001d72:	4b9b      	ldr	r3, [pc, #620]	@ (8001fe0 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d07c      	beq.n	8001e74 <HAL_TIM_PeriodElapsedCallback+0x9cc>
				{	stop_timer++;
 8001d7a:	4b9a      	ldr	r3, [pc, #616]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0xb3c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	4a98      	ldr	r2, [pc, #608]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0xb3c>)
 8001d82:	6013      	str	r3, [r2, #0]
				if(L_a_filtered_average>max_L_a)
 8001d84:	4b98      	ldr	r3, [pc, #608]	@ (8001fe8 <HAL_TIM_PeriodElapsedCallback+0xb40>)
 8001d86:	ed93 7a00 	vldr	s14, [r3]
 8001d8a:	4b98      	ldr	r3, [pc, #608]	@ (8001fec <HAL_TIM_PeriodElapsedCallback+0xb44>)
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d98:	dd03      	ble.n	8001da2 <HAL_TIM_PeriodElapsedCallback+0x8fa>
						max_L_a=L_a_filtered_average;
 8001d9a:	4b93      	ldr	r3, [pc, #588]	@ (8001fe8 <HAL_TIM_PeriodElapsedCallback+0xb40>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a93      	ldr	r2, [pc, #588]	@ (8001fec <HAL_TIM_PeriodElapsedCallback+0xb44>)
 8001da0:	6013      	str	r3, [r2, #0]
				if(L_a_filtered_average<min_L_a&& L_a_filtered_average>50)
 8001da2:	4b91      	ldr	r3, [pc, #580]	@ (8001fe8 <HAL_TIM_PeriodElapsedCallback+0xb40>)
 8001da4:	ed93 7a00 	vldr	s14, [r3]
 8001da8:	4b91      	ldr	r3, [pc, #580]	@ (8001ff0 <HAL_TIM_PeriodElapsedCallback+0xb48>)
 8001daa:	edd3 7a00 	vldr	s15, [r3]
 8001dae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db6:	d50d      	bpl.n	8001dd4 <HAL_TIM_PeriodElapsedCallback+0x92c>
 8001db8:	4b8b      	ldr	r3, [pc, #556]	@ (8001fe8 <HAL_TIM_PeriodElapsedCallback+0xb40>)
 8001dba:	edd3 7a00 	vldr	s15, [r3]
 8001dbe:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8001ff4 <HAL_TIM_PeriodElapsedCallback+0xb4c>
 8001dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	dd03      	ble.n	8001dd4 <HAL_TIM_PeriodElapsedCallback+0x92c>
						min_L_a=L_a_filtered_average;
 8001dcc:	4b86      	ldr	r3, [pc, #536]	@ (8001fe8 <HAL_TIM_PeriodElapsedCallback+0xb40>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a87      	ldr	r2, [pc, #540]	@ (8001ff0 <HAL_TIM_PeriodElapsedCallback+0xb48>)
 8001dd2:	6013      	str	r3, [r2, #0]

				if(L_b_filtered_average>max_L_b)
 8001dd4:	4b88      	ldr	r3, [pc, #544]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8001dd6:	ed93 7a00 	vldr	s14, [r3]
 8001dda:	4b88      	ldr	r3, [pc, #544]	@ (8001ffc <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	dd03      	ble.n	8001df2 <HAL_TIM_PeriodElapsedCallback+0x94a>
						max_L_b=L_b_filtered_average;
 8001dea:	4b83      	ldr	r3, [pc, #524]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a83      	ldr	r2, [pc, #524]	@ (8001ffc <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8001df0:	6013      	str	r3, [r2, #0]
				if(L_b_filtered_average<min_L_b&& L_b_filtered_average >50)
 8001df2:	4b81      	ldr	r3, [pc, #516]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8001df4:	ed93 7a00 	vldr	s14, [r3]
 8001df8:	4b81      	ldr	r3, [pc, #516]	@ (8002000 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	d50d      	bpl.n	8001e24 <HAL_TIM_PeriodElapsedCallback+0x97c>
 8001e08:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8001ff4 <HAL_TIM_PeriodElapsedCallback+0xb4c>
 8001e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1a:	dd03      	ble.n	8001e24 <HAL_TIM_PeriodElapsedCallback+0x97c>
						min_L_b=L_b_filtered_average;
 8001e1c:	4b76      	ldr	r3, [pc, #472]	@ (8001ff8 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a77      	ldr	r2, [pc, #476]	@ (8002000 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8001e22:	6013      	str	r3, [r2, #0]

				if(L_c_filtered_average>max_L_c)
 8001e24:	4b77      	ldr	r3, [pc, #476]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 8001e26:	ed93 7a00 	vldr	s14, [r3]
 8001e2a:	4b77      	ldr	r3, [pc, #476]	@ (8002008 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e38:	dd03      	ble.n	8001e42 <HAL_TIM_PeriodElapsedCallback+0x99a>
						max_L_c=L_c_filtered_average;
 8001e3a:	4b72      	ldr	r3, [pc, #456]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a72      	ldr	r2, [pc, #456]	@ (8002008 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 8001e40:	6013      	str	r3, [r2, #0]
				if(L_c_filtered_average < min_L_c&& L_c_filtered_average>50)
 8001e42:	4b70      	ldr	r3, [pc, #448]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 8001e44:	ed93 7a00 	vldr	s14, [r3]
 8001e48:	4b70      	ldr	r3, [pc, #448]	@ (800200c <HAL_TIM_PeriodElapsedCallback+0xb64>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e56:	d50d      	bpl.n	8001e74 <HAL_TIM_PeriodElapsedCallback+0x9cc>
 8001e58:	4b6a      	ldr	r3, [pc, #424]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 8001e5a:	edd3 7a00 	vldr	s15, [r3]
 8001e5e:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8001ff4 <HAL_TIM_PeriodElapsedCallback+0xb4c>
 8001e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6a:	dd03      	ble.n	8001e74 <HAL_TIM_PeriodElapsedCallback+0x9cc>
						min_L_c=L_c_filtered_average;
 8001e6c:	4b65      	ldr	r3, [pc, #404]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a66      	ldr	r2, [pc, #408]	@ (800200c <HAL_TIM_PeriodElapsedCallback+0xb64>)
 8001e72:	6013      	str	r3, [r2, #0]
				}
				if(reset_minmax)
 8001e74:	4b66      	ldr	r3, [pc, #408]	@ (8002010 <HAL_TIM_PeriodElapsedCallback+0xb68>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d016      	beq.n	8001eaa <HAL_TIM_PeriodElapsedCallback+0xa02>
				{
					max_L_a=0;min_L_a=5000;max_L_b=0;min_L_b=0;max_L_c=0;min_L_c=0;
 8001e7c:	4b5b      	ldr	r3, [pc, #364]	@ (8001fec <HAL_TIM_PeriodElapsedCallback+0xb44>)
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	4b5a      	ldr	r3, [pc, #360]	@ (8001ff0 <HAL_TIM_PeriodElapsedCallback+0xb48>)
 8001e86:	4a63      	ldr	r2, [pc, #396]	@ (8002014 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ffc <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	4b5b      	ldr	r3, [pc, #364]	@ (8002000 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002008 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	4b5a      	ldr	r3, [pc, #360]	@ (800200c <HAL_TIM_PeriodElapsedCallback+0xb64>)
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
				}
				if(stop_timer <=30000)
 8001eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0xb3c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	dc04      	bgt.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0xa18>
				{
					stop_timer++;
 8001eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0xb3c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4a49      	ldr	r2, [pc, #292]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0xb3c>)
 8001ebe:	6013      	str	r3, [r2, #0]
				}
				if(stop_timer>29999)
 8001ec0:	4b48      	ldr	r3, [pc, #288]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0xb3c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	dd09      	ble.n	8001ee0 <HAL_TIM_PeriodElapsedCallback+0xa38>
					{
						//sicid_start=0;
						//sensorless_start=1-encoder;
					motor_start = encoder;
 8001ecc:	4b52      	ldr	r3, [pc, #328]	@ (8002018 <HAL_TIM_PeriodElapsedCallback+0xb70>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a52      	ldr	r2, [pc, #328]	@ (800201c <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8001ed2:	6013      	str	r3, [r2, #0]
					sicid_start=1-encoder;
 8001ed4:	4b50      	ldr	r3, [pc, #320]	@ (8002018 <HAL_TIM_PeriodElapsedCallback+0xb70>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f1c3 0301 	rsb	r3, r3, #1
 8001edc:	4a50      	ldr	r2, [pc, #320]	@ (8002020 <HAL_TIM_PeriodElapsedCallback+0xb78>)
 8001ede:	6013      	str	r3, [r2, #0]

			/*	if(stop_timer>64999)
				gain_L_start=1;  */


				current = uvw_val[0]- uvw_offset[0];
 8001ee0:	4b50      	ldr	r3, [pc, #320]	@ (8002024 <HAL_TIM_PeriodElapsedCallback+0xb7c>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b50      	ldr	r3, [pc, #320]	@ (8002028 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	4a4f      	ldr	r2, [pc, #316]	@ (800202c <HAL_TIM_PeriodElapsedCallback+0xb84>)
 8001eee:	6013      	str	r3, [r2, #0]
				if(current<=0) current=0;
 8001ef0:	4b4e      	ldr	r3, [pc, #312]	@ (800202c <HAL_TIM_PeriodElapsedCallback+0xb84>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	dc02      	bgt.n	8001efe <HAL_TIM_PeriodElapsedCallback+0xa56>
 8001ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800202c <HAL_TIM_PeriodElapsedCallback+0xb84>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
				current_error = current_ref - current;
 8001efe:	4b4c      	ldr	r3, [pc, #304]	@ (8002030 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b4a      	ldr	r3, [pc, #296]	@ (800202c <HAL_TIM_PeriodElapsedCallback+0xb84>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	4a4a      	ldr	r2, [pc, #296]	@ (8002034 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8001f0a:	6013      	str	r3, [r2, #0]
				current_error_sum += current_error/10;
 8001f0c:	4b49      	ldr	r3, [pc, #292]	@ (8002034 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a49      	ldr	r2, [pc, #292]	@ (8002038 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8001f12:	fb82 1203 	smull	r1, r2, r2, r3
 8001f16:	1092      	asrs	r2, r2, #2
 8001f18:	17db      	asrs	r3, r3, #31
 8001f1a:	1ad2      	subs	r2, r2, r3
 8001f1c:	4b47      	ldr	r3, [pc, #284]	@ (800203c <HAL_TIM_PeriodElapsedCallback+0xb94>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4413      	add	r3, r2
 8001f22:	4a46      	ldr	r2, [pc, #280]	@ (800203c <HAL_TIM_PeriodElapsedCallback+0xb94>)
 8001f24:	6013      	str	r3, [r2, #0]
				if(current_error_sum>20000) current_error_sum=20000;
 8001f26:	4b45      	ldr	r3, [pc, #276]	@ (800203c <HAL_TIM_PeriodElapsedCallback+0xb94>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	dd03      	ble.n	8001f3a <HAL_TIM_PeriodElapsedCallback+0xa92>
 8001f32:	4b42      	ldr	r3, [pc, #264]	@ (800203c <HAL_TIM_PeriodElapsedCallback+0xb94>)
 8001f34:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001f38:	601a      	str	r2, [r3, #0]
				if(current_error_sum<-20000) current_error_sum=-20000;
 8001f3a:	4b40      	ldr	r3, [pc, #256]	@ (800203c <HAL_TIM_PeriodElapsedCallback+0xb94>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a40      	ldr	r2, [pc, #256]	@ (8002040 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	da02      	bge.n	8001f4a <HAL_TIM_PeriodElapsedCallback+0xaa2>
 8001f44:	4b3d      	ldr	r3, [pc, #244]	@ (800203c <HAL_TIM_PeriodElapsedCallback+0xb94>)
 8001f46:	4a3e      	ldr	r2, [pc, #248]	@ (8002040 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8001f48:	601a      	str	r2, [r3, #0]
				Kp = Kp_par1 * current_error;
 8001f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002034 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f56:	4b3b      	ldr	r3, [pc, #236]	@ (8002044 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f60:	4b39      	ldr	r3, [pc, #228]	@ (8002048 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8001f62:	edc3 7a00 	vstr	s15, [r3]
				Ki = Ki_par1 * current_error_sum;
 8001f66:	4b35      	ldr	r3, [pc, #212]	@ (800203c <HAL_TIM_PeriodElapsedCallback+0xb94>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f72:	4b36      	ldr	r3, [pc, #216]	@ (800204c <HAL_TIM_PeriodElapsedCallback+0xba4>)
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7c:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 8001f7e:	edc3 7a00 	vstr	s15, [r3]
				duty_pre = (15 + Kp + Ki);
 8001f82:	4b31      	ldr	r3, [pc, #196]	@ (8002048 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001f8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f90:	4b2f      	ldr	r3, [pc, #188]	@ (8002050 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 8001f92:	edd3 7a00 	vldr	s15, [r3]
 8001f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f9e:	ee17 2a90 	vmov	r2, s15
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8002054 <HAL_TIM_PeriodElapsedCallback+0xbac>)
 8001fa4:	601a      	str	r2, [r3, #0]

				if (duty_pre >= 40) duty = 35;
 8001fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8002054 <HAL_TIM_PeriodElapsedCallback+0xbac>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b27      	cmp	r3, #39	@ 0x27
 8001fac:	dd03      	ble.n	8001fb6 <HAL_TIM_PeriodElapsedCallback+0xb0e>
 8001fae:	4b2a      	ldr	r3, [pc, #168]	@ (8002058 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 8001fb0:	2223      	movs	r2, #35	@ 0x23
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	e056      	b.n	8002064 <HAL_TIM_PeriodElapsedCallback+0xbbc>
				else if (duty_pre<=1) duty = 1;
 8001fb6:	4b27      	ldr	r3, [pc, #156]	@ (8002054 <HAL_TIM_PeriodElapsedCallback+0xbac>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	dc4e      	bgt.n	800205c <HAL_TIM_PeriodElapsedCallback+0xbb4>
 8001fbe:	4b26      	ldr	r3, [pc, #152]	@ (8002058 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e04e      	b.n	8002064 <HAL_TIM_PeriodElapsedCallback+0xbbc>
 8001fc6:	bf00      	nop
 8001fc8:	51eb851f 	.word	0x51eb851f
 8001fcc:	40091eb8 	.word	0x40091eb8
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	40468000 	.word	0x40468000
 8001fd8:	2400c200 	.word	0x2400c200
 8001fdc:	2400c1f8 	.word	0x2400c1f8
 8001fe0:	2401022c 	.word	0x2401022c
 8001fe4:	2400c1cc 	.word	0x2400c1cc
 8001fe8:	24010108 	.word	0x24010108
 8001fec:	2400c210 	.word	0x2400c210
 8001ff0:	24000030 	.word	0x24000030
 8001ff4:	42480000 	.word	0x42480000
 8001ff8:	24010174 	.word	0x24010174
 8001ffc:	2400c214 	.word	0x2400c214
 8002000:	24000034 	.word	0x24000034
 8002004:	240101e0 	.word	0x240101e0
 8002008:	2400c218 	.word	0x2400c218
 800200c:	24000038 	.word	0x24000038
 8002010:	24010230 	.word	0x24010230
 8002014:	459c4000 	.word	0x459c4000
 8002018:	2400003c 	.word	0x2400003c
 800201c:	2400046c 	.word	0x2400046c
 8002020:	2400c204 	.word	0x2400c204
 8002024:	2400c120 	.word	0x2400c120
 8002028:	2400c12c 	.word	0x2400c12c
 800202c:	2400c13c 	.word	0x2400c13c
 8002030:	24000028 	.word	0x24000028
 8002034:	2400c140 	.word	0x2400c140
 8002038:	66666667 	.word	0x66666667
 800203c:	2400c144 	.word	0x2400c144
 8002040:	ffffb1e0 	.word	0xffffb1e0
 8002044:	24000018 	.word	0x24000018
 8002048:	24000010 	.word	0x24000010
 800204c:	2400001c 	.word	0x2400001c
 8002050:	24000014 	.word	0x24000014
 8002054:	24000470 	.word	0x24000470
 8002058:	24000008 	.word	0x24000008
				else duty = duty_pre;
 800205c:	4b6c      	ldr	r3, [pc, #432]	@ (8002210 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a6c      	ldr	r2, [pc, #432]	@ (8002214 <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 8002062:	6013      	str	r3, [r2, #0]

				lut_angle = (int)angle_a;
 8002064:	4b6c      	ldr	r3, [pc, #432]	@ (8002218 <HAL_TIM_PeriodElapsedCallback+0xd70>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800206e:	ee17 2a90 	vmov	r2, s15
 8002072:	4b6a      	ldr	r3, [pc, #424]	@ (800221c <HAL_TIM_PeriodElapsedCallback+0xd74>)
 8002074:	601a      	str	r2, [r3, #0]
				converted_lut_angle = (uint16_t)lut_angle;
 8002076:	4b69      	ldr	r3, [pc, #420]	@ (800221c <HAL_TIM_PeriodElapsedCallback+0xd74>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b29a      	uxth	r2, r3
 800207c:	4b68      	ldr	r3, [pc, #416]	@ (8002220 <HAL_TIM_PeriodElapsedCallback+0xd78>)
 800207e:	801a      	strh	r2, [r3, #0]
										{
											previous_elapsed_time = elapsed_time; // ?  ?   값을 ???
											elapsed_time = new_elapsed_time;     // ?  로운  ???? ?  ?  ?  ?
										}
*/
						tim8_finish2=TIM6->CNT;
 8002080:	4b68      	ldr	r3, [pc, #416]	@ (8002224 <HAL_TIM_PeriodElapsedCallback+0xd7c>)
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	461a      	mov	r2, r3
 8002086:	4b68      	ldr	r3, [pc, #416]	@ (8002228 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 8002088:	601a      	str	r2, [r3, #0]
						tim8_count2=tim8_finish2-tim8_start2;
 800208a:	4b67      	ldr	r3, [pc, #412]	@ (8002228 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4b67      	ldr	r3, [pc, #412]	@ (800222c <HAL_TIM_PeriodElapsedCallback+0xd84>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	4a66      	ldr	r2, [pc, #408]	@ (8002230 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8002096:	6013      	str	r3, [r2, #0]
						 converted_L_a = (uint16_t)L_a;
 8002098:	4b66      	ldr	r3, [pc, #408]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0xd8c>)
 800209a:	edd3 7a00 	vldr	s15, [r3]
 800209e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020a2:	ee17 3a90 	vmov	r3, s15
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	4b63      	ldr	r3, [pc, #396]	@ (8002238 <HAL_TIM_PeriodElapsedCallback+0xd90>)
 80020aa:	801a      	strh	r2, [r3, #0]
						 converted_L_a_filtered_average = (uint16_t)L_a_filtered_average;
 80020ac:	4b63      	ldr	r3, [pc, #396]	@ (800223c <HAL_TIM_PeriodElapsedCallback+0xd94>)
 80020ae:	edd3 7a00 	vldr	s15, [r3]
 80020b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020b6:	ee17 3a90 	vmov	r3, s15
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	4b60      	ldr	r3, [pc, #384]	@ (8002240 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 80020be:	801a      	strh	r2, [r3, #0]
						 converted_L_b = (uint16_t)L_b;
 80020c0:	4b60      	ldr	r3, [pc, #384]	@ (8002244 <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ca:	ee17 3a90 	vmov	r3, s15
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	4b5d      	ldr	r3, [pc, #372]	@ (8002248 <HAL_TIM_PeriodElapsedCallback+0xda0>)
 80020d2:	801a      	strh	r2, [r3, #0]
						 converted_L_b_filtered_average = (uint16_t)L_b_filtered_average;
 80020d4:	4b5d      	ldr	r3, [pc, #372]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0xda4>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020de:	ee17 3a90 	vmov	r3, s15
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b5a      	ldr	r3, [pc, #360]	@ (8002250 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80020e6:	801a      	strh	r2, [r3, #0]
						 converted_L_c = (uint16_t)L_c;
 80020e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002254 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020f2:	ee17 3a90 	vmov	r3, s15
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	4b57      	ldr	r3, [pc, #348]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80020fa:	801a      	strh	r2, [r3, #0]
						 converted_L_c_filtered_average = (uint16_t)L_c_filtered_average;
 80020fc:	4b57      	ldr	r3, [pc, #348]	@ (800225c <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 80020fe:	edd3 7a00 	vldr	s15, [r3]
 8002102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002106:	ee17 3a90 	vmov	r3, s15
 800210a:	b29a      	uxth	r2, r3
 800210c:	4b54      	ldr	r3, [pc, #336]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 800210e:	801a      	strh	r2, [r3, #0]
						 converted_a_ready = a_ready*3000;
 8002110:	4b54      	ldr	r3, [pc, #336]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	4413      	add	r3, r2
 800211a:	461a      	mov	r2, r3
 800211c:	0091      	lsls	r1, r2, #2
 800211e:	461a      	mov	r2, r3
 8002120:	460b      	mov	r3, r1
 8002122:	4413      	add	r3, r2
 8002124:	461a      	mov	r2, r3
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	b29a      	uxth	r2, r3
 800212e:	4b4e      	ldr	r3, [pc, #312]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 8002130:	801a      	strh	r2, [r3, #0]
						 converted_b_ready = b_ready*3000;
 8002132:	4b4e      	ldr	r3, [pc, #312]	@ (800226c <HAL_TIM_PeriodElapsedCallback+0xdc4>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	0092      	lsls	r2, r2, #2
 800213a:	4413      	add	r3, r2
 800213c:	461a      	mov	r2, r3
 800213e:	0091      	lsls	r1, r2, #2
 8002140:	461a      	mov	r2, r3
 8002142:	460b      	mov	r3, r1
 8002144:	4413      	add	r3, r2
 8002146:	461a      	mov	r2, r3
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	b29a      	uxth	r2, r3
 8002150:	4b47      	ldr	r3, [pc, #284]	@ (8002270 <HAL_TIM_PeriodElapsedCallback+0xdc8>)
 8002152:	801a      	strh	r2, [r3, #0]
						 converted_c_ready = c_ready*3000;
 8002154:	4b47      	ldr	r3, [pc, #284]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0xdcc>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	0092      	lsls	r2, r2, #2
 800215c:	4413      	add	r3, r2
 800215e:	461a      	mov	r2, r3
 8002160:	0091      	lsls	r1, r2, #2
 8002162:	461a      	mov	r2, r3
 8002164:	460b      	mov	r3, r1
 8002166:	4413      	add	r3, r2
 8002168:	461a      	mov	r2, r3
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	b29a      	uxth	r2, r3
 8002172:	4b41      	ldr	r3, [pc, #260]	@ (8002278 <HAL_TIM_PeriodElapsedCallback+0xdd0>)
 8002174:	801a      	strh	r2, [r3, #0]

	}



	if(htim->Instance == htim1.Instance)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4b40      	ldr	r3, [pc, #256]	@ (800227c <HAL_TIM_PeriodElapsedCallback+0xdd4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	f040 8428 	bne.w	80029d4 <HAL_TIM_PeriodElapsedCallback+0x152c>
	{

		tim1_start3= TIM6->CNT;
 8002184:	4b27      	ldr	r3, [pc, #156]	@ (8002224 <HAL_TIM_PeriodElapsedCallback+0xd7c>)
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	461a      	mov	r2, r3
 800218a:	4b3d      	ldr	r3, [pc, #244]	@ (8002280 <HAL_TIM_PeriodElapsedCallback+0xdd8>)
 800218c:	601a      	str	r2, [r3, #0]
		current_value = uvw_val[0]/16;
 800218e:	4b3d      	ldr	r3, [pc, #244]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0xddc>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	b29a      	uxth	r2, r3
 8002196:	4b3c      	ldr	r3, [pc, #240]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0xde0>)
 8002198:	801a      	strh	r2, [r3, #0]



		if(motor_start){
 800219a:	4b3c      	ldr	r3, [pc, #240]	@ (800228c <HAL_TIM_PeriodElapsedCallback+0xde4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80dd 	beq.w	800235e <HAL_TIM_PeriodElapsedCallback+0xeb6>
			if(example1<current_offset[1]+count5) hfp_1 =duty1;
 80021a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0xde8>)
 80021a6:	885b      	ldrh	r3, [r3, #2]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002294 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	441a      	add	r2, r3
 80021b0:	4b39      	ldr	r3, [pc, #228]	@ (8002298 <HAL_TIM_PeriodElapsedCallback+0xdf0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	dd04      	ble.n	80021c2 <HAL_TIM_PeriodElapsedCallback+0xd1a>
 80021b8:	4b38      	ldr	r3, [pc, #224]	@ (800229c <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a38      	ldr	r2, [pc, #224]	@ (80022a0 <HAL_TIM_PeriodElapsedCallback+0xdf8>)
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	e002      	b.n	80021c8 <HAL_TIM_PeriodElapsedCallback+0xd20>
			else hfp_1 =0;
 80021c2:	4b37      	ldr	r3, [pc, #220]	@ (80022a0 <HAL_TIM_PeriodElapsedCallback+0xdf8>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
			if(adc_val[2]<current_offset[2]+count5) hfp_2 =duty1;
 80021c8:	4b36      	ldr	r3, [pc, #216]	@ (80022a4 <HAL_TIM_PeriodElapsedCallback+0xdfc>)
 80021ca:	889b      	ldrh	r3, [r3, #4]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b30      	ldr	r3, [pc, #192]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0xde8>)
 80021d0:	889b      	ldrh	r3, [r3, #4]
 80021d2:	4619      	mov	r1, r3
 80021d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002294 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	440b      	add	r3, r1
 80021da:	429a      	cmp	r2, r3
 80021dc:	da04      	bge.n	80021e8 <HAL_TIM_PeriodElapsedCallback+0xd40>
 80021de:	4b2f      	ldr	r3, [pc, #188]	@ (800229c <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a31      	ldr	r2, [pc, #196]	@ (80022a8 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e002      	b.n	80021ee <HAL_TIM_PeriodElapsedCallback+0xd46>
			else hfp_2 =0;
 80021e8:	4b2f      	ldr	r3, [pc, #188]	@ (80022a8 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
			if(adc_val[3]<current_offset[3]+count5) hfp_3 =duty1;
 80021ee:	4b2d      	ldr	r3, [pc, #180]	@ (80022a4 <HAL_TIM_PeriodElapsedCallback+0xdfc>)
 80021f0:	88db      	ldrh	r3, [r3, #6]
 80021f2:	461a      	mov	r2, r3
 80021f4:	4b26      	ldr	r3, [pc, #152]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0xde8>)
 80021f6:	88db      	ldrh	r3, [r3, #6]
 80021f8:	4619      	mov	r1, r3
 80021fa:	4b26      	ldr	r3, [pc, #152]	@ (8002294 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	440b      	add	r3, r1
 8002200:	429a      	cmp	r2, r3
 8002202:	da55      	bge.n	80022b0 <HAL_TIM_PeriodElapsedCallback+0xe08>
 8002204:	4b25      	ldr	r3, [pc, #148]	@ (800229c <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a28      	ldr	r2, [pc, #160]	@ (80022ac <HAL_TIM_PeriodElapsedCallback+0xe04>)
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	e053      	b.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0xe0e>
 800220e:	bf00      	nop
 8002210:	24000470 	.word	0x24000470
 8002214:	24000008 	.word	0x24000008
 8002218:	2400c1f8 	.word	0x2400c1f8
 800221c:	2400c1d0 	.word	0x2400c1d0
 8002220:	24010228 	.word	0x24010228
 8002224:	40001000 	.word	0x40001000
 8002228:	2400c184 	.word	0x2400c184
 800222c:	2400c180 	.word	0x2400c180
 8002230:	2400c178 	.word	0x2400c178
 8002234:	2400c148 	.word	0x2400c148
 8002238:	24010216 	.word	0x24010216
 800223c:	24010108 	.word	0x24010108
 8002240:	24010218 	.word	0x24010218
 8002244:	2400c14c 	.word	0x2400c14c
 8002248:	2401021a 	.word	0x2401021a
 800224c:	24010174 	.word	0x24010174
 8002250:	2401021c 	.word	0x2401021c
 8002254:	2400c150 	.word	0x2400c150
 8002258:	2401021e 	.word	0x2401021e
 800225c:	240101e0 	.word	0x240101e0
 8002260:	24010220 	.word	0x24010220
 8002264:	240100a0 	.word	0x240100a0
 8002268:	24010222 	.word	0x24010222
 800226c:	240100a2 	.word	0x240100a2
 8002270:	24010224 	.word	0x24010224
 8002274:	240100a4 	.word	0x240100a4
 8002278:	24010226 	.word	0x24010226
 800227c:	240002f0 	.word	0x240002f0
 8002280:	2400c188 	.word	0x2400c188
 8002284:	2400c120 	.word	0x2400c120
 8002288:	2401022a 	.word	0x2401022a
 800228c:	2400046c 	.word	0x2400046c
 8002290:	2400c124 	.word	0x2400c124
 8002294:	24000060 	.word	0x24000060
 8002298:	2400c19c 	.word	0x2400c19c
 800229c:	2400000c 	.word	0x2400000c
 80022a0:	2400c130 	.word	0x2400c130
 80022a4:	2400c118 	.word	0x2400c118
 80022a8:	2400c134 	.word	0x2400c134
 80022ac:	2400c138 	.word	0x2400c138
			else hfp_3 =0;
 80022b0:	4b8f      	ldr	r3, [pc, #572]	@ (80024f0 <HAL_TIM_PeriodElapsedCallback+0x1048>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]

					enc_c=TIM4->CNT%1024;
 80022b6:	4b8f      	ldr	r3, [pc, #572]	@ (80024f4 <HAL_TIM_PeriodElapsedCallback+0x104c>)
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022be:	4a8e      	ldr	r2, [pc, #568]	@ (80024f8 <HAL_TIM_PeriodElapsedCallback+0x1050>)
 80022c0:	6013      	str	r3, [r2, #0]
					tim4_cnt=TIM4->CNT;
 80022c2:	4b8c      	ldr	r3, [pc, #560]	@ (80024f4 <HAL_TIM_PeriodElapsedCallback+0x104c>)
 80022c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b8c      	ldr	r3, [pc, #560]	@ (80024fc <HAL_TIM_PeriodElapsedCallback+0x1054>)
 80022ca:	601a      	str	r2, [r3, #0]
					TIM8->CCR1 =p1_LUT[enc_c]*duty+hfp_1;
 80022cc:	4b8a      	ldr	r3, [pc, #552]	@ (80024f8 <HAL_TIM_PeriodElapsedCallback+0x1050>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a8b      	ldr	r2, [pc, #556]	@ (8002500 <HAL_TIM_PeriodElapsedCallback+0x1058>)
 80022d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d6:	4a8b      	ldr	r2, [pc, #556]	@ (8002504 <HAL_TIM_PeriodElapsedCallback+0x105c>)
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	fb03 f202 	mul.w	r2, r3, r2
 80022de:	4b8a      	ldr	r3, [pc, #552]	@ (8002508 <HAL_TIM_PeriodElapsedCallback+0x1060>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	441a      	add	r2, r3
 80022e4:	4b89      	ldr	r3, [pc, #548]	@ (800250c <HAL_TIM_PeriodElapsedCallback+0x1064>)
 80022e6:	635a      	str	r2, [r3, #52]	@ 0x34
					TIM8->CCR2 =p2_LUT[enc_c]*duty+hfp_2;
 80022e8:	4b83      	ldr	r3, [pc, #524]	@ (80024f8 <HAL_TIM_PeriodElapsedCallback+0x1050>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a88      	ldr	r2, [pc, #544]	@ (8002510 <HAL_TIM_PeriodElapsedCallback+0x1068>)
 80022ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f2:	4a84      	ldr	r2, [pc, #528]	@ (8002504 <HAL_TIM_PeriodElapsedCallback+0x105c>)
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	fb03 f202 	mul.w	r2, r3, r2
 80022fa:	4b86      	ldr	r3, [pc, #536]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x106c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	441a      	add	r2, r3
 8002300:	4b82      	ldr	r3, [pc, #520]	@ (800250c <HAL_TIM_PeriodElapsedCallback+0x1064>)
 8002302:	639a      	str	r2, [r3, #56]	@ 0x38
					TIM8->CCR3 =p3_LUT[enc_c]*duty+hfp_3;
 8002304:	4b7c      	ldr	r3, [pc, #496]	@ (80024f8 <HAL_TIM_PeriodElapsedCallback+0x1050>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a83      	ldr	r2, [pc, #524]	@ (8002518 <HAL_TIM_PeriodElapsedCallback+0x1070>)
 800230a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230e:	4a7d      	ldr	r2, [pc, #500]	@ (8002504 <HAL_TIM_PeriodElapsedCallback+0x105c>)
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	fb03 f202 	mul.w	r2, r3, r2
 8002316:	4b76      	ldr	r3, [pc, #472]	@ (80024f0 <HAL_TIM_PeriodElapsedCallback+0x1048>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	441a      	add	r2, r3
 800231c:	4b7b      	ldr	r3, [pc, #492]	@ (800250c <HAL_TIM_PeriodElapsedCallback+0x1064>)
 800231e:	63da      	str	r2, [r3, #60]	@ 0x3c
					tim8_ccr[0]=TIM8->CCR1;
 8002320:	4b7a      	ldr	r3, [pc, #488]	@ (800250c <HAL_TIM_PeriodElapsedCallback+0x1064>)
 8002322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002324:	461a      	mov	r2, r3
 8002326:	4b7d      	ldr	r3, [pc, #500]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x1074>)
 8002328:	601a      	str	r2, [r3, #0]
					tim8_ccr[1]=TIM8->CCR2;
 800232a:	4b78      	ldr	r3, [pc, #480]	@ (800250c <HAL_TIM_PeriodElapsedCallback+0x1064>)
 800232c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232e:	461a      	mov	r2, r3
 8002330:	4b7a      	ldr	r3, [pc, #488]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x1074>)
 8002332:	605a      	str	r2, [r3, #4]
					tim8_ccr[2]=TIM8->CCR3;
 8002334:	4b75      	ldr	r3, [pc, #468]	@ (800250c <HAL_TIM_PeriodElapsedCallback+0x1064>)
 8002336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002338:	461a      	mov	r2, r3
 800233a:	4b78      	ldr	r3, [pc, #480]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x1074>)
 800233c:	609a      	str	r2, [r3, #8]
					/*TIM8->CCR1=tim8_ccr[0];
					TIM8->CCR2=tim8_ccr[1];
					TIM8->CCR3=tim8_ccr[2];  */
					enc_c_count = (uint16_t)enc_c*1500/1024;
 800233e:	4b6e      	ldr	r3, [pc, #440]	@ (80024f8 <HAL_TIM_PeriodElapsedCallback+0x1050>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	da01      	bge.n	8002356 <HAL_TIM_PeriodElapsedCallback+0xeae>
 8002352:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002356:	129b      	asrs	r3, r3, #10
 8002358:	b29a      	uxth	r2, r3
 800235a:	4b71      	ldr	r3, [pc, #452]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x1078>)
 800235c:	801a      	strh	r2, [r3, #0]

				}


		  if (A_switch) {
 800235e:	4b71      	ldr	r3, [pc, #452]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x107c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d02a      	beq.n	80023bc <HAL_TIM_PeriodElapsedCallback+0xf14>
		        if ((L_b_filtered_average >= prev_L_b+sicid_val)) {
 8002366:	4b70      	ldr	r3, [pc, #448]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x1080>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002372:	4b6e      	ldr	r3, [pc, #440]	@ (800252c <HAL_TIM_PeriodElapsedCallback+0x1084>)
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800237c:	4b6c      	ldr	r3, [pc, #432]	@ (8002530 <HAL_TIM_PeriodElapsedCallback+0x1088>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238a:	d817      	bhi.n	80023bc <HAL_TIM_PeriodElapsedCallback+0xf14>
		            B_switch = 1;
 800238c:	4b69      	ldr	r3, [pc, #420]	@ (8002534 <HAL_TIM_PeriodElapsedCallback+0x108c>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]
		            A_switch = 0;
 8002392:	4b64      	ldr	r3, [pc, #400]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x107c>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
		            C_switch = 0;
 8002398:	4b67      	ldr	r3, [pc, #412]	@ (8002538 <HAL_TIM_PeriodElapsedCallback+0x1090>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]


		            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 800239e:	2200      	movs	r2, #0
 80023a0:	2120      	movs	r1, #32
 80023a2:	4866      	ldr	r0, [pc, #408]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x1094>)
 80023a4:	f005 fcc2 	bl	8007d2c <HAL_GPIO_WritePin>
		            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80023a8:	2201      	movs	r2, #1
 80023aa:	2140      	movs	r1, #64	@ 0x40
 80023ac:	4863      	ldr	r0, [pc, #396]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x1094>)
 80023ae:	f005 fcbd 	bl	8007d2c <HAL_GPIO_WritePin>
		            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2180      	movs	r1, #128	@ 0x80
 80023b6:	4861      	ldr	r0, [pc, #388]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x1094>)
 80023b8:	f005 fcb8 	bl	8007d2c <HAL_GPIO_WritePin>
		        }
		    }

		    // B_switch 상태에서 L_c의 연속 증가 조건 확인
		    if (B_switch) {
 80023bc:	4b5d      	ldr	r3, [pc, #372]	@ (8002534 <HAL_TIM_PeriodElapsedCallback+0x108c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d02a      	beq.n	800241a <HAL_TIM_PeriodElapsedCallback+0xf72>
		        if ((L_c_filtered_average>= prev_L_c+sicid_val)) {
 80023c4:	4b58      	ldr	r3, [pc, #352]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x1080>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	ee07 3a90 	vmov	s15, r3
 80023cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d0:	4b5b      	ldr	r3, [pc, #364]	@ (8002540 <HAL_TIM_PeriodElapsedCallback+0x1098>)
 80023d2:	edd3 7a00 	vldr	s15, [r3]
 80023d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023da:	4b5a      	ldr	r3, [pc, #360]	@ (8002544 <HAL_TIM_PeriodElapsedCallback+0x109c>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	d817      	bhi.n	800241a <HAL_TIM_PeriodElapsedCallback+0xf72>
		            B_switch = 0;
 80023ea:	4b52      	ldr	r3, [pc, #328]	@ (8002534 <HAL_TIM_PeriodElapsedCallback+0x108c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
		            A_switch = 0;
 80023f0:	4b4c      	ldr	r3, [pc, #304]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x107c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
		            C_switch = 1;
 80023f6:	4b50      	ldr	r3, [pc, #320]	@ (8002538 <HAL_TIM_PeriodElapsedCallback+0x1090>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	601a      	str	r2, [r3, #0]
		            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2120      	movs	r1, #32
 8002400:	484e      	ldr	r0, [pc, #312]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x1094>)
 8002402:	f005 fc93 	bl	8007d2c <HAL_GPIO_WritePin>
		            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	2140      	movs	r1, #64	@ 0x40
 800240a:	484c      	ldr	r0, [pc, #304]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x1094>)
 800240c:	f005 fc8e 	bl	8007d2c <HAL_GPIO_WritePin>
		            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8002410:	2201      	movs	r2, #1
 8002412:	2180      	movs	r1, #128	@ 0x80
 8002414:	4849      	ldr	r0, [pc, #292]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x1094>)
 8002416:	f005 fc89 	bl	8007d2c <HAL_GPIO_WritePin>
		        }
		    }

		    // C_switch 상태에서 L_a의 연속 증가 조건 확인
		    if (C_switch) {
 800241a:	4b47      	ldr	r3, [pc, #284]	@ (8002538 <HAL_TIM_PeriodElapsedCallback+0x1090>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d02a      	beq.n	8002478 <HAL_TIM_PeriodElapsedCallback+0xfd0>
		        if ((L_a_filtered_average>= prev_L_a+sicid_val)) {
 8002422:	4b41      	ldr	r3, [pc, #260]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x1080>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800242e:	4b46      	ldr	r3, [pc, #280]	@ (8002548 <HAL_TIM_PeriodElapsedCallback+0x10a0>)
 8002430:	edd3 7a00 	vldr	s15, [r3]
 8002434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002438:	4b44      	ldr	r3, [pc, #272]	@ (800254c <HAL_TIM_PeriodElapsedCallback+0x10a4>)
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002446:	d817      	bhi.n	8002478 <HAL_TIM_PeriodElapsedCallback+0xfd0>
		            B_switch = 0;
 8002448:	4b3a      	ldr	r3, [pc, #232]	@ (8002534 <HAL_TIM_PeriodElapsedCallback+0x108c>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
		            A_switch = 1;
 800244e:	4b35      	ldr	r3, [pc, #212]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x107c>)
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]
		            C_switch = 0;
 8002454:	4b38      	ldr	r3, [pc, #224]	@ (8002538 <HAL_TIM_PeriodElapsedCallback+0x1090>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
		            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 800245a:	2201      	movs	r2, #1
 800245c:	2120      	movs	r1, #32
 800245e:	4837      	ldr	r0, [pc, #220]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x1094>)
 8002460:	f005 fc64 	bl	8007d2c <HAL_GPIO_WritePin>
		            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8002464:	2200      	movs	r2, #0
 8002466:	2140      	movs	r1, #64	@ 0x40
 8002468:	4834      	ldr	r0, [pc, #208]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x1094>)
 800246a:	f005 fc5f 	bl	8007d2c <HAL_GPIO_WritePin>
		            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800246e:	2200      	movs	r2, #0
 8002470:	2180      	movs	r1, #128	@ 0x80
 8002472:	4832      	ldr	r0, [pc, #200]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x1094>)
 8002474:	f005 fc5a 	bl	8007d2c <HAL_GPIO_WritePin>
		        }
		    }

		if(sicid_start){ //?   ? sicid
 8002478:	4b35      	ldr	r3, [pc, #212]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0x10a8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 810a 	beq.w	8002696 <HAL_TIM_PeriodElapsedCallback+0x11ee>

					if(adc_val[1]<current_offset[1]+count5) hfp_1 =duty1;
 8002482:	4b34      	ldr	r3, [pc, #208]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0x10ac>)
 8002484:	885b      	ldrh	r3, [r3, #2]
 8002486:	461a      	mov	r2, r3
 8002488:	4b33      	ldr	r3, [pc, #204]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0x10b0>)
 800248a:	885b      	ldrh	r3, [r3, #2]
 800248c:	4619      	mov	r1, r3
 800248e:	4b33      	ldr	r3, [pc, #204]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x10b4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	440b      	add	r3, r1
 8002494:	429a      	cmp	r2, r3
 8002496:	da04      	bge.n	80024a2 <HAL_TIM_PeriodElapsedCallback+0xffa>
 8002498:	4b31      	ldr	r3, [pc, #196]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0x10b8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a1a      	ldr	r2, [pc, #104]	@ (8002508 <HAL_TIM_PeriodElapsedCallback+0x1060>)
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	e002      	b.n	80024a8 <HAL_TIM_PeriodElapsedCallback+0x1000>
					else hfp_1 =0;
 80024a2:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <HAL_TIM_PeriodElapsedCallback+0x1060>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
					if(adc_val[2]<current_offset[2]+count5) hfp_2 =duty1;
 80024a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0x10ac>)
 80024aa:	889b      	ldrh	r3, [r3, #4]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0x10b0>)
 80024b0:	889b      	ldrh	r3, [r3, #4]
 80024b2:	4619      	mov	r1, r3
 80024b4:	4b29      	ldr	r3, [pc, #164]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x10b4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	440b      	add	r3, r1
 80024ba:	429a      	cmp	r2, r3
 80024bc:	da04      	bge.n	80024c8 <HAL_TIM_PeriodElapsedCallback+0x1020>
 80024be:	4b28      	ldr	r3, [pc, #160]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0x10b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a14      	ldr	r2, [pc, #80]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x106c>)
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e002      	b.n	80024ce <HAL_TIM_PeriodElapsedCallback+0x1026>
					else hfp_2 =0;
 80024c8:	4b12      	ldr	r3, [pc, #72]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x106c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
					if(adc_val[3]<current_offset[3]+count5) hfp_3 =duty1;
 80024ce:	4b21      	ldr	r3, [pc, #132]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0x10ac>)
 80024d0:	88db      	ldrh	r3, [r3, #6]
 80024d2:	461a      	mov	r2, r3
 80024d4:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0x10b0>)
 80024d6:	88db      	ldrh	r3, [r3, #6]
 80024d8:	4619      	mov	r1, r3
 80024da:	4b20      	ldr	r3, [pc, #128]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x10b4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	440b      	add	r3, r1
 80024e0:	429a      	cmp	r2, r3
 80024e2:	da3f      	bge.n	8002564 <HAL_TIM_PeriodElapsedCallback+0x10bc>
 80024e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0x10b8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a01      	ldr	r2, [pc, #4]	@ (80024f0 <HAL_TIM_PeriodElapsedCallback+0x1048>)
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	e03d      	b.n	800256a <HAL_TIM_PeriodElapsedCallback+0x10c2>
 80024ee:	bf00      	nop
 80024f0:	2400c138 	.word	0x2400c138
 80024f4:	40000800 	.word	0x40000800
 80024f8:	2400c114 	.word	0x2400c114
 80024fc:	240101f8 	.word	0x240101f8
 8002500:	24000474 	.word	0x24000474
 8002504:	24000008 	.word	0x24000008
 8002508:	2400c130 	.word	0x2400c130
 800250c:	40010400 	.word	0x40010400
 8002510:	24001474 	.word	0x24001474
 8002514:	2400c134 	.word	0x2400c134
 8002518:	24002474 	.word	0x24002474
 800251c:	240101fc 	.word	0x240101fc
 8002520:	2400c1ec 	.word	0x2400c1ec
 8002524:	2400c208 	.word	0x2400c208
 8002528:	24000064 	.word	0x24000064
 800252c:	24010188 	.word	0x24010188
 8002530:	24010174 	.word	0x24010174
 8002534:	2400002c 	.word	0x2400002c
 8002538:	2400c20c 	.word	0x2400c20c
 800253c:	58020c00 	.word	0x58020c00
 8002540:	240101f4 	.word	0x240101f4
 8002544:	240101e0 	.word	0x240101e0
 8002548:	2401011c 	.word	0x2401011c
 800254c:	24010108 	.word	0x24010108
 8002550:	2400c204 	.word	0x2400c204
 8002554:	2400c118 	.word	0x2400c118
 8002558:	2400c124 	.word	0x2400c124
 800255c:	24000060 	.word	0x24000060
 8002560:	2400000c 	.word	0x2400000c
					else hfp_3 =0;
 8002564:	4b75      	ldr	r3, [pc, #468]	@ (800273c <HAL_TIM_PeriodElapsedCallback+0x1294>)
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]

					lut_angle = (int)angle_a;
 800256a:	4b75      	ldr	r3, [pc, #468]	@ (8002740 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002574:	ee17 2a90 	vmov	r2, s15
 8002578:	4b72      	ldr	r3, [pc, #456]	@ (8002744 <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800257a:	601a      	str	r2, [r3, #0]

					  if (A_switch) {
 800257c:	4b72      	ldr	r3, [pc, #456]	@ (8002748 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01f      	beq.n	80025c4 <HAL_TIM_PeriodElapsedCallback+0x111c>
						  if ((L_b_filtered_average >= prev_L_b+sicid_val)) {
 8002584:	4b71      	ldr	r3, [pc, #452]	@ (800274c <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002590:	4b6f      	ldr	r3, [pc, #444]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259a:	4b6e      	ldr	r3, [pc, #440]	@ (8002754 <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a8:	d80c      	bhi.n	80025c4 <HAL_TIM_PeriodElapsedCallback+0x111c>
					            B_switch = 1;
 80025aa:	4b6b      	ldr	r3, [pc, #428]	@ (8002758 <HAL_TIM_PeriodElapsedCallback+0x12b0>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
					            A_switch = 0;
 80025b0:	4b65      	ldr	r3, [pc, #404]	@ (8002748 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
					            C_switch = 0;
 80025b6:	4b69      	ldr	r3, [pc, #420]	@ (800275c <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
					            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5);
 80025bc:	2120      	movs	r1, #32
 80025be:	4868      	ldr	r0, [pc, #416]	@ (8002760 <HAL_TIM_PeriodElapsedCallback+0x12b8>)
 80025c0:	f005 fbcd 	bl	8007d5e <HAL_GPIO_TogglePin>
					        }
					    }

					    // B_switch 상태에서 L_c의 연속 증가 조건 확인
					    if (B_switch) {
 80025c4:	4b64      	ldr	r3, [pc, #400]	@ (8002758 <HAL_TIM_PeriodElapsedCallback+0x12b0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01f      	beq.n	800260c <HAL_TIM_PeriodElapsedCallback+0x1164>
					    	 if ((L_c_filtered_average>= prev_L_c+sicid_val)) {
 80025cc:	4b5f      	ldr	r3, [pc, #380]	@ (800274c <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	ee07 3a90 	vmov	s15, r3
 80025d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025d8:	4b62      	ldr	r3, [pc, #392]	@ (8002764 <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025e2:	4b61      	ldr	r3, [pc, #388]	@ (8002768 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 80025e4:	edd3 7a00 	vldr	s15, [r3]
 80025e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f0:	d80c      	bhi.n	800260c <HAL_TIM_PeriodElapsedCallback+0x1164>
					            B_switch = 0;
 80025f2:	4b59      	ldr	r3, [pc, #356]	@ (8002758 <HAL_TIM_PeriodElapsedCallback+0x12b0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
					            A_switch = 0;
 80025f8:	4b53      	ldr	r3, [pc, #332]	@ (8002748 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
					            C_switch = 1;
 80025fe:	4b57      	ldr	r3, [pc, #348]	@ (800275c <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 8002600:	2201      	movs	r2, #1
 8002602:	601a      	str	r2, [r3, #0]
					            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6);
 8002604:	2140      	movs	r1, #64	@ 0x40
 8002606:	4856      	ldr	r0, [pc, #344]	@ (8002760 <HAL_TIM_PeriodElapsedCallback+0x12b8>)
 8002608:	f005 fba9 	bl	8007d5e <HAL_GPIO_TogglePin>
					        }
					    }

					    // C_switch 상태에서 L_a의 연속 증가 조건 확인
					    if (C_switch) {
 800260c:	4b53      	ldr	r3, [pc, #332]	@ (800275c <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01f      	beq.n	8002654 <HAL_TIM_PeriodElapsedCallback+0x11ac>
					    	if ((L_a_filtered_average>= prev_L_a+sicid_val)) {
 8002614:	4b4d      	ldr	r3, [pc, #308]	@ (800274c <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	ee07 3a90 	vmov	s15, r3
 800261c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002620:	4b52      	ldr	r3, [pc, #328]	@ (800276c <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	ee37 7a27 	vadd.f32	s14, s14, s15
 800262a:	4b51      	ldr	r3, [pc, #324]	@ (8002770 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800262c:	edd3 7a00 	vldr	s15, [r3]
 8002630:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002638:	d80c      	bhi.n	8002654 <HAL_TIM_PeriodElapsedCallback+0x11ac>
					            B_switch = 0;
 800263a:	4b47      	ldr	r3, [pc, #284]	@ (8002758 <HAL_TIM_PeriodElapsedCallback+0x12b0>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
					            A_switch = 1;
 8002640:	4b41      	ldr	r3, [pc, #260]	@ (8002748 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]
					            C_switch = 0;
 8002646:	4b45      	ldr	r3, [pc, #276]	@ (800275c <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
					            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_7);
 800264c:	2180      	movs	r1, #128	@ 0x80
 800264e:	4844      	ldr	r0, [pc, #272]	@ (8002760 <HAL_TIM_PeriodElapsedCallback+0x12b8>)
 8002650:	f005 fb85 	bl	8007d5e <HAL_GPIO_TogglePin>
					        }
					    }

					TIM8->CCR1 =A_switch*duty+hfp_1;
 8002654:	4b3c      	ldr	r3, [pc, #240]	@ (8002748 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a46      	ldr	r2, [pc, #280]	@ (8002774 <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	fb03 f202 	mul.w	r2, r3, r2
 8002660:	4b45      	ldr	r3, [pc, #276]	@ (8002778 <HAL_TIM_PeriodElapsedCallback+0x12d0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	441a      	add	r2, r3
 8002666:	4b45      	ldr	r3, [pc, #276]	@ (800277c <HAL_TIM_PeriodElapsedCallback+0x12d4>)
 8002668:	635a      	str	r2, [r3, #52]	@ 0x34
					TIM8->CCR2 =B_switch*duty+hfp_2;
 800266a:	4b3b      	ldr	r3, [pc, #236]	@ (8002758 <HAL_TIM_PeriodElapsedCallback+0x12b0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a41      	ldr	r2, [pc, #260]	@ (8002774 <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	fb03 f202 	mul.w	r2, r3, r2
 8002676:	4b42      	ldr	r3, [pc, #264]	@ (8002780 <HAL_TIM_PeriodElapsedCallback+0x12d8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	441a      	add	r2, r3
 800267c:	4b3f      	ldr	r3, [pc, #252]	@ (800277c <HAL_TIM_PeriodElapsedCallback+0x12d4>)
 800267e:	639a      	str	r2, [r3, #56]	@ 0x38
					TIM8->CCR3 =C_switch*duty+hfp_3;
 8002680:	4b36      	ldr	r3, [pc, #216]	@ (800275c <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a3b      	ldr	r2, [pc, #236]	@ (8002774 <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	fb03 f202 	mul.w	r2, r3, r2
 800268c:	4b2b      	ldr	r3, [pc, #172]	@ (800273c <HAL_TIM_PeriodElapsedCallback+0x1294>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	441a      	add	r2, r3
 8002692:	4b3a      	ldr	r3, [pc, #232]	@ (800277c <HAL_TIM_PeriodElapsedCallback+0x12d4>)
 8002694:	63da      	str	r2, [r3, #60]	@ 0x3c

		//example1=60*(example1/100) + 40*(adc_val[1]/100);
		//example3=60*(example3/100) + 40*(adc_val[2]/100);
		//example5=60*(example5/100) + 40*(adc_val[3]/100);

		example1 = adc_val[1];
 8002696:	4b3b      	ldr	r3, [pc, #236]	@ (8002784 <HAL_TIM_PeriodElapsedCallback+0x12dc>)
 8002698:	885b      	ldrh	r3, [r3, #2]
 800269a:	461a      	mov	r2, r3
 800269c:	4b3a      	ldr	r3, [pc, #232]	@ (8002788 <HAL_TIM_PeriodElapsedCallback+0x12e0>)
 800269e:	601a      	str	r2, [r3, #0]
		example3 = adc_val[2];
 80026a0:	4b38      	ldr	r3, [pc, #224]	@ (8002784 <HAL_TIM_PeriodElapsedCallback+0x12dc>)
 80026a2:	889b      	ldrh	r3, [r3, #4]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b39      	ldr	r3, [pc, #228]	@ (800278c <HAL_TIM_PeriodElapsedCallback+0x12e4>)
 80026a8:	601a      	str	r2, [r3, #0]
		example5 = adc_val[3];
 80026aa:	4b36      	ldr	r3, [pc, #216]	@ (8002784 <HAL_TIM_PeriodElapsedCallback+0x12dc>)
 80026ac:	88db      	ldrh	r3, [r3, #6]
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b37      	ldr	r3, [pc, #220]	@ (8002790 <HAL_TIM_PeriodElapsedCallback+0x12e8>)
 80026b2:	601a      	str	r2, [r3, #0]

		chai_a=example1-example2;
 80026b4:	4b34      	ldr	r3, [pc, #208]	@ (8002788 <HAL_TIM_PeriodElapsedCallback+0x12e0>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b36      	ldr	r3, [pc, #216]	@ (8002794 <HAL_TIM_PeriodElapsedCallback+0x12ec>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	4a36      	ldr	r2, [pc, #216]	@ (8002798 <HAL_TIM_PeriodElapsedCallback+0x12f0>)
 80026c0:	6013      	str	r3, [r2, #0]
		chai_b=example3-example4;
 80026c2:	4b32      	ldr	r3, [pc, #200]	@ (800278c <HAL_TIM_PeriodElapsedCallback+0x12e4>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4b35      	ldr	r3, [pc, #212]	@ (800279c <HAL_TIM_PeriodElapsedCallback+0x12f4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	4a34      	ldr	r2, [pc, #208]	@ (80027a0 <HAL_TIM_PeriodElapsedCallback+0x12f8>)
 80026ce:	6013      	str	r3, [r2, #0]
		chai_c=example5-example6;
 80026d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002790 <HAL_TIM_PeriodElapsedCallback+0x12e8>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b33      	ldr	r3, [pc, #204]	@ (80027a4 <HAL_TIM_PeriodElapsedCallback+0x12fc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	4a33      	ldr	r2, [pc, #204]	@ (80027a8 <HAL_TIM_PeriodElapsedCallback+0x1300>)
 80026dc:	6013      	str	r3, [r2, #0]
									current_num_a2++;
									temp_chai_a2+=chai_a;
								}

		}  */
		if(adc_val[1]>countttt)
 80026de:	4b29      	ldr	r3, [pc, #164]	@ (8002784 <HAL_TIM_PeriodElapsedCallback+0x12dc>)
 80026e0:	885b      	ldrh	r3, [r3, #2]
 80026e2:	461a      	mov	r2, r3
 80026e4:	4b31      	ldr	r3, [pc, #196]	@ (80027ac <HAL_TIM_PeriodElapsedCallback+0x1304>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	dd6b      	ble.n	80027c4 <HAL_TIM_PeriodElapsedCallback+0x131c>
			{
			if(chai_a>counttt)
 80026ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002798 <HAL_TIM_PeriodElapsedCallback+0x12f0>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b2f      	ldr	r3, [pc, #188]	@ (80027b0 <HAL_TIM_PeriodElapsedCallback+0x1308>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dd0b      	ble.n	8002710 <HAL_TIM_PeriodElapsedCallback+0x1268>
							{
								current_num_a1++;
 80026f8:	4b2e      	ldr	r3, [pc, #184]	@ (80027b4 <HAL_TIM_PeriodElapsedCallback+0x130c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	4a2d      	ldr	r2, [pc, #180]	@ (80027b4 <HAL_TIM_PeriodElapsedCallback+0x130c>)
 8002700:	6013      	str	r3, [r2, #0]
								temp_chai_a1+=chai_a;
 8002702:	4b2d      	ldr	r3, [pc, #180]	@ (80027b8 <HAL_TIM_PeriodElapsedCallback+0x1310>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4b24      	ldr	r3, [pc, #144]	@ (8002798 <HAL_TIM_PeriodElapsedCallback+0x12f0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4413      	add	r3, r2
 800270c:	4a2a      	ldr	r2, [pc, #168]	@ (80027b8 <HAL_TIM_PeriodElapsedCallback+0x1310>)
 800270e:	6013      	str	r3, [r2, #0]
							}
			if(chai_a<-counttt)
 8002710:	4b27      	ldr	r3, [pc, #156]	@ (80027b0 <HAL_TIM_PeriodElapsedCallback+0x1308>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	425a      	negs	r2, r3
 8002716:	4b20      	ldr	r3, [pc, #128]	@ (8002798 <HAL_TIM_PeriodElapsedCallback+0x12f0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	f340 8084 	ble.w	8002828 <HAL_TIM_PeriodElapsedCallback+0x1380>
							{
								current_num_a2++;
 8002720:	4b26      	ldr	r3, [pc, #152]	@ (80027bc <HAL_TIM_PeriodElapsedCallback+0x1314>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	4a25      	ldr	r2, [pc, #148]	@ (80027bc <HAL_TIM_PeriodElapsedCallback+0x1314>)
 8002728:	6013      	str	r3, [r2, #0]
								temp_chai_a2+=chai_a;
 800272a:	4b25      	ldr	r3, [pc, #148]	@ (80027c0 <HAL_TIM_PeriodElapsedCallback+0x1318>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4b1a      	ldr	r3, [pc, #104]	@ (8002798 <HAL_TIM_PeriodElapsedCallback+0x12f0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4413      	add	r3, r2
 8002734:	4a22      	ldr	r2, [pc, #136]	@ (80027c0 <HAL_TIM_PeriodElapsedCallback+0x1318>)
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	e076      	b.n	8002828 <HAL_TIM_PeriodElapsedCallback+0x1380>
 800273a:	bf00      	nop
 800273c:	2400c138 	.word	0x2400c138
 8002740:	2400c1f8 	.word	0x2400c1f8
 8002744:	2400c1d0 	.word	0x2400c1d0
 8002748:	2400c208 	.word	0x2400c208
 800274c:	24000064 	.word	0x24000064
 8002750:	24010188 	.word	0x24010188
 8002754:	24010174 	.word	0x24010174
 8002758:	2400002c 	.word	0x2400002c
 800275c:	2400c20c 	.word	0x2400c20c
 8002760:	58020c00 	.word	0x58020c00
 8002764:	240101f4 	.word	0x240101f4
 8002768:	240101e0 	.word	0x240101e0
 800276c:	2401011c 	.word	0x2401011c
 8002770:	24010108 	.word	0x24010108
 8002774:	24000008 	.word	0x24000008
 8002778:	2400c130 	.word	0x2400c130
 800277c:	40010400 	.word	0x40010400
 8002780:	2400c134 	.word	0x2400c134
 8002784:	2400c118 	.word	0x2400c118
 8002788:	2400c19c 	.word	0x2400c19c
 800278c:	2400c1a4 	.word	0x2400c1a4
 8002790:	2400c1ac 	.word	0x2400c1ac
 8002794:	2400c1a0 	.word	0x2400c1a0
 8002798:	2400c190 	.word	0x2400c190
 800279c:	2400c1a8 	.word	0x2400c1a8
 80027a0:	2400c194 	.word	0x2400c194
 80027a4:	2400c1b0 	.word	0x2400c1b0
 80027a8:	2400c198 	.word	0x2400c198
 80027ac:	2400005c 	.word	0x2400005c
 80027b0:	24000054 	.word	0x24000054
 80027b4:	24010110 	.word	0x24010110
 80027b8:	2401010c 	.word	0x2401010c
 80027bc:	24010118 	.word	0x24010118
 80027c0:	24010114 	.word	0x24010114
							}
			}
		else
		{
			if(chai_a>counttt&&chai_a<countt)
 80027c4:	4b85      	ldr	r3, [pc, #532]	@ (80029dc <HAL_TIM_PeriodElapsedCallback+0x1534>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b85      	ldr	r3, [pc, #532]	@ (80029e0 <HAL_TIM_PeriodElapsedCallback+0x1538>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	dd11      	ble.n	80027f4 <HAL_TIM_PeriodElapsedCallback+0x134c>
 80027d0:	4b82      	ldr	r3, [pc, #520]	@ (80029dc <HAL_TIM_PeriodElapsedCallback+0x1534>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b83      	ldr	r3, [pc, #524]	@ (80029e4 <HAL_TIM_PeriodElapsedCallback+0x153c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	da0b      	bge.n	80027f4 <HAL_TIM_PeriodElapsedCallback+0x134c>
							{
								current_num_a1++;
 80027dc:	4b82      	ldr	r3, [pc, #520]	@ (80029e8 <HAL_TIM_PeriodElapsedCallback+0x1540>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3301      	adds	r3, #1
 80027e2:	4a81      	ldr	r2, [pc, #516]	@ (80029e8 <HAL_TIM_PeriodElapsedCallback+0x1540>)
 80027e4:	6013      	str	r3, [r2, #0]
								temp_chai_a1+=chai_a;
 80027e6:	4b81      	ldr	r3, [pc, #516]	@ (80029ec <HAL_TIM_PeriodElapsedCallback+0x1544>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4b7c      	ldr	r3, [pc, #496]	@ (80029dc <HAL_TIM_PeriodElapsedCallback+0x1534>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4413      	add	r3, r2
 80027f0:	4a7e      	ldr	r2, [pc, #504]	@ (80029ec <HAL_TIM_PeriodElapsedCallback+0x1544>)
 80027f2:	6013      	str	r3, [r2, #0]
							}
			if(chai_a<-counttt&&chai_a>-countt)
 80027f4:	4b7a      	ldr	r3, [pc, #488]	@ (80029e0 <HAL_TIM_PeriodElapsedCallback+0x1538>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	425a      	negs	r2, r3
 80027fa:	4b78      	ldr	r3, [pc, #480]	@ (80029dc <HAL_TIM_PeriodElapsedCallback+0x1534>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	dd12      	ble.n	8002828 <HAL_TIM_PeriodElapsedCallback+0x1380>
 8002802:	4b78      	ldr	r3, [pc, #480]	@ (80029e4 <HAL_TIM_PeriodElapsedCallback+0x153c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	425a      	negs	r2, r3
 8002808:	4b74      	ldr	r3, [pc, #464]	@ (80029dc <HAL_TIM_PeriodElapsedCallback+0x1534>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	da0b      	bge.n	8002828 <HAL_TIM_PeriodElapsedCallback+0x1380>
							{
								current_num_a2++;
 8002810:	4b77      	ldr	r3, [pc, #476]	@ (80029f0 <HAL_TIM_PeriodElapsedCallback+0x1548>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3301      	adds	r3, #1
 8002816:	4a76      	ldr	r2, [pc, #472]	@ (80029f0 <HAL_TIM_PeriodElapsedCallback+0x1548>)
 8002818:	6013      	str	r3, [r2, #0]
								temp_chai_a2+=chai_a;
 800281a:	4b76      	ldr	r3, [pc, #472]	@ (80029f4 <HAL_TIM_PeriodElapsedCallback+0x154c>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4b6f      	ldr	r3, [pc, #444]	@ (80029dc <HAL_TIM_PeriodElapsedCallback+0x1534>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4413      	add	r3, r2
 8002824:	4a73      	ldr	r2, [pc, #460]	@ (80029f4 <HAL_TIM_PeriodElapsedCallback+0x154c>)
 8002826:	6013      	str	r3, [r2, #0]
							}
			}

		if(adc_val[2]>countttt){
 8002828:	4b73      	ldr	r3, [pc, #460]	@ (80029f8 <HAL_TIM_PeriodElapsedCallback+0x1550>)
 800282a:	889b      	ldrh	r3, [r3, #4]
 800282c:	461a      	mov	r2, r3
 800282e:	4b73      	ldr	r3, [pc, #460]	@ (80029fc <HAL_TIM_PeriodElapsedCallback+0x1554>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	dd25      	ble.n	8002882 <HAL_TIM_PeriodElapsedCallback+0x13da>
				if(chai_b>counttt)
 8002836:	4b72      	ldr	r3, [pc, #456]	@ (8002a00 <HAL_TIM_PeriodElapsedCallback+0x1558>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b69      	ldr	r3, [pc, #420]	@ (80029e0 <HAL_TIM_PeriodElapsedCallback+0x1538>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	dd0b      	ble.n	800285a <HAL_TIM_PeriodElapsedCallback+0x13b2>
								{
									current_num_b1++;
 8002842:	4b70      	ldr	r3, [pc, #448]	@ (8002a04 <HAL_TIM_PeriodElapsedCallback+0x155c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3301      	adds	r3, #1
 8002848:	4a6e      	ldr	r2, [pc, #440]	@ (8002a04 <HAL_TIM_PeriodElapsedCallback+0x155c>)
 800284a:	6013      	str	r3, [r2, #0]
									temp_chai_b1+=chai_b;
 800284c:	4b6e      	ldr	r3, [pc, #440]	@ (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1560>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b6b      	ldr	r3, [pc, #428]	@ (8002a00 <HAL_TIM_PeriodElapsedCallback+0x1558>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4413      	add	r3, r2
 8002856:	4a6c      	ldr	r2, [pc, #432]	@ (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1560>)
 8002858:	6013      	str	r3, [r2, #0]
								}
				if(chai_b<-counttt)
 800285a:	4b61      	ldr	r3, [pc, #388]	@ (80029e0 <HAL_TIM_PeriodElapsedCallback+0x1538>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	425a      	negs	r2, r3
 8002860:	4b67      	ldr	r3, [pc, #412]	@ (8002a00 <HAL_TIM_PeriodElapsedCallback+0x1558>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	dd3e      	ble.n	80028e6 <HAL_TIM_PeriodElapsedCallback+0x143e>
								{
									current_num_b2++;
 8002868:	4b68      	ldr	r3, [pc, #416]	@ (8002a0c <HAL_TIM_PeriodElapsedCallback+0x1564>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	3301      	adds	r3, #1
 800286e:	4a67      	ldr	r2, [pc, #412]	@ (8002a0c <HAL_TIM_PeriodElapsedCallback+0x1564>)
 8002870:	6013      	str	r3, [r2, #0]
									temp_chai_b2+=chai_b;
 8002872:	4b67      	ldr	r3, [pc, #412]	@ (8002a10 <HAL_TIM_PeriodElapsedCallback+0x1568>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4b62      	ldr	r3, [pc, #392]	@ (8002a00 <HAL_TIM_PeriodElapsedCallback+0x1558>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4413      	add	r3, r2
 800287c:	4a64      	ldr	r2, [pc, #400]	@ (8002a10 <HAL_TIM_PeriodElapsedCallback+0x1568>)
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	e031      	b.n	80028e6 <HAL_TIM_PeriodElapsedCallback+0x143e>
								}

		}
		else{
			if(chai_b>counttt&&chai_b<countt)
 8002882:	4b5f      	ldr	r3, [pc, #380]	@ (8002a00 <HAL_TIM_PeriodElapsedCallback+0x1558>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b56      	ldr	r3, [pc, #344]	@ (80029e0 <HAL_TIM_PeriodElapsedCallback+0x1538>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	dd11      	ble.n	80028b2 <HAL_TIM_PeriodElapsedCallback+0x140a>
 800288e:	4b5c      	ldr	r3, [pc, #368]	@ (8002a00 <HAL_TIM_PeriodElapsedCallback+0x1558>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4b54      	ldr	r3, [pc, #336]	@ (80029e4 <HAL_TIM_PeriodElapsedCallback+0x153c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	da0b      	bge.n	80028b2 <HAL_TIM_PeriodElapsedCallback+0x140a>
							{
								current_num_b1++;
 800289a:	4b5a      	ldr	r3, [pc, #360]	@ (8002a04 <HAL_TIM_PeriodElapsedCallback+0x155c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	3301      	adds	r3, #1
 80028a0:	4a58      	ldr	r2, [pc, #352]	@ (8002a04 <HAL_TIM_PeriodElapsedCallback+0x155c>)
 80028a2:	6013      	str	r3, [r2, #0]
								temp_chai_b1+=chai_b;
 80028a4:	4b58      	ldr	r3, [pc, #352]	@ (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1560>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b55      	ldr	r3, [pc, #340]	@ (8002a00 <HAL_TIM_PeriodElapsedCallback+0x1558>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4413      	add	r3, r2
 80028ae:	4a56      	ldr	r2, [pc, #344]	@ (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1560>)
 80028b0:	6013      	str	r3, [r2, #0]
							}
			if(chai_b<-counttt&&chai_b>-countt)
 80028b2:	4b4b      	ldr	r3, [pc, #300]	@ (80029e0 <HAL_TIM_PeriodElapsedCallback+0x1538>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	425a      	negs	r2, r3
 80028b8:	4b51      	ldr	r3, [pc, #324]	@ (8002a00 <HAL_TIM_PeriodElapsedCallback+0x1558>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	dd12      	ble.n	80028e6 <HAL_TIM_PeriodElapsedCallback+0x143e>
 80028c0:	4b48      	ldr	r3, [pc, #288]	@ (80029e4 <HAL_TIM_PeriodElapsedCallback+0x153c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	425a      	negs	r2, r3
 80028c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002a00 <HAL_TIM_PeriodElapsedCallback+0x1558>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	da0b      	bge.n	80028e6 <HAL_TIM_PeriodElapsedCallback+0x143e>
							{
								current_num_b2++;
 80028ce:	4b4f      	ldr	r3, [pc, #316]	@ (8002a0c <HAL_TIM_PeriodElapsedCallback+0x1564>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3301      	adds	r3, #1
 80028d4:	4a4d      	ldr	r2, [pc, #308]	@ (8002a0c <HAL_TIM_PeriodElapsedCallback+0x1564>)
 80028d6:	6013      	str	r3, [r2, #0]
								temp_chai_b2+=chai_b;
 80028d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002a10 <HAL_TIM_PeriodElapsedCallback+0x1568>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b48      	ldr	r3, [pc, #288]	@ (8002a00 <HAL_TIM_PeriodElapsedCallback+0x1558>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	4a4b      	ldr	r2, [pc, #300]	@ (8002a10 <HAL_TIM_PeriodElapsedCallback+0x1568>)
 80028e4:	6013      	str	r3, [r2, #0]
							}

					}
	if(adc_val[3]>countttt){
 80028e6:	4b44      	ldr	r3, [pc, #272]	@ (80029f8 <HAL_TIM_PeriodElapsedCallback+0x1550>)
 80028e8:	88db      	ldrh	r3, [r3, #6]
 80028ea:	461a      	mov	r2, r3
 80028ec:	4b43      	ldr	r3, [pc, #268]	@ (80029fc <HAL_TIM_PeriodElapsedCallback+0x1554>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	dd25      	ble.n	8002940 <HAL_TIM_PeriodElapsedCallback+0x1498>
			if(chai_c>counttt)
 80028f4:	4b47      	ldr	r3, [pc, #284]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x156c>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b39      	ldr	r3, [pc, #228]	@ (80029e0 <HAL_TIM_PeriodElapsedCallback+0x1538>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	dd0b      	ble.n	8002918 <HAL_TIM_PeriodElapsedCallback+0x1470>
							{
								current_num_c1++;
 8002900:	4b45      	ldr	r3, [pc, #276]	@ (8002a18 <HAL_TIM_PeriodElapsedCallback+0x1570>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	4a44      	ldr	r2, [pc, #272]	@ (8002a18 <HAL_TIM_PeriodElapsedCallback+0x1570>)
 8002908:	6013      	str	r3, [r2, #0]
								temp_chai_c1+=chai_c;
 800290a:	4b44      	ldr	r3, [pc, #272]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x1574>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b41      	ldr	r3, [pc, #260]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x156c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4413      	add	r3, r2
 8002914:	4a41      	ldr	r2, [pc, #260]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x1574>)
 8002916:	6013      	str	r3, [r2, #0]
							}
			if(chai_c<-counttt)
 8002918:	4b31      	ldr	r3, [pc, #196]	@ (80029e0 <HAL_TIM_PeriodElapsedCallback+0x1538>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	425a      	negs	r2, r3
 800291e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x156c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	dd3e      	ble.n	80029a4 <HAL_TIM_PeriodElapsedCallback+0x14fc>
							{
								current_num_c2++;
 8002926:	4b3e      	ldr	r3, [pc, #248]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x1578>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3301      	adds	r3, #1
 800292c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x1578>)
 800292e:	6013      	str	r3, [r2, #0]
								temp_chai_c2+=chai_c;
 8002930:	4b3c      	ldr	r3, [pc, #240]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x157c>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b37      	ldr	r3, [pc, #220]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x156c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4413      	add	r3, r2
 800293a:	4a3a      	ldr	r2, [pc, #232]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x157c>)
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e031      	b.n	80029a4 <HAL_TIM_PeriodElapsedCallback+0x14fc>
							}
		}
	else{
		if(chai_c>counttt&&chai_c<countt)
 8002940:	4b34      	ldr	r3, [pc, #208]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x156c>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b26      	ldr	r3, [pc, #152]	@ (80029e0 <HAL_TIM_PeriodElapsedCallback+0x1538>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	dd11      	ble.n	8002970 <HAL_TIM_PeriodElapsedCallback+0x14c8>
 800294c:	4b31      	ldr	r3, [pc, #196]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x156c>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b24      	ldr	r3, [pc, #144]	@ (80029e4 <HAL_TIM_PeriodElapsedCallback+0x153c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	da0b      	bge.n	8002970 <HAL_TIM_PeriodElapsedCallback+0x14c8>
						{
							current_num_c1++;
 8002958:	4b2f      	ldr	r3, [pc, #188]	@ (8002a18 <HAL_TIM_PeriodElapsedCallback+0x1570>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	3301      	adds	r3, #1
 800295e:	4a2e      	ldr	r2, [pc, #184]	@ (8002a18 <HAL_TIM_PeriodElapsedCallback+0x1570>)
 8002960:	6013      	str	r3, [r2, #0]
							temp_chai_c1+=chai_c;
 8002962:	4b2e      	ldr	r3, [pc, #184]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x1574>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4b2b      	ldr	r3, [pc, #172]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x156c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4413      	add	r3, r2
 800296c:	4a2b      	ldr	r2, [pc, #172]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x1574>)
 800296e:	6013      	str	r3, [r2, #0]
						}
		if(chai_c<-counttt&&chai_c>-countt)
 8002970:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <HAL_TIM_PeriodElapsedCallback+0x1538>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	425a      	negs	r2, r3
 8002976:	4b27      	ldr	r3, [pc, #156]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x156c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	dd12      	ble.n	80029a4 <HAL_TIM_PeriodElapsedCallback+0x14fc>
 800297e:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <HAL_TIM_PeriodElapsedCallback+0x153c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	425a      	negs	r2, r3
 8002984:	4b23      	ldr	r3, [pc, #140]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x156c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	da0b      	bge.n	80029a4 <HAL_TIM_PeriodElapsedCallback+0x14fc>
						{
							current_num_c2++;
 800298c:	4b24      	ldr	r3, [pc, #144]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x1578>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3301      	adds	r3, #1
 8002992:	4a23      	ldr	r2, [pc, #140]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x1578>)
 8002994:	6013      	str	r3, [r2, #0]
							temp_chai_c2+=chai_c;
 8002996:	4b23      	ldr	r3, [pc, #140]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x157c>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x156c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	4a20      	ldr	r2, [pc, #128]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x157c>)
 80029a2:	6013      	str	r3, [r2, #0]
						}
				}


		example2=example1;
 80029a4:	4b20      	ldr	r3, [pc, #128]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x1580>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a20      	ldr	r2, [pc, #128]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x1584>)
 80029aa:	6013      	str	r3, [r2, #0]
		example4=example3;
 80029ac:	4b20      	ldr	r3, [pc, #128]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x1588>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a20      	ldr	r2, [pc, #128]	@ (8002a34 <HAL_TIM_PeriodElapsedCallback+0x158c>)
 80029b2:	6013      	str	r3, [r2, #0]
		example6=example5;
 80029b4:	4b20      	ldr	r3, [pc, #128]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x1590>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a20      	ldr	r2, [pc, #128]	@ (8002a3c <HAL_TIM_PeriodElapsedCallback+0x1594>)
 80029ba:	6013      	str	r3, [r2, #0]


		tim1_finish3=TIM6->CNT;
 80029bc:	4b20      	ldr	r3, [pc, #128]	@ (8002a40 <HAL_TIM_PeriodElapsedCallback+0x1598>)
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b20      	ldr	r3, [pc, #128]	@ (8002a44 <HAL_TIM_PeriodElapsedCallback+0x159c>)
 80029c4:	601a      	str	r2, [r3, #0]
		tim1_count3=tim1_finish3-tim1_start3;
 80029c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a44 <HAL_TIM_PeriodElapsedCallback+0x159c>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002a48 <HAL_TIM_PeriodElapsedCallback+0x15a0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a4c <HAL_TIM_PeriodElapsedCallback+0x15a4>)
 80029d2:	6013      	str	r3, [r2, #0]
				}
	}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	2400c190 	.word	0x2400c190
 80029e0:	24000054 	.word	0x24000054
 80029e4:	24000058 	.word	0x24000058
 80029e8:	24010110 	.word	0x24010110
 80029ec:	2401010c 	.word	0x2401010c
 80029f0:	24010118 	.word	0x24010118
 80029f4:	24010114 	.word	0x24010114
 80029f8:	2400c118 	.word	0x2400c118
 80029fc:	2400005c 	.word	0x2400005c
 8002a00:	2400c194 	.word	0x2400c194
 8002a04:	2401017c 	.word	0x2401017c
 8002a08:	24010178 	.word	0x24010178
 8002a0c:	24010184 	.word	0x24010184
 8002a10:	24010180 	.word	0x24010180
 8002a14:	2400c198 	.word	0x2400c198
 8002a18:	240101e8 	.word	0x240101e8
 8002a1c:	240101e4 	.word	0x240101e4
 8002a20:	240101f0 	.word	0x240101f0
 8002a24:	240101ec 	.word	0x240101ec
 8002a28:	2400c19c 	.word	0x2400c19c
 8002a2c:	2400c1a0 	.word	0x2400c1a0
 8002a30:	2400c1a4 	.word	0x2400c1a4
 8002a34:	2400c1a8 	.word	0x2400c1a8
 8002a38:	2400c1ac 	.word	0x2400c1ac
 8002a3c:	2400c1b0 	.word	0x2400c1b0
 8002a40:	40001000 	.word	0x40001000
 8002a44:	2400c18c 	.word	0x2400c18c
 8002a48:	2400c188 	.word	0x2400c188
 8002a4c:	2400c17c 	.word	0x2400c17c

08002a50 <InitLUT>:
	L_a_filtered = 0.6 * x + 0.4 * x_prev;
	return L_a_filtered;
}


void InitLUT(void){
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0

	for(unsigned int i=0;i<1024;i++){
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	e049      	b.n	8002af0 <InitLUT+0xa0>
		p1_LUT[i]= (i % 1024)>=angle_on && (i % 1024)<=angle_off;  //512~853
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a62:	4a29      	ldr	r2, [pc, #164]	@ (8002b08 <InitLUT+0xb8>)
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d308      	bcc.n	8002a7c <InitLUT+0x2c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a70:	4a26      	ldr	r2, [pc, #152]	@ (8002b0c <InitLUT+0xbc>)
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d801      	bhi.n	8002a7c <InitLUT+0x2c>
 8002a78:	2201      	movs	r2, #1
 8002a7a:	e000      	b.n	8002a7e <InitLUT+0x2e>
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	4924      	ldr	r1, [pc, #144]	@ (8002b10 <InitLUT+0xc0>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		p2_LUT[i]=((i-340)%1024)>=angle_on && ((i-340)%1024)<=angle_off;  //852~1023, 0~169
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a90:	4a1d      	ldr	r2, [pc, #116]	@ (8002b08 <InitLUT+0xb8>)
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d30a      	bcc.n	8002aae <InitLUT+0x5e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b0c <InitLUT+0xbc>)
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d801      	bhi.n	8002aae <InitLUT+0x5e>
 8002aaa:	2201      	movs	r2, #1
 8002aac:	e000      	b.n	8002ab0 <InitLUT+0x60>
 8002aae:	2200      	movs	r2, #0
 8002ab0:	4918      	ldr	r1, [pc, #96]	@ (8002b14 <InitLUT+0xc4>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		p3_LUT[i]=((i+340)%1024)>=angle_on && ((i+340)%1024)<=angle_off; //172~513
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac2:	4a11      	ldr	r2, [pc, #68]	@ (8002b08 <InitLUT+0xb8>)
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d30a      	bcc.n	8002ae0 <InitLUT+0x90>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b0c <InitLUT+0xbc>)
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d801      	bhi.n	8002ae0 <InitLUT+0x90>
 8002adc:	2201      	movs	r2, #1
 8002ade:	e000      	b.n	8002ae2 <InitLUT+0x92>
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	490d      	ldr	r1, [pc, #52]	@ (8002b18 <InitLUT+0xc8>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(unsigned int i=0;i<1024;i++){
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3301      	adds	r3, #1
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002af6:	d3b1      	bcc.n	8002a5c <InitLUT+0xc>
	}
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	24000020 	.word	0x24000020
 8002b0c:	24000024 	.word	0x24000024
 8002b10:	24000474 	.word	0x24000474
 8002b14:	24001474 	.word	0x24001474
 8002b18:	24002474 	.word	0x24002474

08002b1c <SensorlessLUT>:
void SensorlessLUT(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
	for(unsigned int i=200;i<1600;i++){
 8002b22:	23c8      	movs	r3, #200	@ 0xc8
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	e068      	b.n	8002bfa <SensorlessLUT+0xde>
			p2_ssLUT[i]= (i%1600)>=1140 && (i % 1600)<=1590;
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4b39      	ldr	r3, [pc, #228]	@ (8002c10 <SensorlessLUT+0xf4>)
 8002b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b30:	0a5b      	lsrs	r3, r3, #9
 8002b32:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f240 4273 	movw	r2, #1139	@ 0x473
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d90f      	bls.n	8002b64 <SensorlessLUT+0x48>
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4b32      	ldr	r3, [pc, #200]	@ (8002c10 <SensorlessLUT+0xf4>)
 8002b48:	fba3 1302 	umull	r1, r3, r3, r2
 8002b4c:	0a5b      	lsrs	r3, r3, #9
 8002b4e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f240 6236 	movw	r2, #1590	@ 0x636
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d801      	bhi.n	8002b64 <SensorlessLUT+0x48>
 8002b60:	2201      	movs	r2, #1
 8002b62:	e000      	b.n	8002b66 <SensorlessLUT+0x4a>
 8002b64:	2200      	movs	r2, #0
 8002b66:	492b      	ldr	r1, [pc, #172]	@ (8002c14 <SensorlessLUT+0xf8>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			p1_ssLUT[i]=(i%1600)>=670 && (i%1600)<=1130;
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4b27      	ldr	r3, [pc, #156]	@ (8002c10 <SensorlessLUT+0xf4>)
 8002b72:	fba3 1302 	umull	r1, r3, r3, r2
 8002b76:	0a5b      	lsrs	r3, r3, #9
 8002b78:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f240 229d 	movw	r2, #669	@ 0x29d
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d90f      	bls.n	8002baa <SensorlessLUT+0x8e>
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4b20      	ldr	r3, [pc, #128]	@ (8002c10 <SensorlessLUT+0xf4>)
 8002b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b92:	0a5b      	lsrs	r3, r3, #9
 8002b94:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f240 426a 	movw	r2, #1130	@ 0x46a
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d801      	bhi.n	8002baa <SensorlessLUT+0x8e>
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	e000      	b.n	8002bac <SensorlessLUT+0x90>
 8002baa:	2200      	movs	r2, #0
 8002bac:	491a      	ldr	r1, [pc, #104]	@ (8002c18 <SensorlessLUT+0xfc>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			p3_ssLUT[i]=(i%1600)>=200 && (i%1600)<=660;
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4b16      	ldr	r3, [pc, #88]	@ (8002c10 <SensorlessLUT+0xf4>)
 8002bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bbc:	0a5b      	lsrs	r3, r3, #9
 8002bbe:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2bc7      	cmp	r3, #199	@ 0xc7
 8002bca:	d90e      	bls.n	8002bea <SensorlessLUT+0xce>
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	4b10      	ldr	r3, [pc, #64]	@ (8002c10 <SensorlessLUT+0xf4>)
 8002bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bd4:	0a5b      	lsrs	r3, r3, #9
 8002bd6:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8002be4:	d801      	bhi.n	8002bea <SensorlessLUT+0xce>
 8002be6:	2201      	movs	r2, #1
 8002be8:	e000      	b.n	8002bec <SensorlessLUT+0xd0>
 8002bea:	2200      	movs	r2, #0
 8002bec:	490b      	ldr	r1, [pc, #44]	@ (8002c1c <SensorlessLUT+0x100>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(unsigned int i=200;i<1600;i++){
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8002c00:	d392      	bcc.n	8002b28 <SensorlessLUT+0xc>

		}
}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	51eb851f 	.word	0x51eb851f
 8002c14:	24006354 	.word	0x24006354
 8002c18:	24003474 	.word	0x24003474
 8002c1c:	24009234 	.word	0x24009234

08002c20 <FastArcTan>:
*/

/*double FastArcTan(double x){
	return 0.7853981633974483 * x - x * (fabs(x) - 1.0) * (0.2447 + 0.0663 * fabs(x));
} */
double FastArcTan(double x) {
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	ed87 0b00 	vstr	d0, [r7]
	const double k1 = 0.28125;  // 미리 계산?   ?  ?
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c68 <FastArcTan+0x48>)
 8002c30:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return x / (1.0 + k1 * fabs(x));
 8002c34:	ed97 7b00 	vldr	d7, [r7]
 8002c38:	eeb0 6bc7 	vabs.f64	d6, d7
 8002c3c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c40:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002c44:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002c48:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c4c:	ed97 6b00 	vldr	d6, [r7]
 8002c50:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002c54:	eeb0 7b45 	vmov.f64	d7, d5
}
 8002c58:	eeb0 0b47 	vmov.f64	d0, d7
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	3fd20000 	.word	0x3fd20000
 8002c6c:	00000000 	.word	0x00000000

08002c70 <generate_L_sin>:

void generate_L_sin(){
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
	float angle_increment = (2*3.1416)/7200;
 8002c76:	4b30      	ldr	r3, [pc, #192]	@ (8002d38 <generate_L_sin+0xc8>)
 8002c78:	613b      	str	r3, [r7, #16]
	int max_value = 2650;
 8002c7a:	f640 235a 	movw	r3, #2650	@ 0xa5a
 8002c7e:	60fb      	str	r3, [r7, #12]
	int min_value = 600;
 8002c80:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8002c84:	60bb      	str	r3, [r7, #8]
/*	for (int j=0; j< 400; j++)
	{
		L_sin[j] = 300;
	}  */
	for (int i=0; i<= 3600; i++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	e045      	b.n	8002d18 <generate_L_sin+0xa8>
	{
		float angle = i * angle_increment-3.1416/2;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	ee07 3a90 	vmov	s15, r3
 8002c92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c96:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ca2:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8002d30 <generate_L_sin+0xc0>
 8002ca6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002caa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002cae:	edc7 7a01 	vstr	s15, [r7, #4]
		float sin_value = sin(angle);
 8002cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cba:	eeb0 0b47 	vmov.f64	d0, d7
 8002cbe:	f00b fc27 	bl	800e510 <sin>
 8002cc2:	eeb0 7b40 	vmov.f64	d7, d0
 8002cc6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002cca:	edc7 7a00 	vstr	s15, [r7]
		L_sin[i] = (max_value-min_value)/2*sin_value+(max_value+min_value)/2;
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	da00      	bge.n	8002cda <generate_L_sin+0x6a>
 8002cd8:	3301      	adds	r3, #1
 8002cda:	105b      	asrs	r3, r3, #1
 8002cdc:	ee07 3a90 	vmov	s15, r3
 8002ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ce4:	edd7 7a00 	vldr	s15, [r7]
 8002ce8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	da00      	bge.n	8002cf8 <generate_L_sin+0x88>
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	105b      	asrs	r3, r3, #1
 8002cfa:	ee07 3a90 	vmov	s15, r3
 8002cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d06:	4a0d      	ldr	r2, [pc, #52]	@ (8002d3c <generate_L_sin+0xcc>)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<= 3600; i++)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3301      	adds	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002d1e:	ddb5      	ble.n	8002c8c <generate_L_sin+0x1c>
	}
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	f3af 8000 	nop.w
 8002d30:	2e48e8a7 	.word	0x2e48e8a7
 8002d34:	3ff921ff 	.word	0x3ff921ff
 8002d38:	3a64c3ab 	.word	0x3a64c3ab
 8002d3c:	2400c21c 	.word	0x2400c21c

08002d40 <calculate_average>:

float calculate_average(float *values, int count) {
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
	float sum = 0;
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i <= count; i++) {
 8002d50:	2301      	movs	r3, #1
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	e00e      	b.n	8002d74 <calculate_average+0x34>
		sum += values[i];
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6a:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 1; i <= count; i++) {
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3301      	adds	r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	ddec      	ble.n	8002d56 <calculate_average+0x16>
	}
	return sum / count;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d86:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d8a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d8e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002d92:	eeb0 0a67 	vmov.f32	s0, s15
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002da4:	b672      	cpsid	i
}
 8002da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002da8:	bf00      	nop
 8002daa:	e7fd      	b.n	8002da8 <Error_Handler+0x8>

08002dac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <HAL_MspInit+0x30>)
 8002db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002db8:	4a08      	ldr	r2, [pc, #32]	@ (8002ddc <HAL_MspInit+0x30>)
 8002dba:	f043 0302 	orr.w	r3, r3, #2
 8002dbe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002dc2:	4b06      	ldr	r3, [pc, #24]	@ (8002ddc <HAL_MspInit+0x30>)
 8002dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	58024400 	.word	0x58024400

08002de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08c      	sub	sp, #48	@ 0x30
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 031c 	add.w	r3, r7, #28
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a6b      	ldr	r2, [pc, #428]	@ (8002fac <HAL_ADC_MspInit+0x1cc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d15b      	bne.n	8002eba <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002e02:	4b6b      	ldr	r3, [pc, #428]	@ (8002fb0 <HAL_ADC_MspInit+0x1d0>)
 8002e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e08:	4a69      	ldr	r2, [pc, #420]	@ (8002fb0 <HAL_ADC_MspInit+0x1d0>)
 8002e0a:	f043 0320 	orr.w	r3, r3, #32
 8002e0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002e12:	4b67      	ldr	r3, [pc, #412]	@ (8002fb0 <HAL_ADC_MspInit+0x1d0>)
 8002e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e20:	4b63      	ldr	r3, [pc, #396]	@ (8002fb0 <HAL_ADC_MspInit+0x1d0>)
 8002e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e26:	4a62      	ldr	r2, [pc, #392]	@ (8002fb0 <HAL_ADC_MspInit+0x1d0>)
 8002e28:	f043 0320 	orr.w	r3, r3, #32
 8002e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e30:	4b5f      	ldr	r3, [pc, #380]	@ (8002fb0 <HAL_ADC_MspInit+0x1d0>)
 8002e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e44:	2303      	movs	r3, #3
 8002e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e4c:	f107 031c 	add.w	r3, r7, #28
 8002e50:	4619      	mov	r1, r3
 8002e52:	4858      	ldr	r0, [pc, #352]	@ (8002fb4 <HAL_ADC_MspInit+0x1d4>)
 8002e54:	f004 fdba 	bl	80079cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002e58:	4b57      	ldr	r3, [pc, #348]	@ (8002fb8 <HAL_ADC_MspInit+0x1d8>)
 8002e5a:	4a58      	ldr	r2, [pc, #352]	@ (8002fbc <HAL_ADC_MspInit+0x1dc>)
 8002e5c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002e5e:	4b56      	ldr	r3, [pc, #344]	@ (8002fb8 <HAL_ADC_MspInit+0x1d8>)
 8002e60:	2209      	movs	r2, #9
 8002e62:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e64:	4b54      	ldr	r3, [pc, #336]	@ (8002fb8 <HAL_ADC_MspInit+0x1d8>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e6a:	4b53      	ldr	r3, [pc, #332]	@ (8002fb8 <HAL_ADC_MspInit+0x1d8>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e70:	4b51      	ldr	r3, [pc, #324]	@ (8002fb8 <HAL_ADC_MspInit+0x1d8>)
 8002e72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e78:	4b4f      	ldr	r3, [pc, #316]	@ (8002fb8 <HAL_ADC_MspInit+0x1d8>)
 8002e7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e7e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e80:	4b4d      	ldr	r3, [pc, #308]	@ (8002fb8 <HAL_ADC_MspInit+0x1d8>)
 8002e82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e86:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e88:	4b4b      	ldr	r3, [pc, #300]	@ (8002fb8 <HAL_ADC_MspInit+0x1d8>)
 8002e8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e8e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e90:	4b49      	ldr	r3, [pc, #292]	@ (8002fb8 <HAL_ADC_MspInit+0x1d8>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e96:	4b48      	ldr	r3, [pc, #288]	@ (8002fb8 <HAL_ADC_MspInit+0x1d8>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e9c:	4846      	ldr	r0, [pc, #280]	@ (8002fb8 <HAL_ADC_MspInit+0x1d8>)
 8002e9e:	f002 fc4d 	bl	800573c <HAL_DMA_Init>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 8002ea8:	f7ff ff7a 	bl	8002da0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a42      	ldr	r2, [pc, #264]	@ (8002fb8 <HAL_ADC_MspInit+0x1d8>)
 8002eb0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002eb2:	4a41      	ldr	r2, [pc, #260]	@ (8002fb8 <HAL_ADC_MspInit+0x1d8>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002eb8:	e074      	b.n	8002fa4 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC3)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a40      	ldr	r2, [pc, #256]	@ (8002fc0 <HAL_ADC_MspInit+0x1e0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d16f      	bne.n	8002fa4 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb0 <HAL_ADC_MspInit+0x1d0>)
 8002ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eca:	4a39      	ldr	r2, [pc, #228]	@ (8002fb0 <HAL_ADC_MspInit+0x1d0>)
 8002ecc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ed4:	4b36      	ldr	r3, [pc, #216]	@ (8002fb0 <HAL_ADC_MspInit+0x1d0>)
 8002ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ee2:	4b33      	ldr	r3, [pc, #204]	@ (8002fb0 <HAL_ADC_MspInit+0x1d0>)
 8002ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ee8:	4a31      	ldr	r2, [pc, #196]	@ (8002fb0 <HAL_ADC_MspInit+0x1d0>)
 8002eea:	f043 0320 	orr.w	r3, r3, #32
 8002eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8002fb0 <HAL_ADC_MspInit+0x1d0>)
 8002ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f00:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb0 <HAL_ADC_MspInit+0x1d0>)
 8002f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f06:	4a2a      	ldr	r2, [pc, #168]	@ (8002fb0 <HAL_ADC_MspInit+0x1d0>)
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f10:	4b27      	ldr	r3, [pc, #156]	@ (8002fb0 <HAL_ADC_MspInit+0x1d0>)
 8002f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002f1e:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f24:	2303      	movs	r3, #3
 8002f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f2c:	f107 031c 	add.w	r3, r7, #28
 8002f30:	4619      	mov	r1, r3
 8002f32:	4820      	ldr	r0, [pc, #128]	@ (8002fb4 <HAL_ADC_MspInit+0x1d4>)
 8002f34:	f004 fd4a 	bl	80079cc <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002f38:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8002f3c:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002f40:	f000 fcde 	bl	8003900 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream0;
 8002f44:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc4 <HAL_ADC_MspInit+0x1e4>)
 8002f46:	4a20      	ldr	r2, [pc, #128]	@ (8002fc8 <HAL_ADC_MspInit+0x1e8>)
 8002f48:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc4 <HAL_ADC_MspInit+0x1e4>)
 8002f4c:	2273      	movs	r2, #115	@ 0x73
 8002f4e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f50:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc4 <HAL_ADC_MspInit+0x1e4>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f56:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc4 <HAL_ADC_MspInit+0x1e4>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002f5c:	4b19      	ldr	r3, [pc, #100]	@ (8002fc4 <HAL_ADC_MspInit+0x1e4>)
 8002f5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f62:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f64:	4b17      	ldr	r3, [pc, #92]	@ (8002fc4 <HAL_ADC_MspInit+0x1e4>)
 8002f66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f6a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f6c:	4b15      	ldr	r3, [pc, #84]	@ (8002fc4 <HAL_ADC_MspInit+0x1e4>)
 8002f6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f72:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002f74:	4b13      	ldr	r3, [pc, #76]	@ (8002fc4 <HAL_ADC_MspInit+0x1e4>)
 8002f76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f7a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002f7c:	4b11      	ldr	r3, [pc, #68]	@ (8002fc4 <HAL_ADC_MspInit+0x1e4>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f82:	4b10      	ldr	r3, [pc, #64]	@ (8002fc4 <HAL_ADC_MspInit+0x1e4>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002f88:	480e      	ldr	r0, [pc, #56]	@ (8002fc4 <HAL_ADC_MspInit+0x1e4>)
 8002f8a:	f002 fbd7 	bl	800573c <HAL_DMA_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8002f94:	f7ff ff04 	bl	8002da0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc4 <HAL_ADC_MspInit+0x1e4>)
 8002f9c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002f9e:	4a09      	ldr	r2, [pc, #36]	@ (8002fc4 <HAL_ADC_MspInit+0x1e4>)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002fa4:	bf00      	nop
 8002fa6:	3730      	adds	r7, #48	@ 0x30
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40022000 	.word	0x40022000
 8002fb0:	58024400 	.word	0x58024400
 8002fb4:	58021400 	.word	0x58021400
 8002fb8:	24000174 	.word	0x24000174
 8002fbc:	40020410 	.word	0x40020410
 8002fc0:	58026000 	.word	0x58026000
 8002fc4:	240001ec 	.word	0x240001ec
 8002fc8:	40020010 	.word	0x40020010

08002fcc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	@ 0x28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a30      	ldr	r2, [pc, #192]	@ (80030ac <HAL_DAC_MspInit+0xe0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d159      	bne.n	80030a2 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002fee:	4b30      	ldr	r3, [pc, #192]	@ (80030b0 <HAL_DAC_MspInit+0xe4>)
 8002ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80030b0 <HAL_DAC_MspInit+0xe4>)
 8002ff6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002ffa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80030b0 <HAL_DAC_MspInit+0xe4>)
 8003000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003004:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800300c:	4b28      	ldr	r3, [pc, #160]	@ (80030b0 <HAL_DAC_MspInit+0xe4>)
 800300e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003012:	4a27      	ldr	r2, [pc, #156]	@ (80030b0 <HAL_DAC_MspInit+0xe4>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800301c:	4b24      	ldr	r3, [pc, #144]	@ (80030b0 <HAL_DAC_MspInit+0xe4>)
 800301e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800302a:	2310      	movs	r3, #16
 800302c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800302e:	2303      	movs	r3, #3
 8003030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	4619      	mov	r1, r3
 800303c:	481d      	ldr	r0, [pc, #116]	@ (80030b4 <HAL_DAC_MspInit+0xe8>)
 800303e:	f004 fcc5 	bl	80079cc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003042:	4b1d      	ldr	r3, [pc, #116]	@ (80030b8 <HAL_DAC_MspInit+0xec>)
 8003044:	4a1d      	ldr	r2, [pc, #116]	@ (80030bc <HAL_DAC_MspInit+0xf0>)
 8003046:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003048:	4b1b      	ldr	r3, [pc, #108]	@ (80030b8 <HAL_DAC_MspInit+0xec>)
 800304a:	2243      	movs	r2, #67	@ 0x43
 800304c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800304e:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <HAL_DAC_MspInit+0xec>)
 8003050:	2240      	movs	r2, #64	@ 0x40
 8003052:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003054:	4b18      	ldr	r3, [pc, #96]	@ (80030b8 <HAL_DAC_MspInit+0xec>)
 8003056:	2200      	movs	r2, #0
 8003058:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800305a:	4b17      	ldr	r3, [pc, #92]	@ (80030b8 <HAL_DAC_MspInit+0xec>)
 800305c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003060:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003062:	4b15      	ldr	r3, [pc, #84]	@ (80030b8 <HAL_DAC_MspInit+0xec>)
 8003064:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003068:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800306a:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <HAL_DAC_MspInit+0xec>)
 800306c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003070:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003072:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <HAL_DAC_MspInit+0xec>)
 8003074:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003078:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800307a:	4b0f      	ldr	r3, [pc, #60]	@ (80030b8 <HAL_DAC_MspInit+0xec>)
 800307c:	2200      	movs	r2, #0
 800307e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003080:	4b0d      	ldr	r3, [pc, #52]	@ (80030b8 <HAL_DAC_MspInit+0xec>)
 8003082:	2200      	movs	r2, #0
 8003084:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003086:	480c      	ldr	r0, [pc, #48]	@ (80030b8 <HAL_DAC_MspInit+0xec>)
 8003088:	f002 fb58 	bl	800573c <HAL_DMA_Init>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8003092:	f7ff fe85 	bl	8002da0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a07      	ldr	r2, [pc, #28]	@ (80030b8 <HAL_DAC_MspInit+0xec>)
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	4a06      	ldr	r2, [pc, #24]	@ (80030b8 <HAL_DAC_MspInit+0xec>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80030a2:	bf00      	nop
 80030a4:	3728      	adds	r7, #40	@ 0x28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40007400 	.word	0x40007400
 80030b0:	58024400 	.word	0x58024400
 80030b4:	58020000 	.word	0x58020000
 80030b8:	24000278 	.word	0x24000278
 80030bc:	40020028 	.word	0x40020028

080030c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a3a      	ldr	r2, [pc, #232]	@ (80031b8 <HAL_TIM_Base_MspInit+0xf8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d117      	bne.n	8003102 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030d2:	4b3a      	ldr	r3, [pc, #232]	@ (80031bc <HAL_TIM_Base_MspInit+0xfc>)
 80030d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030d8:	4a38      	ldr	r2, [pc, #224]	@ (80031bc <HAL_TIM_Base_MspInit+0xfc>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030e2:	4b36      	ldr	r3, [pc, #216]	@ (80031bc <HAL_TIM_Base_MspInit+0xfc>)
 80030e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80030f0:	2200      	movs	r2, #0
 80030f2:	2100      	movs	r1, #0
 80030f4:	2019      	movs	r0, #25
 80030f6:	f001 ffb0 	bl	800505a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80030fa:	2019      	movs	r0, #25
 80030fc:	f001 ffc7 	bl	800508e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003100:	e055      	b.n	80031ae <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM2)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800310a:	d117      	bne.n	800313c <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800310c:	4b2b      	ldr	r3, [pc, #172]	@ (80031bc <HAL_TIM_Base_MspInit+0xfc>)
 800310e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003112:	4a2a      	ldr	r2, [pc, #168]	@ (80031bc <HAL_TIM_Base_MspInit+0xfc>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800311c:	4b27      	ldr	r3, [pc, #156]	@ (80031bc <HAL_TIM_Base_MspInit+0xfc>)
 800311e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2100      	movs	r1, #0
 800312e:	201c      	movs	r0, #28
 8003130:	f001 ff93 	bl	800505a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003134:	201c      	movs	r0, #28
 8003136:	f001 ffaa 	bl	800508e <HAL_NVIC_EnableIRQ>
}
 800313a:	e038      	b.n	80031ae <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM6)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1f      	ldr	r2, [pc, #124]	@ (80031c0 <HAL_TIM_Base_MspInit+0x100>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d10f      	bne.n	8003166 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003146:	4b1d      	ldr	r3, [pc, #116]	@ (80031bc <HAL_TIM_Base_MspInit+0xfc>)
 8003148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800314c:	4a1b      	ldr	r2, [pc, #108]	@ (80031bc <HAL_TIM_Base_MspInit+0xfc>)
 800314e:	f043 0310 	orr.w	r3, r3, #16
 8003152:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003156:	4b19      	ldr	r3, [pc, #100]	@ (80031bc <HAL_TIM_Base_MspInit+0xfc>)
 8003158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
}
 8003164:	e023      	b.n	80031ae <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM8)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a16      	ldr	r2, [pc, #88]	@ (80031c4 <HAL_TIM_Base_MspInit+0x104>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d11e      	bne.n	80031ae <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003170:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <HAL_TIM_Base_MspInit+0xfc>)
 8003172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003176:	4a11      	ldr	r2, [pc, #68]	@ (80031bc <HAL_TIM_Base_MspInit+0xfc>)
 8003178:	f043 0302 	orr.w	r3, r3, #2
 800317c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003180:	4b0e      	ldr	r3, [pc, #56]	@ (80031bc <HAL_TIM_Base_MspInit+0xfc>)
 8003182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800318e:	2200      	movs	r2, #0
 8003190:	2101      	movs	r1, #1
 8003192:	202c      	movs	r0, #44	@ 0x2c
 8003194:	f001 ff61 	bl	800505a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003198:	202c      	movs	r0, #44	@ 0x2c
 800319a:	f001 ff78 	bl	800508e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 800319e:	2200      	movs	r2, #0
 80031a0:	2101      	movs	r1, #1
 80031a2:	202d      	movs	r0, #45	@ 0x2d
 80031a4:	f001 ff59 	bl	800505a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80031a8:	202d      	movs	r0, #45	@ 0x2d
 80031aa:	f001 ff70 	bl	800508e <HAL_NVIC_EnableIRQ>
}
 80031ae:	bf00      	nop
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40010000 	.word	0x40010000
 80031bc:	58024400 	.word	0x58024400
 80031c0:	40001000 	.word	0x40001000
 80031c4:	40010400 	.word	0x40010400

080031c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	@ 0x28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003260 <HAL_TIM_Encoder_MspInit+0x98>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d136      	bne.n	8003258 <HAL_TIM_Encoder_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003264 <HAL_TIM_Encoder_MspInit+0x9c>)
 80031ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003264 <HAL_TIM_Encoder_MspInit+0x9c>)
 80031f2:	f043 0304 	orr.w	r3, r3, #4
 80031f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003264 <HAL_TIM_Encoder_MspInit+0x9c>)
 80031fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003208:	4b16      	ldr	r3, [pc, #88]	@ (8003264 <HAL_TIM_Encoder_MspInit+0x9c>)
 800320a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800320e:	4a15      	ldr	r2, [pc, #84]	@ (8003264 <HAL_TIM_Encoder_MspInit+0x9c>)
 8003210:	f043 0308 	orr.w	r3, r3, #8
 8003214:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003218:	4b12      	ldr	r3, [pc, #72]	@ (8003264 <HAL_TIM_Encoder_MspInit+0x9c>)
 800321a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003226:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800322a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322c:	2302      	movs	r3, #2
 800322e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003234:	2300      	movs	r3, #0
 8003236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003238:	2302      	movs	r3, #2
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	4619      	mov	r1, r3
 8003242:	4809      	ldr	r0, [pc, #36]	@ (8003268 <HAL_TIM_Encoder_MspInit+0xa0>)
 8003244:	f004 fbc2 	bl	80079cc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003248:	2200      	movs	r2, #0
 800324a:	2100      	movs	r1, #0
 800324c:	201e      	movs	r0, #30
 800324e:	f001 ff04 	bl	800505a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003252:	201e      	movs	r0, #30
 8003254:	f001 ff1b 	bl	800508e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8003258:	bf00      	nop
 800325a:	3728      	adds	r7, #40	@ 0x28
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40000800 	.word	0x40000800
 8003264:	58024400 	.word	0x58024400
 8003268:	58020c00 	.word	0x58020c00

0800326c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	@ 0x28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003274:	f107 0314 	add.w	r3, r7, #20
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a32      	ldr	r2, [pc, #200]	@ (8003354 <HAL_TIM_MspPostInit+0xe8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d15d      	bne.n	800334a <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328e:	4b32      	ldr	r3, [pc, #200]	@ (8003358 <HAL_TIM_MspPostInit+0xec>)
 8003290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003294:	4a30      	ldr	r2, [pc, #192]	@ (8003358 <HAL_TIM_MspPostInit+0xec>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800329e:	4b2e      	ldr	r3, [pc, #184]	@ (8003358 <HAL_TIM_MspPostInit+0xec>)
 80032a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003358 <HAL_TIM_MspPostInit+0xec>)
 80032ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032b2:	4a29      	ldr	r2, [pc, #164]	@ (8003358 <HAL_TIM_MspPostInit+0xec>)
 80032b4:	f043 0302 	orr.w	r3, r3, #2
 80032b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032bc:	4b26      	ldr	r3, [pc, #152]	@ (8003358 <HAL_TIM_MspPostInit+0xec>)
 80032be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ca:	4b23      	ldr	r3, [pc, #140]	@ (8003358 <HAL_TIM_MspPostInit+0xec>)
 80032cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032d0:	4a21      	ldr	r2, [pc, #132]	@ (8003358 <HAL_TIM_MspPostInit+0xec>)
 80032d2:	f043 0304 	orr.w	r3, r3, #4
 80032d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032da:	4b1f      	ldr	r3, [pc, #124]	@ (8003358 <HAL_TIM_MspPostInit+0xec>)
 80032dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80032e8:	2320      	movs	r3, #32
 80032ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	2302      	movs	r3, #2
 80032ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f4:	2300      	movs	r3, #0
 80032f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80032f8:	2303      	movs	r3, #3
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	4619      	mov	r1, r3
 8003302:	4816      	ldr	r0, [pc, #88]	@ (800335c <HAL_TIM_MspPostInit+0xf0>)
 8003304:	f004 fb62 	bl	80079cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003308:	2303      	movs	r3, #3
 800330a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003314:	2300      	movs	r3, #0
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003318:	2303      	movs	r3, #3
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	4619      	mov	r1, r3
 8003322:	480f      	ldr	r0, [pc, #60]	@ (8003360 <HAL_TIM_MspPostInit+0xf4>)
 8003324:	f004 fb52 	bl	80079cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8003328:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800332c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003336:	2300      	movs	r3, #0
 8003338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800333a:	2303      	movs	r3, #3
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800333e:	f107 0314 	add.w	r3, r7, #20
 8003342:	4619      	mov	r1, r3
 8003344:	4807      	ldr	r0, [pc, #28]	@ (8003364 <HAL_TIM_MspPostInit+0xf8>)
 8003346:	f004 fb41 	bl	80079cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800334a:	bf00      	nop
 800334c:	3728      	adds	r7, #40	@ 0x28
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40010400 	.word	0x40010400
 8003358:	58024400 	.word	0x58024400
 800335c:	58020000 	.word	0x58020000
 8003360:	58020400 	.word	0x58020400
 8003364:	58020800 	.word	0x58020800

08003368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <NMI_Handler+0x4>

08003370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <HardFault_Handler+0x4>

08003378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <MemManage_Handler+0x4>

08003380 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <BusFault_Handler+0x4>

08003388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <UsageFault_Handler+0x4>

08003390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033be:	f000 fa4f 	bl	8003860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80033cc:	4802      	ldr	r0, [pc, #8]	@ (80033d8 <DMA1_Stream0_IRQHandler+0x10>)
 80033ce:	f002 ff7b 	bl	80062c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	240001ec 	.word	0x240001ec

080033dc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80033e0:	4802      	ldr	r0, [pc, #8]	@ (80033ec <DMA1_Stream1_IRQHandler+0x10>)
 80033e2:	f002 ff71 	bl	80062c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	24000278 	.word	0x24000278

080033f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033f4:	4802      	ldr	r0, [pc, #8]	@ (8003400 <TIM1_UP_IRQHandler+0x10>)
 80033f6:	f008 fdc7 	bl	800bf88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	240002f0 	.word	0x240002f0

08003404 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003408:	4802      	ldr	r0, [pc, #8]	@ (8003414 <TIM2_IRQHandler+0x10>)
 800340a:	f008 fdbd 	bl	800bf88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	2400033c 	.word	0x2400033c

08003418 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800341c:	4802      	ldr	r0, [pc, #8]	@ (8003428 <TIM4_IRQHandler+0x10>)
 800341e:	f008 fdb3 	bl	800bf88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	24000388 	.word	0x24000388

0800342c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8003430:	2000      	movs	r0, #0
 8003432:	f000 f8c3 	bl	80035bc <BSP_PB_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003436:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800343a:	f004 fcaa 	bl	8007d92 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003448:	4802      	ldr	r0, [pc, #8]	@ (8003454 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800344a:	f008 fd9d 	bl	800bf88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	24000420 	.word	0x24000420

08003458 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800345c:	4802      	ldr	r0, [pc, #8]	@ (8003468 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800345e:	f008 fd93 	bl	800bf88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	24000420 	.word	0x24000420

0800346c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003470:	4802      	ldr	r0, [pc, #8]	@ (800347c <DMA2_Stream0_IRQHandler+0x10>)
 8003472:	f002 ff29 	bl	80062c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	24000174 	.word	0x24000174

08003480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003480:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80034bc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003484:	f7fd f94e 	bl	8000724 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003488:	f7fd f89e 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800348c:	480c      	ldr	r0, [pc, #48]	@ (80034c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800348e:	490d      	ldr	r1, [pc, #52]	@ (80034c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003490:	4a0d      	ldr	r2, [pc, #52]	@ (80034c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003494:	e002      	b.n	800349c <LoopCopyDataInit>

08003496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800349a:	3304      	adds	r3, #4

0800349c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800349c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800349e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034a0:	d3f9      	bcc.n	8003496 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034a2:	4a0a      	ldr	r2, [pc, #40]	@ (80034cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034a4:	4c0a      	ldr	r4, [pc, #40]	@ (80034d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034a8:	e001      	b.n	80034ae <LoopFillZerobss>

080034aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034ac:	3204      	adds	r2, #4

080034ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034b0:	d3fb      	bcc.n	80034aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034b2:	f00b f807 	bl	800e4c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034b6:	f7fd f94d 	bl	8000754 <main>
  bx  lr
 80034ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80034c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80034c4:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 80034c8:	0800f2e0 	.word	0x0800f2e0
  ldr r2, =_sbss
 80034cc:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80034d0:	240102d4 	.word	0x240102d4

080034d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034d4:	e7fe      	b.n	80034d4 <ADC3_IRQHandler>
	...

080034d8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	460a      	mov	r2, r1
 80034e2:	71fb      	strb	r3, [r7, #7]
 80034e4:	4613      	mov	r3, r2
 80034e6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80034e8:	4b2e      	ldr	r3, [pc, #184]	@ (80035a4 <BSP_PB_Init+0xcc>)
 80034ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034ee:	4a2d      	ldr	r2, [pc, #180]	@ (80035a4 <BSP_PB_Init+0xcc>)
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034f8:	4b2a      	ldr	r3, [pc, #168]	@ (80035a4 <BSP_PB_Init+0xcc>)
 80034fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8003506:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800350a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800350c:	2302      	movs	r3, #2
 800350e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003510:	2302      	movs	r3, #2
 8003512:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8003514:	79bb      	ldrb	r3, [r7, #6]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10c      	bne.n	8003534 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	4a21      	ldr	r2, [pc, #132]	@ (80035a8 <BSP_PB_Init+0xd0>)
 8003522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003526:	f107 020c 	add.w	r2, r7, #12
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f004 fa4d 	bl	80079cc <HAL_GPIO_Init>
 8003532:	e031      	b.n	8003598 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003534:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003538:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	4a1a      	ldr	r2, [pc, #104]	@ (80035a8 <BSP_PB_Init+0xd0>)
 800353e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003542:	f107 020c 	add.w	r2, r7, #12
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f004 fa3f 	bl	80079cc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4a16      	ldr	r2, [pc, #88]	@ (80035ac <BSP_PB_Init+0xd4>)
 8003554:	441a      	add	r2, r3
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	4915      	ldr	r1, [pc, #84]	@ (80035b0 <BSP_PB_Init+0xd8>)
 800355a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f004 f9e2 	bl	800792a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4a10      	ldr	r2, [pc, #64]	@ (80035ac <BSP_PB_Init+0xd4>)
 800356c:	1898      	adds	r0, r3, r2
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	4a10      	ldr	r2, [pc, #64]	@ (80035b4 <BSP_PB_Init+0xdc>)
 8003572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003576:	461a      	mov	r2, r3
 8003578:	2100      	movs	r1, #0
 800357a:	f004 f9b7 	bl	80078ec <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800357e:	2028      	movs	r0, #40	@ 0x28
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	4a0d      	ldr	r2, [pc, #52]	@ (80035b8 <BSP_PB_Init+0xe0>)
 8003584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003588:	2200      	movs	r2, #0
 800358a:	4619      	mov	r1, r3
 800358c:	f001 fd65 	bl	800505a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003590:	2328      	movs	r3, #40	@ 0x28
 8003592:	4618      	mov	r0, r3
 8003594:	f001 fd7b 	bl	800508e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	58024400 	.word	0x58024400
 80035a8:	2400006c 	.word	0x2400006c
 80035ac:	24010234 	.word	0x24010234
 80035b0:	0800f0d0 	.word	0x0800f0d0
 80035b4:	24000070 	.word	0x24000070
 80035b8:	24000074 	.word	0x24000074

080035bc <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4a04      	ldr	r2, [pc, #16]	@ (80035dc <BSP_PB_IRQHandler+0x20>)
 80035cc:	4413      	add	r3, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 f9c0 	bl	8007954 <HAL_EXTI_IRQHandler>
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	24010234 	.word	0x24010234

080035e0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	6039      	str	r1, [r7, #0]
 8003602:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800360e:	f06f 0301 	mvn.w	r3, #1
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	e018      	b.n	8003648 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	2294      	movs	r2, #148	@ 0x94
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	4a0d      	ldr	r2, [pc, #52]	@ (8003654 <BSP_COM_Init+0x5c>)
 8003620:	4413      	add	r3, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f852 	bl	80036cc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	2294      	movs	r2, #148	@ 0x94
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	4a08      	ldr	r2, [pc, #32]	@ (8003654 <BSP_COM_Init+0x5c>)
 8003632:	4413      	add	r3, r2
 8003634:	6839      	ldr	r1, [r7, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f80e 	bl	8003658 <MX_USART3_Init>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003642:	f06f 0303 	mvn.w	r3, #3
 8003646:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003648:	68fb      	ldr	r3, [r7, #12]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	2401023c 	.word	0x2401023c

08003658 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8003662:	4b15      	ldr	r3, [pc, #84]	@ (80036b8 <MX_USART3_Init+0x60>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	220c      	movs	r2, #12
 8003676:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	895b      	ldrh	r3, [r3, #10]
 800367c:	461a      	mov	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	891b      	ldrh	r3, [r3, #8]
 800368e:	461a      	mov	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	899b      	ldrh	r3, [r3, #12]
 8003698:	461a      	mov	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80036a4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f009 ff21 	bl	800d4ee <HAL_UART_Init>
 80036ac:	4603      	mov	r3, r0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	24000068 	.word	0x24000068

080036bc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80036c0:	2000      	movs	r0, #0
 80036c2:	f7ff ff8d 	bl	80035e0 <BSP_PB_Callback>
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	@ 0x28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80036d4:	4b27      	ldr	r3, [pc, #156]	@ (8003774 <COM1_MspInit+0xa8>)
 80036d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036da:	4a26      	ldr	r2, [pc, #152]	@ (8003774 <COM1_MspInit+0xa8>)
 80036dc:	f043 0308 	orr.w	r3, r3, #8
 80036e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036e4:	4b23      	ldr	r3, [pc, #140]	@ (8003774 <COM1_MspInit+0xa8>)
 80036e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80036f2:	4b20      	ldr	r3, [pc, #128]	@ (8003774 <COM1_MspInit+0xa8>)
 80036f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003774 <COM1_MspInit+0xa8>)
 80036fa:	f043 0308 	orr.w	r3, r3, #8
 80036fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003702:	4b1c      	ldr	r3, [pc, #112]	@ (8003774 <COM1_MspInit+0xa8>)
 8003704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003710:	4b18      	ldr	r3, [pc, #96]	@ (8003774 <COM1_MspInit+0xa8>)
 8003712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003716:	4a17      	ldr	r2, [pc, #92]	@ (8003774 <COM1_MspInit+0xa8>)
 8003718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800371c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003720:	4b14      	ldr	r3, [pc, #80]	@ (8003774 <COM1_MspInit+0xa8>)
 8003722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003726:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800372e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003732:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003738:	2302      	movs	r3, #2
 800373a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800373c:	2301      	movs	r3, #1
 800373e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003740:	2307      	movs	r3, #7
 8003742:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	4619      	mov	r1, r3
 800374a:	480b      	ldr	r0, [pc, #44]	@ (8003778 <COM1_MspInit+0xac>)
 800374c:	f004 f93e 	bl	80079cc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8003750:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003754:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003756:	2302      	movs	r3, #2
 8003758:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800375a:	2307      	movs	r3, #7
 800375c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800375e:	f107 0314 	add.w	r3, r7, #20
 8003762:	4619      	mov	r1, r3
 8003764:	4804      	ldr	r0, [pc, #16]	@ (8003778 <COM1_MspInit+0xac>)
 8003766:	f004 f931 	bl	80079cc <HAL_GPIO_Init>
}
 800376a:	bf00      	nop
 800376c:	3728      	adds	r7, #40	@ 0x28
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	58024400 	.word	0x58024400
 8003778:	58020c00 	.word	0x58020c00

0800377c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003782:	2003      	movs	r0, #3
 8003784:	f001 fc5e 	bl	8005044 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003788:	f005 f9b6 	bl	8008af8 <HAL_RCC_GetSysClockFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b15      	ldr	r3, [pc, #84]	@ (80037e4 <HAL_Init+0x68>)
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	0a1b      	lsrs	r3, r3, #8
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	4913      	ldr	r1, [pc, #76]	@ (80037e8 <HAL_Init+0x6c>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
 80037a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037a6:	4b0f      	ldr	r3, [pc, #60]	@ (80037e4 <HAL_Init+0x68>)
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	4a0e      	ldr	r2, [pc, #56]	@ (80037e8 <HAL_Init+0x6c>)
 80037b0:	5cd3      	ldrb	r3, [r2, r3]
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
 80037bc:	4a0b      	ldr	r2, [pc, #44]	@ (80037ec <HAL_Init+0x70>)
 80037be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037c0:	4a0b      	ldr	r2, [pc, #44]	@ (80037f0 <HAL_Init+0x74>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037c6:	2000      	movs	r0, #0
 80037c8:	f000 f814 	bl	80037f4 <HAL_InitTick>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e002      	b.n	80037dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80037d6:	f7ff fae9 	bl	8002dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	58024400 	.word	0x58024400
 80037e8:	0800f0c0 	.word	0x0800f0c0
 80037ec:	24000004 	.word	0x24000004
 80037f0:	24000000 	.word	0x24000000

080037f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80037fc:	4b15      	ldr	r3, [pc, #84]	@ (8003854 <HAL_InitTick+0x60>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e021      	b.n	800384c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003808:	4b13      	ldr	r3, [pc, #76]	@ (8003858 <HAL_InitTick+0x64>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b11      	ldr	r3, [pc, #68]	@ (8003854 <HAL_InitTick+0x60>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	4619      	mov	r1, r3
 8003812:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003816:	fbb3 f3f1 	udiv	r3, r3, r1
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	4618      	mov	r0, r3
 8003820:	f001 fc43 	bl	80050aa <HAL_SYSTICK_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e00e      	b.n	800384c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b0f      	cmp	r3, #15
 8003832:	d80a      	bhi.n	800384a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003834:	2200      	movs	r2, #0
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	f04f 30ff 	mov.w	r0, #4294967295
 800383c:	f001 fc0d 	bl	800505a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003840:	4a06      	ldr	r2, [pc, #24]	@ (800385c <HAL_InitTick+0x68>)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	2400007c 	.word	0x2400007c
 8003858:	24000000 	.word	0x24000000
 800385c:	24000078 	.word	0x24000078

08003860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003864:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <HAL_IncTick+0x20>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <HAL_IncTick+0x24>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4413      	add	r3, r2
 8003870:	4a04      	ldr	r2, [pc, #16]	@ (8003884 <HAL_IncTick+0x24>)
 8003872:	6013      	str	r3, [r2, #0]
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	2400007c 	.word	0x2400007c
 8003884:	240102d0 	.word	0x240102d0

08003888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return uwTick;
 800388c:	4b03      	ldr	r3, [pc, #12]	@ (800389c <HAL_GetTick+0x14>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	240102d0 	.word	0x240102d0

080038a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038a8:	f7ff ffee 	bl	8003888 <HAL_GetTick>
 80038ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b8:	d005      	beq.n	80038c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038ba:	4b0a      	ldr	r3, [pc, #40]	@ (80038e4 <HAL_Delay+0x44>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038c6:	bf00      	nop
 80038c8:	f7ff ffde 	bl	8003888 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d8f7      	bhi.n	80038c8 <HAL_Delay+0x28>
  {
  }
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	2400007c 	.word	0x2400007c

080038e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80038ec:	4b03      	ldr	r3, [pc, #12]	@ (80038fc <HAL_GetREVID+0x14>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	0c1b      	lsrs	r3, r3, #16
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	5c001000 	.word	0x5c001000

08003900 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800390a:	4b07      	ldr	r3, [pc, #28]	@ (8003928 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	43db      	mvns	r3, r3
 8003912:	401a      	ands	r2, r3
 8003914:	4904      	ldr	r1, [pc, #16]	@ (8003928 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	58000400 	.word	0x58000400

0800392c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	609a      	str	r2, [r3, #8]
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	609a      	str	r2, [r3, #8]
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d107      	bne.n	80039b8 <LL_ADC_SetChannelPreselection+0x24>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	0e9b      	lsrs	r3, r3, #26
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	2201      	movs	r2, #1
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	e015      	b.n	80039e4 <LL_ADC_SetChannelPreselection+0x50>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80039ce:	2320      	movs	r3, #32
 80039d0:	e003      	b.n	80039da <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	2201      	movs	r2, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	69d2      	ldr	r2, [r2, #28]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b087      	sub	sp, #28
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3360      	adds	r3, #96	@ 0x60
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	430b      	orrs	r3, r1
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b085      	sub	sp, #20
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	611a      	str	r2, [r3, #16]
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3360      	adds	r3, #96	@ 0x60
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	601a      	str	r2, [r3, #0]
  }
}
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3330      	adds	r3, #48	@ 0x30
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	0a1b      	lsrs	r3, r3, #8
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	f003 030c 	and.w	r3, r3, #12
 8003ae4:	4413      	add	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	211f      	movs	r1, #31
 8003af4:	fa01 f303 	lsl.w	r3, r1, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	401a      	ands	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	0e9b      	lsrs	r3, r3, #26
 8003b00:	f003 011f 	and.w	r1, r3, #31
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b14:	bf00      	nop
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f023 0203 	bic.w	r2, r3, #3
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	60da      	str	r2, [r3, #12]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b087      	sub	sp, #28
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3314      	adds	r3, #20
 8003b56:	461a      	mov	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	0e5b      	lsrs	r3, r3, #25
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	4413      	add	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	0d1b      	lsrs	r3, r3, #20
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	2107      	movs	r1, #7
 8003b74:	fa01 f303 	lsl.w	r3, r1, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	0d1b      	lsrs	r3, r3, #20
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	401a      	ands	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f003 0318 	and.w	r3, r3, #24
 8003bbe:	4908      	ldr	r1, [pc, #32]	@ (8003be0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003bc0:	40d9      	lsrs	r1, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	400b      	ands	r3, r1
 8003bc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003bd2:	bf00      	nop
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	000fffff 	.word	0x000fffff

08003be4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 031f 	and.w	r3, r3, #31
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	4b04      	ldr	r3, [pc, #16]	@ (8003c20 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6093      	str	r3, [r2, #8]
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	5fffffc0 	.word	0x5fffffc0

08003c24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c38:	d101      	bne.n	8003c3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	4b05      	ldr	r3, [pc, #20]	@ (8003c70 <LL_ADC_EnableInternalRegulator+0x24>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	6fffffc0 	.word	0x6fffffc0

08003c74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c88:	d101      	bne.n	8003c8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <LL_ADC_Enable+0x24>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	f043 0201 	orr.w	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	7fffffc0 	.word	0x7fffffc0

08003cc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <LL_ADC_IsEnabled+0x18>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <LL_ADC_IsEnabled+0x1a>
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <LL_ADC_REG_StartConversion+0x24>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	f043 0204 	orr.w	r2, r3, #4
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	7fffffc0 	.word	0x7fffffc0

08003d14 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d101      	bne.n	8003d2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d101      	bne.n	8003d52 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b089      	sub	sp, #36	@ 0x24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e18f      	b.n	800409a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d109      	bne.n	8003d9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff f829 	bl	8002de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff3f 	bl	8003c24 <LL_ADC_IsDeepPowerDownEnabled>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff ff25 	bl	8003c00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ff5a 	bl	8003c74 <LL_ADC_IsInternalRegulatorEnabled>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d114      	bne.n	8003df0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff ff3e 	bl	8003c4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dd0:	4b87      	ldr	r3, [pc, #540]	@ (8003ff0 <HAL_ADC_Init+0x290>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	4a87      	ldr	r2, [pc, #540]	@ (8003ff4 <HAL_ADC_Init+0x294>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	3301      	adds	r3, #1
 8003de0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003de2:	e002      	b.n	8003dea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f9      	bne.n	8003de4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff ff3d 	bl	8003c74 <LL_ADC_IsInternalRegulatorEnabled>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10d      	bne.n	8003e1c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e04:	f043 0210 	orr.w	r2, r3, #16
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e10:	f043 0201 	orr.w	r2, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff77 	bl	8003d14 <LL_ADC_REG_IsConversionOngoing>
 8003e26:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f040 8129 	bne.w	8004088 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f040 8125 	bne.w	8004088 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e42:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003e46:	f043 0202 	orr.w	r2, r3, #2
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff ff36 	bl	8003cc4 <LL_ADC_IsEnabled>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d136      	bne.n	8003ecc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a65      	ldr	r2, [pc, #404]	@ (8003ff8 <HAL_ADC_Init+0x298>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_ADC_Init+0x112>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a63      	ldr	r2, [pc, #396]	@ (8003ffc <HAL_ADC_Init+0x29c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10e      	bne.n	8003e90 <HAL_ADC_Init+0x130>
 8003e72:	4861      	ldr	r0, [pc, #388]	@ (8003ff8 <HAL_ADC_Init+0x298>)
 8003e74:	f7ff ff26 	bl	8003cc4 <LL_ADC_IsEnabled>
 8003e78:	4604      	mov	r4, r0
 8003e7a:	4860      	ldr	r0, [pc, #384]	@ (8003ffc <HAL_ADC_Init+0x29c>)
 8003e7c:	f7ff ff22 	bl	8003cc4 <LL_ADC_IsEnabled>
 8003e80:	4603      	mov	r3, r0
 8003e82:	4323      	orrs	r3, r4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e008      	b.n	8003ea2 <HAL_ADC_Init+0x142>
 8003e90:	485b      	ldr	r0, [pc, #364]	@ (8004000 <HAL_ADC_Init+0x2a0>)
 8003e92:	f7ff ff17 	bl	8003cc4 <LL_ADC_IsEnabled>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d012      	beq.n	8003ecc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a53      	ldr	r2, [pc, #332]	@ (8003ff8 <HAL_ADC_Init+0x298>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d004      	beq.n	8003eba <HAL_ADC_Init+0x15a>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a51      	ldr	r2, [pc, #324]	@ (8003ffc <HAL_ADC_Init+0x29c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <HAL_ADC_Init+0x15e>
 8003eba:	4a52      	ldr	r2, [pc, #328]	@ (8004004 <HAL_ADC_Init+0x2a4>)
 8003ebc:	e000      	b.n	8003ec0 <HAL_ADC_Init+0x160>
 8003ebe:	4a52      	ldr	r2, [pc, #328]	@ (8004008 <HAL_ADC_Init+0x2a8>)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f7ff fd30 	bl	800392c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003ecc:	f7ff fd0c 	bl	80038e8 <HAL_GetREVID>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d914      	bls.n	8003f04 <HAL_ADC_Init+0x1a4>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b10      	cmp	r3, #16
 8003ee0:	d110      	bne.n	8003f04 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	7d5b      	ldrb	r3, [r3, #21]
 8003ee6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003eec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003ef2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	7f1b      	ldrb	r3, [r3, #28]
 8003ef8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003efa:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003efc:	f043 030c 	orr.w	r3, r3, #12
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	e00d      	b.n	8003f20 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	7d5b      	ldrb	r3, [r3, #21]
 8003f08:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f0e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003f14:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	7f1b      	ldrb	r3, [r3, #28]
 8003f1a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	7f1b      	ldrb	r3, [r3, #28]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d106      	bne.n	8003f36 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	045b      	lsls	r3, r3, #17
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	4b2c      	ldr	r3, [pc, #176]	@ (800400c <HAL_ADC_Init+0x2ac>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	69b9      	ldr	r1, [r7, #24]
 8003f62:	430b      	orrs	r3, r1
 8003f64:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fed2 	bl	8003d14 <LL_ADC_REG_IsConversionOngoing>
 8003f70:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fedf 	bl	8003d3a <LL_ADC_INJ_IsConversionOngoing>
 8003f7c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d15f      	bne.n	8004044 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d15c      	bne.n	8004044 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	7d1b      	ldrb	r3, [r3, #20]
 8003f8e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8004010 <HAL_ADC_Init+0x2b0>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	69b9      	ldr	r1, [r7, #24]
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d130      	bne.n	8004018 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fba:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	4b14      	ldr	r3, [pc, #80]	@ (8004014 <HAL_ADC_Init+0x2b4>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fca:	3a01      	subs	r2, #1
 8003fcc:	0411      	lsls	r1, r2, #16
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003fd2:	4311      	orrs	r1, r2
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003fd8:	4311      	orrs	r1, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	611a      	str	r2, [r3, #16]
 8003fec:	e01c      	b.n	8004028 <HAL_ADC_Init+0x2c8>
 8003fee:	bf00      	nop
 8003ff0:	24000000 	.word	0x24000000
 8003ff4:	053e2d63 	.word	0x053e2d63
 8003ff8:	40022000 	.word	0x40022000
 8003ffc:	40022100 	.word	0x40022100
 8004000:	58026000 	.word	0x58026000
 8004004:	40022300 	.word	0x40022300
 8004008:	58026300 	.word	0x58026300
 800400c:	fff0c003 	.word	0xfff0c003
 8004010:	ffffbffc 	.word	0xffffbffc
 8004014:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fd20 	bl	8004a84 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d10c      	bne.n	8004066 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004052:	f023 010f 	bic.w	r1, r3, #15
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	1e5a      	subs	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	631a      	str	r2, [r3, #48]	@ 0x30
 8004064:	e007      	b.n	8004076 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 020f 	bic.w	r2, r2, #15
 8004074:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407a:	f023 0303 	bic.w	r3, r3, #3
 800407e:	f043 0201 	orr.w	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	655a      	str	r2, [r3, #84]	@ 0x54
 8004086:	e007      	b.n	8004098 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408c:	f043 0210 	orr.w	r2, r3, #16
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004098:	7ffb      	ldrb	r3, [r7, #31]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3724      	adds	r7, #36	@ 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd90      	pop	{r4, r7, pc}
 80040a2:	bf00      	nop

080040a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a55      	ldr	r2, [pc, #340]	@ (800420c <HAL_ADC_Start_DMA+0x168>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d004      	beq.n	80040c4 <HAL_ADC_Start_DMA+0x20>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a54      	ldr	r2, [pc, #336]	@ (8004210 <HAL_ADC_Start_DMA+0x16c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d101      	bne.n	80040c8 <HAL_ADC_Start_DMA+0x24>
 80040c4:	4b53      	ldr	r3, [pc, #332]	@ (8004214 <HAL_ADC_Start_DMA+0x170>)
 80040c6:	e000      	b.n	80040ca <HAL_ADC_Start_DMA+0x26>
 80040c8:	4b53      	ldr	r3, [pc, #332]	@ (8004218 <HAL_ADC_Start_DMA+0x174>)
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff fd8a 	bl	8003be4 <LL_ADC_GetMultimode>
 80040d0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fe1c 	bl	8003d14 <LL_ADC_REG_IsConversionOngoing>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 808c 	bne.w	80041fc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_ADC_Start_DMA+0x4e>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e087      	b.n	8004202 <HAL_ADC_Start_DMA+0x15e>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b05      	cmp	r3, #5
 8004104:	d002      	beq.n	800410c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b09      	cmp	r3, #9
 800410a:	d170      	bne.n	80041ee <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 fb9b 	bl	8004848 <ADC_Enable>
 8004112:	4603      	mov	r3, r0
 8004114:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004116:	7dfb      	ldrb	r3, [r7, #23]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d163      	bne.n	80041e4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004120:	4b3e      	ldr	r3, [pc, #248]	@ (800421c <HAL_ADC_Start_DMA+0x178>)
 8004122:	4013      	ands	r3, r2
 8004124:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a37      	ldr	r2, [pc, #220]	@ (8004210 <HAL_ADC_Start_DMA+0x16c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d002      	beq.n	800413c <HAL_ADC_Start_DMA+0x98>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	e000      	b.n	800413e <HAL_ADC_Start_DMA+0x9a>
 800413c:	4b33      	ldr	r3, [pc, #204]	@ (800420c <HAL_ADC_Start_DMA+0x168>)
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	4293      	cmp	r3, r2
 8004144:	d002      	beq.n	800414c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d105      	bne.n	8004158 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004150:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d006      	beq.n	8004172 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004168:	f023 0206 	bic.w	r2, r3, #6
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004170:	e002      	b.n	8004178 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800417c:	4a28      	ldr	r2, [pc, #160]	@ (8004220 <HAL_ADC_Start_DMA+0x17c>)
 800417e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004184:	4a27      	ldr	r2, [pc, #156]	@ (8004224 <HAL_ADC_Start_DMA+0x180>)
 8004186:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800418c:	4a26      	ldr	r2, [pc, #152]	@ (8004228 <HAL_ADC_Start_DMA+0x184>)
 800418e:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	221c      	movs	r2, #28
 8004196:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0210 	orr.w	r2, r2, #16
 80041ae:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f7ff fcb0 	bl	8003b20 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3340      	adds	r3, #64	@ 0x40
 80041ca:	4619      	mov	r1, r3
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f001 fe10 	bl	8005df4 <HAL_DMA_Start_IT>
 80041d4:	4603      	mov	r3, r0
 80041d6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff fd85 	bl	8003cec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80041e2:	e00d      	b.n	8004200 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80041ec:	e008      	b.n	8004200 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80041fa:	e001      	b.n	8004200 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
 80041fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004200:	7dfb      	ldrb	r3, [r7, #23]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40022000 	.word	0x40022000
 8004210:	40022100 	.word	0x40022100
 8004214:	40022300 	.word	0x40022300
 8004218:	58026300 	.word	0x58026300
 800421c:	fffff0fe 	.word	0xfffff0fe
 8004220:	0800495d 	.word	0x0800495d
 8004224:	08004a35 	.word	0x08004a35
 8004228:	08004a51 	.word	0x08004a51

0800422c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004268:	b590      	push	{r4, r7, lr}
 800426a:	b08d      	sub	sp, #52	@ 0x34
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a65      	ldr	r2, [pc, #404]	@ (8004418 <HAL_ADC_ConfigChannel+0x1b0>)
 8004282:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_ADC_ConfigChannel+0x2a>
 800428e:	2302      	movs	r3, #2
 8004290:	e2c7      	b.n	8004822 <HAL_ADC_ConfigChannel+0x5ba>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff fd38 	bl	8003d14 <LL_ADC_REG_IsConversionOngoing>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f040 82ac 	bne.w	8004804 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	db2c      	blt.n	800430e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d108      	bne.n	80042d2 <HAL_ADC_ConfigChannel+0x6a>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	0e9b      	lsrs	r3, r3, #26
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	2201      	movs	r2, #1
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	e016      	b.n	8004300 <HAL_ADC_ConfigChannel+0x98>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	613b      	str	r3, [r7, #16]
  return result;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80042ea:	2320      	movs	r3, #32
 80042ec:	e003      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	fab3 f383 	clz	r3, r3
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	2201      	movs	r2, #1
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	69d1      	ldr	r1, [r2, #28]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	430b      	orrs	r3, r1
 800430c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	f7ff fbd4 	bl	8003ac8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fcf5 	bl	8003d14 <LL_ADC_REG_IsConversionOngoing>
 800432a:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fd02 	bl	8003d3a <LL_ADC_INJ_IsConversionOngoing>
 8004336:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433a:	2b00      	cmp	r3, #0
 800433c:	f040 80b8 	bne.w	80044b0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	2b00      	cmp	r3, #0
 8004344:	f040 80b4 	bne.w	80044b0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6819      	ldr	r1, [r3, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	461a      	mov	r2, r3
 8004356:	f7ff fbf6 	bl	8003b46 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800435a:	4b30      	ldr	r3, [pc, #192]	@ (800441c <HAL_ADC_ConfigChannel+0x1b4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004362:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004366:	d10b      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x118>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	e01d      	b.n	80043bc <HAL_ADC_ConfigChannel+0x154>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10b      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x13e>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	695a      	ldr	r2, [r3, #20]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	089b      	lsrs	r3, r3, #2
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	e00a      	b.n	80043bc <HAL_ADC_ConfigChannel+0x154>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	089b      	lsrs	r3, r3, #2
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d02c      	beq.n	8004420 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6919      	ldr	r1, [r3, #16]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	f7ff fb11 	bl	80039fa <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	6919      	ldr	r1, [r3, #16]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	7e5b      	ldrb	r3, [r3, #25]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d102      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x186>
 80043e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80043ec:	e000      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x188>
 80043ee:	2300      	movs	r3, #0
 80043f0:	461a      	mov	r2, r3
 80043f2:	f7ff fb3b 	bl	8003a6c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6919      	ldr	r1, [r3, #16]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	7e1b      	ldrb	r3, [r3, #24]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d102      	bne.n	800440c <HAL_ADC_ConfigChannel+0x1a4>
 8004406:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800440a:	e000      	b.n	800440e <HAL_ADC_ConfigChannel+0x1a6>
 800440c:	2300      	movs	r3, #0
 800440e:	461a      	mov	r2, r3
 8004410:	f7ff fb13 	bl	8003a3a <LL_ADC_SetDataRightShift>
 8004414:	e04c      	b.n	80044b0 <HAL_ADC_ConfigChannel+0x248>
 8004416:	bf00      	nop
 8004418:	47ff0000 	.word	0x47ff0000
 800441c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004426:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	069b      	lsls	r3, r3, #26
 8004430:	429a      	cmp	r2, r3
 8004432:	d107      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004442:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800444a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	069b      	lsls	r3, r3, #26
 8004454:	429a      	cmp	r2, r3
 8004456:	d107      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004466:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800446e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	069b      	lsls	r3, r3, #26
 8004478:	429a      	cmp	r2, r3
 800447a:	d107      	bne.n	800448c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800448a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004492:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	069b      	lsls	r3, r3, #26
 800449c:	429a      	cmp	r2, r3
 800449e:	d107      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80044ae:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fc05 	bl	8003cc4 <LL_ADC_IsEnabled>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f040 81aa 	bne.w	8004816 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6819      	ldr	r1, [r3, #0]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	461a      	mov	r2, r3
 80044d0:	f7ff fb64 	bl	8003b9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4a87      	ldr	r2, [pc, #540]	@ (80046f8 <HAL_ADC_ConfigChannel+0x490>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	f040 809a 	bne.w	8004614 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4984      	ldr	r1, [pc, #528]	@ (80046fc <HAL_ADC_ConfigChannel+0x494>)
 80044ea:	428b      	cmp	r3, r1
 80044ec:	d147      	bne.n	800457e <HAL_ADC_ConfigChannel+0x316>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4983      	ldr	r1, [pc, #524]	@ (8004700 <HAL_ADC_ConfigChannel+0x498>)
 80044f4:	428b      	cmp	r3, r1
 80044f6:	d040      	beq.n	800457a <HAL_ADC_ConfigChannel+0x312>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4981      	ldr	r1, [pc, #516]	@ (8004704 <HAL_ADC_ConfigChannel+0x49c>)
 80044fe:	428b      	cmp	r3, r1
 8004500:	d039      	beq.n	8004576 <HAL_ADC_ConfigChannel+0x30e>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4980      	ldr	r1, [pc, #512]	@ (8004708 <HAL_ADC_ConfigChannel+0x4a0>)
 8004508:	428b      	cmp	r3, r1
 800450a:	d032      	beq.n	8004572 <HAL_ADC_ConfigChannel+0x30a>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	497e      	ldr	r1, [pc, #504]	@ (800470c <HAL_ADC_ConfigChannel+0x4a4>)
 8004512:	428b      	cmp	r3, r1
 8004514:	d02b      	beq.n	800456e <HAL_ADC_ConfigChannel+0x306>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	497d      	ldr	r1, [pc, #500]	@ (8004710 <HAL_ADC_ConfigChannel+0x4a8>)
 800451c:	428b      	cmp	r3, r1
 800451e:	d024      	beq.n	800456a <HAL_ADC_ConfigChannel+0x302>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	497b      	ldr	r1, [pc, #492]	@ (8004714 <HAL_ADC_ConfigChannel+0x4ac>)
 8004526:	428b      	cmp	r3, r1
 8004528:	d01d      	beq.n	8004566 <HAL_ADC_ConfigChannel+0x2fe>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	497a      	ldr	r1, [pc, #488]	@ (8004718 <HAL_ADC_ConfigChannel+0x4b0>)
 8004530:	428b      	cmp	r3, r1
 8004532:	d016      	beq.n	8004562 <HAL_ADC_ConfigChannel+0x2fa>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4978      	ldr	r1, [pc, #480]	@ (800471c <HAL_ADC_ConfigChannel+0x4b4>)
 800453a:	428b      	cmp	r3, r1
 800453c:	d00f      	beq.n	800455e <HAL_ADC_ConfigChannel+0x2f6>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4977      	ldr	r1, [pc, #476]	@ (8004720 <HAL_ADC_ConfigChannel+0x4b8>)
 8004544:	428b      	cmp	r3, r1
 8004546:	d008      	beq.n	800455a <HAL_ADC_ConfigChannel+0x2f2>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4975      	ldr	r1, [pc, #468]	@ (8004724 <HAL_ADC_ConfigChannel+0x4bc>)
 800454e:	428b      	cmp	r3, r1
 8004550:	d101      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x2ee>
 8004552:	4b75      	ldr	r3, [pc, #468]	@ (8004728 <HAL_ADC_ConfigChannel+0x4c0>)
 8004554:	e05a      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 8004556:	2300      	movs	r3, #0
 8004558:	e058      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 800455a:	4b74      	ldr	r3, [pc, #464]	@ (800472c <HAL_ADC_ConfigChannel+0x4c4>)
 800455c:	e056      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 800455e:	4b74      	ldr	r3, [pc, #464]	@ (8004730 <HAL_ADC_ConfigChannel+0x4c8>)
 8004560:	e054      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 8004562:	4b6e      	ldr	r3, [pc, #440]	@ (800471c <HAL_ADC_ConfigChannel+0x4b4>)
 8004564:	e052      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 8004566:	4b6c      	ldr	r3, [pc, #432]	@ (8004718 <HAL_ADC_ConfigChannel+0x4b0>)
 8004568:	e050      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 800456a:	4b72      	ldr	r3, [pc, #456]	@ (8004734 <HAL_ADC_ConfigChannel+0x4cc>)
 800456c:	e04e      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 800456e:	4b72      	ldr	r3, [pc, #456]	@ (8004738 <HAL_ADC_ConfigChannel+0x4d0>)
 8004570:	e04c      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 8004572:	4b72      	ldr	r3, [pc, #456]	@ (800473c <HAL_ADC_ConfigChannel+0x4d4>)
 8004574:	e04a      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 8004576:	4b72      	ldr	r3, [pc, #456]	@ (8004740 <HAL_ADC_ConfigChannel+0x4d8>)
 8004578:	e048      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 800457a:	2301      	movs	r3, #1
 800457c:	e046      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4970      	ldr	r1, [pc, #448]	@ (8004744 <HAL_ADC_ConfigChannel+0x4dc>)
 8004584:	428b      	cmp	r3, r1
 8004586:	d140      	bne.n	800460a <HAL_ADC_ConfigChannel+0x3a2>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	495c      	ldr	r1, [pc, #368]	@ (8004700 <HAL_ADC_ConfigChannel+0x498>)
 800458e:	428b      	cmp	r3, r1
 8004590:	d039      	beq.n	8004606 <HAL_ADC_ConfigChannel+0x39e>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	495b      	ldr	r1, [pc, #364]	@ (8004704 <HAL_ADC_ConfigChannel+0x49c>)
 8004598:	428b      	cmp	r3, r1
 800459a:	d032      	beq.n	8004602 <HAL_ADC_ConfigChannel+0x39a>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4959      	ldr	r1, [pc, #356]	@ (8004708 <HAL_ADC_ConfigChannel+0x4a0>)
 80045a2:	428b      	cmp	r3, r1
 80045a4:	d02b      	beq.n	80045fe <HAL_ADC_ConfigChannel+0x396>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4958      	ldr	r1, [pc, #352]	@ (800470c <HAL_ADC_ConfigChannel+0x4a4>)
 80045ac:	428b      	cmp	r3, r1
 80045ae:	d024      	beq.n	80045fa <HAL_ADC_ConfigChannel+0x392>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4956      	ldr	r1, [pc, #344]	@ (8004710 <HAL_ADC_ConfigChannel+0x4a8>)
 80045b6:	428b      	cmp	r3, r1
 80045b8:	d01d      	beq.n	80045f6 <HAL_ADC_ConfigChannel+0x38e>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4955      	ldr	r1, [pc, #340]	@ (8004714 <HAL_ADC_ConfigChannel+0x4ac>)
 80045c0:	428b      	cmp	r3, r1
 80045c2:	d016      	beq.n	80045f2 <HAL_ADC_ConfigChannel+0x38a>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4953      	ldr	r1, [pc, #332]	@ (8004718 <HAL_ADC_ConfigChannel+0x4b0>)
 80045ca:	428b      	cmp	r3, r1
 80045cc:	d00f      	beq.n	80045ee <HAL_ADC_ConfigChannel+0x386>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4952      	ldr	r1, [pc, #328]	@ (800471c <HAL_ADC_ConfigChannel+0x4b4>)
 80045d4:	428b      	cmp	r3, r1
 80045d6:	d008      	beq.n	80045ea <HAL_ADC_ConfigChannel+0x382>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4951      	ldr	r1, [pc, #324]	@ (8004724 <HAL_ADC_ConfigChannel+0x4bc>)
 80045de:	428b      	cmp	r3, r1
 80045e0:	d101      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x37e>
 80045e2:	4b51      	ldr	r3, [pc, #324]	@ (8004728 <HAL_ADC_ConfigChannel+0x4c0>)
 80045e4:	e012      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 80045e6:	2300      	movs	r3, #0
 80045e8:	e010      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 80045ea:	4b51      	ldr	r3, [pc, #324]	@ (8004730 <HAL_ADC_ConfigChannel+0x4c8>)
 80045ec:	e00e      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 80045ee:	4b4b      	ldr	r3, [pc, #300]	@ (800471c <HAL_ADC_ConfigChannel+0x4b4>)
 80045f0:	e00c      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 80045f2:	4b49      	ldr	r3, [pc, #292]	@ (8004718 <HAL_ADC_ConfigChannel+0x4b0>)
 80045f4:	e00a      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 80045f6:	4b4f      	ldr	r3, [pc, #316]	@ (8004734 <HAL_ADC_ConfigChannel+0x4cc>)
 80045f8:	e008      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 80045fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004738 <HAL_ADC_ConfigChannel+0x4d0>)
 80045fc:	e006      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 80045fe:	4b4f      	ldr	r3, [pc, #316]	@ (800473c <HAL_ADC_ConfigChannel+0x4d4>)
 8004600:	e004      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 8004602:	4b4f      	ldr	r3, [pc, #316]	@ (8004740 <HAL_ADC_ConfigChannel+0x4d8>)
 8004604:	e002      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <HAL_ADC_ConfigChannel+0x3a4>
 800460a:	2300      	movs	r3, #0
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f7ff f9c0 	bl	8003994 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f280 80fc 	bge.w	8004816 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a36      	ldr	r2, [pc, #216]	@ (80046fc <HAL_ADC_ConfigChannel+0x494>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_ADC_ConfigChannel+0x3ca>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a45      	ldr	r2, [pc, #276]	@ (8004744 <HAL_ADC_ConfigChannel+0x4dc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d101      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x3ce>
 8004632:	4b45      	ldr	r3, [pc, #276]	@ (8004748 <HAL_ADC_ConfigChannel+0x4e0>)
 8004634:	e000      	b.n	8004638 <HAL_ADC_ConfigChannel+0x3d0>
 8004636:	4b45      	ldr	r3, [pc, #276]	@ (800474c <HAL_ADC_ConfigChannel+0x4e4>)
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff f99d 	bl	8003978 <LL_ADC_GetCommonPathInternalCh>
 800463e:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a2d      	ldr	r2, [pc, #180]	@ (80046fc <HAL_ADC_ConfigChannel+0x494>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d004      	beq.n	8004654 <HAL_ADC_ConfigChannel+0x3ec>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a3d      	ldr	r2, [pc, #244]	@ (8004744 <HAL_ADC_ConfigChannel+0x4dc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d10e      	bne.n	8004672 <HAL_ADC_ConfigChannel+0x40a>
 8004654:	4829      	ldr	r0, [pc, #164]	@ (80046fc <HAL_ADC_ConfigChannel+0x494>)
 8004656:	f7ff fb35 	bl	8003cc4 <LL_ADC_IsEnabled>
 800465a:	4604      	mov	r4, r0
 800465c:	4839      	ldr	r0, [pc, #228]	@ (8004744 <HAL_ADC_ConfigChannel+0x4dc>)
 800465e:	f7ff fb31 	bl	8003cc4 <LL_ADC_IsEnabled>
 8004662:	4603      	mov	r3, r0
 8004664:	4323      	orrs	r3, r4
 8004666:	2b00      	cmp	r3, #0
 8004668:	bf0c      	ite	eq
 800466a:	2301      	moveq	r3, #1
 800466c:	2300      	movne	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	e008      	b.n	8004684 <HAL_ADC_ConfigChannel+0x41c>
 8004672:	4837      	ldr	r0, [pc, #220]	@ (8004750 <HAL_ADC_ConfigChannel+0x4e8>)
 8004674:	f7ff fb26 	bl	8003cc4 <LL_ADC_IsEnabled>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80b3 	beq.w	80047f0 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a31      	ldr	r2, [pc, #196]	@ (8004754 <HAL_ADC_ConfigChannel+0x4ec>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d165      	bne.n	8004760 <HAL_ADC_ConfigChannel+0x4f8>
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d160      	bne.n	8004760 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2b      	ldr	r2, [pc, #172]	@ (8004750 <HAL_ADC_ConfigChannel+0x4e8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	f040 80b6 	bne.w	8004816 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a13      	ldr	r2, [pc, #76]	@ (80046fc <HAL_ADC_ConfigChannel+0x494>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d004      	beq.n	80046be <HAL_ADC_ConfigChannel+0x456>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a22      	ldr	r2, [pc, #136]	@ (8004744 <HAL_ADC_ConfigChannel+0x4dc>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x45a>
 80046be:	4a22      	ldr	r2, [pc, #136]	@ (8004748 <HAL_ADC_ConfigChannel+0x4e0>)
 80046c0:	e000      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x45c>
 80046c2:	4a22      	ldr	r2, [pc, #136]	@ (800474c <HAL_ADC_ConfigChannel+0x4e4>)
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f7ff f940 	bl	8003952 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046d2:	4b21      	ldr	r3, [pc, #132]	@ (8004758 <HAL_ADC_ConfigChannel+0x4f0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	4a20      	ldr	r2, [pc, #128]	@ (800475c <HAL_ADC_ConfigChannel+0x4f4>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	099b      	lsrs	r3, r3, #6
 80046e0:	3301      	adds	r3, #1
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80046e6:	e002      	b.n	80046ee <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f9      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046f4:	e08f      	b.n	8004816 <HAL_ADC_ConfigChannel+0x5ae>
 80046f6:	bf00      	nop
 80046f8:	47ff0000 	.word	0x47ff0000
 80046fc:	40022000 	.word	0x40022000
 8004700:	04300002 	.word	0x04300002
 8004704:	08600004 	.word	0x08600004
 8004708:	0c900008 	.word	0x0c900008
 800470c:	10c00010 	.word	0x10c00010
 8004710:	14f00020 	.word	0x14f00020
 8004714:	2a000400 	.word	0x2a000400
 8004718:	2e300800 	.word	0x2e300800
 800471c:	32601000 	.word	0x32601000
 8004720:	43210000 	.word	0x43210000
 8004724:	4b840000 	.word	0x4b840000
 8004728:	4fb80000 	.word	0x4fb80000
 800472c:	47520000 	.word	0x47520000
 8004730:	36902000 	.word	0x36902000
 8004734:	25b00200 	.word	0x25b00200
 8004738:	21800100 	.word	0x21800100
 800473c:	1d500080 	.word	0x1d500080
 8004740:	19200040 	.word	0x19200040
 8004744:	40022100 	.word	0x40022100
 8004748:	40022300 	.word	0x40022300
 800474c:	58026300 	.word	0x58026300
 8004750:	58026000 	.word	0x58026000
 8004754:	cb840000 	.word	0xcb840000
 8004758:	24000000 	.word	0x24000000
 800475c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a31      	ldr	r2, [pc, #196]	@ (800482c <HAL_ADC_ConfigChannel+0x5c4>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d11e      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x540>
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d119      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a2d      	ldr	r2, [pc, #180]	@ (8004830 <HAL_ADC_ConfigChannel+0x5c8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d14b      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a2c      	ldr	r2, [pc, #176]	@ (8004834 <HAL_ADC_ConfigChannel+0x5cc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_ADC_ConfigChannel+0x52a>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a2a      	ldr	r2, [pc, #168]	@ (8004838 <HAL_ADC_ConfigChannel+0x5d0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d101      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x52e>
 8004792:	4a2a      	ldr	r2, [pc, #168]	@ (800483c <HAL_ADC_ConfigChannel+0x5d4>)
 8004794:	e000      	b.n	8004798 <HAL_ADC_ConfigChannel+0x530>
 8004796:	4a2a      	ldr	r2, [pc, #168]	@ (8004840 <HAL_ADC_ConfigChannel+0x5d8>)
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f7ff f8d6 	bl	8003952 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047a6:	e036      	b.n	8004816 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a25      	ldr	r2, [pc, #148]	@ (8004844 <HAL_ADC_ConfigChannel+0x5dc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d131      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x5ae>
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d12c      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004830 <HAL_ADC_ConfigChannel+0x5c8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d127      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004834 <HAL_ADC_ConfigChannel+0x5cc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d004      	beq.n	80047da <HAL_ADC_ConfigChannel+0x572>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a18      	ldr	r2, [pc, #96]	@ (8004838 <HAL_ADC_ConfigChannel+0x5d0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d101      	bne.n	80047de <HAL_ADC_ConfigChannel+0x576>
 80047da:	4a18      	ldr	r2, [pc, #96]	@ (800483c <HAL_ADC_ConfigChannel+0x5d4>)
 80047dc:	e000      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x578>
 80047de:	4a18      	ldr	r2, [pc, #96]	@ (8004840 <HAL_ADC_ConfigChannel+0x5d8>)
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047e6:	4619      	mov	r1, r3
 80047e8:	4610      	mov	r0, r2
 80047ea:	f7ff f8b2 	bl	8003952 <LL_ADC_SetCommonPathInternalCh>
 80047ee:	e012      	b.n	8004816 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f4:	f043 0220 	orr.w	r2, r3, #32
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004802:	e008      	b.n	8004816 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004808:	f043 0220 	orr.w	r2, r3, #32
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800481e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004822:	4618      	mov	r0, r3
 8004824:	3734      	adds	r7, #52	@ 0x34
 8004826:	46bd      	mov	sp, r7
 8004828:	bd90      	pop	{r4, r7, pc}
 800482a:	bf00      	nop
 800482c:	c7520000 	.word	0xc7520000
 8004830:	58026000 	.word	0x58026000
 8004834:	40022000 	.word	0x40022000
 8004838:	40022100 	.word	0x40022100
 800483c:	40022300 	.word	0x40022300
 8004840:	58026300 	.word	0x58026300
 8004844:	cfb80000 	.word	0xcfb80000

08004848 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff fa35 	bl	8003cc4 <LL_ADC_IsEnabled>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d16e      	bne.n	800493e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	4b38      	ldr	r3, [pc, #224]	@ (8004948 <ADC_Enable+0x100>)
 8004868:	4013      	ands	r3, r2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00d      	beq.n	800488a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004872:	f043 0210 	orr.w	r2, r3, #16
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487e:	f043 0201 	orr.w	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e05a      	b.n	8004940 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fa04 	bl	8003c9c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004894:	f7fe fff8 	bl	8003888 <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a2b      	ldr	r2, [pc, #172]	@ (800494c <ADC_Enable+0x104>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <ADC_Enable+0x66>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a29      	ldr	r2, [pc, #164]	@ (8004950 <ADC_Enable+0x108>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d101      	bne.n	80048b2 <ADC_Enable+0x6a>
 80048ae:	4b29      	ldr	r3, [pc, #164]	@ (8004954 <ADC_Enable+0x10c>)
 80048b0:	e000      	b.n	80048b4 <ADC_Enable+0x6c>
 80048b2:	4b29      	ldr	r3, [pc, #164]	@ (8004958 <ADC_Enable+0x110>)
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff f995 	bl	8003be4 <LL_ADC_GetMultimode>
 80048ba:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a23      	ldr	r2, [pc, #140]	@ (8004950 <ADC_Enable+0x108>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d002      	beq.n	80048cc <ADC_Enable+0x84>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	e000      	b.n	80048ce <ADC_Enable+0x86>
 80048cc:	4b1f      	ldr	r3, [pc, #124]	@ (800494c <ADC_Enable+0x104>)
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d02c      	beq.n	8004930 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d130      	bne.n	800493e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048dc:	e028      	b.n	8004930 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff f9ee 	bl	8003cc4 <LL_ADC_IsEnabled>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff f9d2 	bl	8003c9c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048f8:	f7fe ffc6 	bl	8003888 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d914      	bls.n	8004930 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b01      	cmp	r3, #1
 8004912:	d00d      	beq.n	8004930 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004918:	f043 0210 	orr.w	r2, r3, #16
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004924:	f043 0201 	orr.w	r2, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e007      	b.n	8004940 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b01      	cmp	r3, #1
 800493c:	d1cf      	bne.n	80048de <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	8000003f 	.word	0x8000003f
 800494c:	40022000 	.word	0x40022000
 8004950:	40022100 	.word	0x40022100
 8004954:	40022300 	.word	0x40022300
 8004958:	58026300 	.word	0x58026300

0800495c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004968:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004972:	2b00      	cmp	r3, #0
 8004974:	d14b      	bne.n	8004a0e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b00      	cmp	r3, #0
 800498e:	d021      	beq.n	80049d4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff f884 	bl	8003aa2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d032      	beq.n	8004a06 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d12b      	bne.n	8004a06 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d11f      	bne.n	8004a06 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ca:	f043 0201 	orr.w	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80049d2:	e018      	b.n	8004a06 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d111      	bne.n	8004a06 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d105      	bne.n	8004a06 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fe:	f043 0201 	orr.w	r2, r3, #1
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff fc10 	bl	800422c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a0c:	e00e      	b.n	8004a2c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a12:	f003 0310 	and.w	r3, r3, #16
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f7ff fc1a 	bl	8004254 <HAL_ADC_ErrorCallback>
}
 8004a20:	e004      	b.n	8004a2c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	4798      	blx	r3
}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f7ff fbfc 	bl	8004240 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6e:	f043 0204 	orr.w	r2, r3, #4
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f7ff fbec 	bl	8004254 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a7c:	bf00      	nop
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a7a      	ldr	r2, [pc, #488]	@ (8004c7c <ADC_ConfigureBoostMode+0x1f8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <ADC_ConfigureBoostMode+0x1c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a79      	ldr	r2, [pc, #484]	@ (8004c80 <ADC_ConfigureBoostMode+0x1fc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d109      	bne.n	8004ab4 <ADC_ConfigureBoostMode+0x30>
 8004aa0:	4b78      	ldr	r3, [pc, #480]	@ (8004c84 <ADC_ConfigureBoostMode+0x200>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf14      	ite	ne
 8004aac:	2301      	movne	r3, #1
 8004aae:	2300      	moveq	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e008      	b.n	8004ac6 <ADC_ConfigureBoostMode+0x42>
 8004ab4:	4b74      	ldr	r3, [pc, #464]	@ (8004c88 <ADC_ConfigureBoostMode+0x204>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf14      	ite	ne
 8004ac0:	2301      	movne	r3, #1
 8004ac2:	2300      	moveq	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d01c      	beq.n	8004b04 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004aca:	f004 f98f 	bl	8008dec <HAL_RCC_GetHCLKFreq>
 8004ace:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ad8:	d010      	beq.n	8004afc <ADC_ConfigureBoostMode+0x78>
 8004ada:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ade:	d873      	bhi.n	8004bc8 <ADC_ConfigureBoostMode+0x144>
 8004ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae4:	d002      	beq.n	8004aec <ADC_ConfigureBoostMode+0x68>
 8004ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aea:	d16d      	bne.n	8004bc8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	0c1b      	lsrs	r3, r3, #16
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af8:	60fb      	str	r3, [r7, #12]
        break;
 8004afa:	e068      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	089b      	lsrs	r3, r3, #2
 8004b00:	60fb      	str	r3, [r7, #12]
        break;
 8004b02:	e064      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004b04:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004b08:	f04f 0100 	mov.w	r1, #0
 8004b0c:	f005 fbd4 	bl	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b10:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004b1a:	d051      	beq.n	8004bc0 <ADC_ConfigureBoostMode+0x13c>
 8004b1c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004b20:	d854      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b22:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004b26:	d047      	beq.n	8004bb8 <ADC_ConfigureBoostMode+0x134>
 8004b28:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004b2c:	d84e      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b2e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004b32:	d03d      	beq.n	8004bb0 <ADC_ConfigureBoostMode+0x12c>
 8004b34:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004b38:	d848      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b3e:	d033      	beq.n	8004ba8 <ADC_ConfigureBoostMode+0x124>
 8004b40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b44:	d842      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b46:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004b4a:	d029      	beq.n	8004ba0 <ADC_ConfigureBoostMode+0x11c>
 8004b4c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004b50:	d83c      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b52:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004b56:	d01a      	beq.n	8004b8e <ADC_ConfigureBoostMode+0x10a>
 8004b58:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004b5c:	d836      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b5e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b62:	d014      	beq.n	8004b8e <ADC_ConfigureBoostMode+0x10a>
 8004b64:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b68:	d830      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b6e:	d00e      	beq.n	8004b8e <ADC_ConfigureBoostMode+0x10a>
 8004b70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b74:	d82a      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b76:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b7a:	d008      	beq.n	8004b8e <ADC_ConfigureBoostMode+0x10a>
 8004b7c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b80:	d824      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b86:	d002      	beq.n	8004b8e <ADC_ConfigureBoostMode+0x10a>
 8004b88:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b8c:	d11e      	bne.n	8004bcc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	0c9b      	lsrs	r3, r3, #18
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	60fb      	str	r3, [r7, #12]
        break;
 8004b9e:	e016      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	091b      	lsrs	r3, r3, #4
 8004ba4:	60fb      	str	r3, [r7, #12]
        break;
 8004ba6:	e012      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	60fb      	str	r3, [r7, #12]
        break;
 8004bae:	e00e      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	099b      	lsrs	r3, r3, #6
 8004bb4:	60fb      	str	r3, [r7, #12]
        break;
 8004bb6:	e00a      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	09db      	lsrs	r3, r3, #7
 8004bbc:	60fb      	str	r3, [r7, #12]
        break;
 8004bbe:	e006      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	0a1b      	lsrs	r3, r3, #8
 8004bc4:	60fb      	str	r3, [r7, #12]
        break;
 8004bc6:	e002      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
        break;
 8004bc8:	bf00      	nop
 8004bca:	e000      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004bcc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004bce:	f7fe fe8b 	bl	80038e8 <HAL_GetREVID>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d815      	bhi.n	8004c08 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4a2b      	ldr	r2, [pc, #172]	@ (8004c8c <ADC_ConfigureBoostMode+0x208>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d908      	bls.n	8004bf6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bf2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004bf4:	e03e      	b.n	8004c74 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c04:	609a      	str	r2, [r3, #8]
}
 8004c06:	e035      	b.n	8004c74 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	085b      	lsrs	r3, r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4a1f      	ldr	r2, [pc, #124]	@ (8004c90 <ADC_ConfigureBoostMode+0x20c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d808      	bhi.n	8004c28 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004c24:	609a      	str	r2, [r3, #8]
}
 8004c26:	e025      	b.n	8004c74 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004c94 <ADC_ConfigureBoostMode+0x210>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d80a      	bhi.n	8004c46 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c42:	609a      	str	r2, [r3, #8]
}
 8004c44:	e016      	b.n	8004c74 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4a13      	ldr	r2, [pc, #76]	@ (8004c98 <ADC_ConfigureBoostMode+0x214>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d80a      	bhi.n	8004c64 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c60:	609a      	str	r2, [r3, #8]
}
 8004c62:	e007      	b.n	8004c74 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004c72:	609a      	str	r2, [r3, #8]
}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40022000 	.word	0x40022000
 8004c80:	40022100 	.word	0x40022100
 8004c84:	40022300 	.word	0x40022300
 8004c88:	58026300 	.word	0x58026300
 8004c8c:	01312d00 	.word	0x01312d00
 8004c90:	005f5e10 	.word	0x005f5e10
 8004c94:	00bebc20 	.word	0x00bebc20
 8004c98:	017d7840 	.word	0x017d7840

08004c9c <LL_ADC_IsEnabled>:
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <LL_ADC_IsEnabled+0x18>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <LL_ADC_IsEnabled+0x1a>
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d101      	bne.n	8004cda <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ce8:	b590      	push	{r4, r7, lr}
 8004cea:	b09f      	sub	sp, #124	@ 0x7c
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e0be      	b.n	8004e84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a5c      	ldr	r2, [pc, #368]	@ (8004e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d102      	bne.n	8004d26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d20:	4b5b      	ldr	r3, [pc, #364]	@ (8004e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d22:	60bb      	str	r3, [r7, #8]
 8004d24:	e001      	b.n	8004d2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d34:	f043 0220 	orr.w	r2, r3, #32
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e09d      	b.n	8004e84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff ffb9 	bl	8004cc2 <LL_ADC_REG_IsConversionOngoing>
 8004d50:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff ffb3 	bl	8004cc2 <LL_ADC_REG_IsConversionOngoing>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d17f      	bne.n	8004e62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004d62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d17c      	bne.n	8004e62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a47      	ldr	r2, [pc, #284]	@ (8004e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d004      	beq.n	8004d7c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a46      	ldr	r2, [pc, #280]	@ (8004e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d101      	bne.n	8004d80 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004d7c:	4b45      	ldr	r3, [pc, #276]	@ (8004e94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d7e:	e000      	b.n	8004d82 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004d80:	4b45      	ldr	r3, [pc, #276]	@ (8004e98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d82:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d039      	beq.n	8004e00 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d9c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a3a      	ldr	r2, [pc, #232]	@ (8004e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a38      	ldr	r2, [pc, #224]	@ (8004e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d10e      	bne.n	8004dd0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004db2:	4836      	ldr	r0, [pc, #216]	@ (8004e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004db4:	f7ff ff72 	bl	8004c9c <LL_ADC_IsEnabled>
 8004db8:	4604      	mov	r4, r0
 8004dba:	4835      	ldr	r0, [pc, #212]	@ (8004e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004dbc:	f7ff ff6e 	bl	8004c9c <LL_ADC_IsEnabled>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4323      	orrs	r3, r4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e008      	b.n	8004de2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004dd0:	4832      	ldr	r0, [pc, #200]	@ (8004e9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004dd2:	f7ff ff63 	bl	8004c9c <LL_ADC_IsEnabled>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d047      	beq.n	8004e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	4b2d      	ldr	r3, [pc, #180]	@ (8004ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	6811      	ldr	r1, [r2, #0]
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	6892      	ldr	r2, [r2, #8]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dfc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004dfe:	e03a      	b.n	8004e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004e00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1e      	ldr	r2, [pc, #120]	@ (8004e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d004      	beq.n	8004e20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8004e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d10e      	bne.n	8004e3e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004e20:	481a      	ldr	r0, [pc, #104]	@ (8004e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e22:	f7ff ff3b 	bl	8004c9c <LL_ADC_IsEnabled>
 8004e26:	4604      	mov	r4, r0
 8004e28:	4819      	ldr	r0, [pc, #100]	@ (8004e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e2a:	f7ff ff37 	bl	8004c9c <LL_ADC_IsEnabled>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4323      	orrs	r3, r4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bf0c      	ite	eq
 8004e36:	2301      	moveq	r3, #1
 8004e38:	2300      	movne	r3, #0
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	e008      	b.n	8004e50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004e3e:	4817      	ldr	r0, [pc, #92]	@ (8004e9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004e40:	f7ff ff2c 	bl	8004c9c <LL_ADC_IsEnabled>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf0c      	ite	eq
 8004e4a:	2301      	moveq	r3, #1
 8004e4c:	2300      	movne	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d010      	beq.n	8004e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	4b11      	ldr	r3, [pc, #68]	@ (8004ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e5e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e60:	e009      	b.n	8004e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e66:	f043 0220 	orr.w	r2, r3, #32
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004e74:	e000      	b.n	8004e78 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e76:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e80:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	377c      	adds	r7, #124	@ 0x7c
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd90      	pop	{r4, r7, pc}
 8004e8c:	40022000 	.word	0x40022000
 8004e90:	40022100 	.word	0x40022100
 8004e94:	40022300 	.word	0x40022300
 8004e98:	58026300 	.word	0x58026300
 8004e9c:	58026000 	.word	0x58026000
 8004ea0:	fffff0e0 	.word	0xfffff0e0

08004ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee4 <__NVIC_SetPriorityGrouping+0x40>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ecc:	4b06      	ldr	r3, [pc, #24]	@ (8004ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ed2:	4a04      	ldr	r2, [pc, #16]	@ (8004ee4 <__NVIC_SetPriorityGrouping+0x40>)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	60d3      	str	r3, [r2, #12]
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	e000ed00 	.word	0xe000ed00
 8004ee8:	05fa0000 	.word	0x05fa0000

08004eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ef0:	4b04      	ldr	r3, [pc, #16]	@ (8004f04 <__NVIC_GetPriorityGrouping+0x18>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	0a1b      	lsrs	r3, r3, #8
 8004ef6:	f003 0307 	and.w	r3, r3, #7
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	e000ed00 	.word	0xe000ed00

08004f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	db0b      	blt.n	8004f32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	f003 021f 	and.w	r2, r3, #31
 8004f20:	4907      	ldr	r1, [pc, #28]	@ (8004f40 <__NVIC_EnableIRQ+0x38>)
 8004f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	2001      	movs	r0, #1
 8004f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	e000e100 	.word	0xe000e100

08004f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	6039      	str	r1, [r7, #0]
 8004f4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	db0a      	blt.n	8004f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	490c      	ldr	r1, [pc, #48]	@ (8004f90 <__NVIC_SetPriority+0x4c>)
 8004f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f62:	0112      	lsls	r2, r2, #4
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	440b      	add	r3, r1
 8004f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f6c:	e00a      	b.n	8004f84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	4908      	ldr	r1, [pc, #32]	@ (8004f94 <__NVIC_SetPriority+0x50>)
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	3b04      	subs	r3, #4
 8004f7c:	0112      	lsls	r2, r2, #4
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	440b      	add	r3, r1
 8004f82:	761a      	strb	r2, [r3, #24]
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	e000e100 	.word	0xe000e100
 8004f94:	e000ed00 	.word	0xe000ed00

08004f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b089      	sub	sp, #36	@ 0x24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f1c3 0307 	rsb	r3, r3, #7
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	bf28      	it	cs
 8004fb6:	2304      	movcs	r3, #4
 8004fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	2b06      	cmp	r3, #6
 8004fc0:	d902      	bls.n	8004fc8 <NVIC_EncodePriority+0x30>
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	3b03      	subs	r3, #3
 8004fc6:	e000      	b.n	8004fca <NVIC_EncodePriority+0x32>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	43da      	mvns	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	401a      	ands	r2, r3
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fea:	43d9      	mvns	r1, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ff0:	4313      	orrs	r3, r2
         );
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3724      	adds	r7, #36	@ 0x24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3b01      	subs	r3, #1
 800500c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005010:	d301      	bcc.n	8005016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005012:	2301      	movs	r3, #1
 8005014:	e00f      	b.n	8005036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005016:	4a0a      	ldr	r2, [pc, #40]	@ (8005040 <SysTick_Config+0x40>)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3b01      	subs	r3, #1
 800501c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800501e:	210f      	movs	r1, #15
 8005020:	f04f 30ff 	mov.w	r0, #4294967295
 8005024:	f7ff ff8e 	bl	8004f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005028:	4b05      	ldr	r3, [pc, #20]	@ (8005040 <SysTick_Config+0x40>)
 800502a:	2200      	movs	r2, #0
 800502c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800502e:	4b04      	ldr	r3, [pc, #16]	@ (8005040 <SysTick_Config+0x40>)
 8005030:	2207      	movs	r2, #7
 8005032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	e000e010 	.word	0xe000e010

08005044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff ff29 	bl	8004ea4 <__NVIC_SetPriorityGrouping>
}
 8005052:	bf00      	nop
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b086      	sub	sp, #24
 800505e:	af00      	add	r7, sp, #0
 8005060:	4603      	mov	r3, r0
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005068:	f7ff ff40 	bl	8004eec <__NVIC_GetPriorityGrouping>
 800506c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	6978      	ldr	r0, [r7, #20]
 8005074:	f7ff ff90 	bl	8004f98 <NVIC_EncodePriority>
 8005078:	4602      	mov	r2, r0
 800507a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800507e:	4611      	mov	r1, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff ff5f 	bl	8004f44 <__NVIC_SetPriority>
}
 8005086:	bf00      	nop
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b082      	sub	sp, #8
 8005092:	af00      	add	r7, sp, #0
 8005094:	4603      	mov	r3, r0
 8005096:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff ff33 	bl	8004f08 <__NVIC_EnableIRQ>
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff ffa4 	bl	8005000 <SysTick_Config>
 80050b8:	4603      	mov	r3, r0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80050c8:	4b07      	ldr	r3, [pc, #28]	@ (80050e8 <HAL_GetCurrentCPUID+0x24>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	2b07      	cmp	r3, #7
 80050d4:	d101      	bne.n	80050da <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e000      	b.n	80050dc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80050da:	2301      	movs	r3, #1
  }
}
 80050dc:	4618      	mov	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	e000ed00 	.word	0xe000ed00

080050ec <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e014      	b.n	8005128 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	791b      	ldrb	r3, [r3, #4]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d105      	bne.n	8005114 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fd ff5c 	bl	8002fcc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e046      	b.n	80051d2 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	795b      	ldrb	r3, [r3, #5]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_DAC_Start+0x20>
 800514c:	2302      	movs	r3, #2
 800514e:	e040      	b.n	80051d2 <HAL_DAC_Start+0xa2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6819      	ldr	r1, [r3, #0]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2201      	movs	r2, #1
 800516a:	409a      	lsls	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10f      	bne.n	800519a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005184:	2b02      	cmp	r3, #2
 8005186:	d11d      	bne.n	80051c4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	605a      	str	r2, [r3, #4]
 8005198:	e014      	b.n	80051c4 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2102      	movs	r1, #2
 80051ac:	fa01 f303 	lsl.w	r3, r1, r3
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d107      	bne.n	80051c4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0202 	orr.w	r2, r2, #2
 80051c2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e0a2      	b.n	800533e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	795b      	ldrb	r3, [r3, #5]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_DAC_Start_DMA+0x24>
 8005200:	2302      	movs	r3, #2
 8005202:	e09c      	b.n	800533e <HAL_DAC_Start_DMA+0x15e>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2202      	movs	r2, #2
 800520e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d129      	bne.n	800526a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	4a4b      	ldr	r2, [pc, #300]	@ (8005348 <HAL_DAC_Start_DMA+0x168>)
 800521c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	4a4a      	ldr	r2, [pc, #296]	@ (800534c <HAL_DAC_Start_DMA+0x16c>)
 8005224:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	4a49      	ldr	r2, [pc, #292]	@ (8005350 <HAL_DAC_Start_DMA+0x170>)
 800522c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800523c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_DAC_Start_DMA+0x6c>
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	2b04      	cmp	r3, #4
 8005248:	d005      	beq.n	8005256 <HAL_DAC_Start_DMA+0x76>
 800524a:	e009      	b.n	8005260 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3308      	adds	r3, #8
 8005252:	613b      	str	r3, [r7, #16]
        break;
 8005254:	e033      	b.n	80052be <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	330c      	adds	r3, #12
 800525c:	613b      	str	r3, [r7, #16]
        break;
 800525e:	e02e      	b.n	80052be <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3310      	adds	r3, #16
 8005266:	613b      	str	r3, [r7, #16]
        break;
 8005268:	e029      	b.n	80052be <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	4a39      	ldr	r2, [pc, #228]	@ (8005354 <HAL_DAC_Start_DMA+0x174>)
 8005270:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	4a38      	ldr	r2, [pc, #224]	@ (8005358 <HAL_DAC_Start_DMA+0x178>)
 8005278:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	4a37      	ldr	r2, [pc, #220]	@ (800535c <HAL_DAC_Start_DMA+0x17c>)
 8005280:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005290:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_DAC_Start_DMA+0xc0>
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	2b04      	cmp	r3, #4
 800529c:	d005      	beq.n	80052aa <HAL_DAC_Start_DMA+0xca>
 800529e:	e009      	b.n	80052b4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3314      	adds	r3, #20
 80052a6:	613b      	str	r3, [r7, #16]
        break;
 80052a8:	e009      	b.n	80052be <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3318      	adds	r3, #24
 80052b0:	613b      	str	r3, [r7, #16]
        break;
 80052b2:	e004      	b.n	80052be <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	331c      	adds	r3, #28
 80052ba:	613b      	str	r3, [r7, #16]
        break;
 80052bc:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d111      	bne.n	80052e8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6898      	ldr	r0, [r3, #8]
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	f000 fd89 	bl	8005df4 <HAL_DMA_Start_IT>
 80052e2:	4603      	mov	r3, r0
 80052e4:	75fb      	strb	r3, [r7, #23]
 80052e6:	e010      	b.n	800530a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80052f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	68d8      	ldr	r0, [r3, #12]
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	f000 fd77 	bl	8005df4 <HAL_DMA_Start_IT>
 8005306:	4603      	mov	r3, r0
 8005308:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005310:	7dfb      	ldrb	r3, [r7, #23]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10c      	bne.n	8005330 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6819      	ldr	r1, [r3, #0]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 0310 	and.w	r3, r3, #16
 8005322:	2201      	movs	r2, #1
 8005324:	409a      	lsls	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e005      	b.n	800533c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f043 0204 	orr.w	r2, r3, #4
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	08005629 	.word	0x08005629
 800534c:	0800564b 	.word	0x0800564b
 8005350:	08005667 	.word	0x08005667
 8005354:	080056d1 	.word	0x080056d1
 8005358:	080056f3 	.word	0x080056f3
 800535c:	0800570f 	.word	0x0800570f

08005360 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08a      	sub	sp, #40	@ 0x28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <HAL_DAC_ConfigChannel+0x1e>
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e12d      	b.n	800561a <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	795b      	ldrb	r3, [r3, #5]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_DAC_ConfigChannel+0x34>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e124      	b.n	800561a <HAL_DAC_ConfigChannel+0x27e>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2201      	movs	r2, #1
 80053d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2202      	movs	r2, #2
 80053da:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d17a      	bne.n	80054da <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80053e4:	f7fe fa50 	bl	8003888 <HAL_GetTick>
 80053e8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d13d      	bne.n	800546c <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80053f0:	e018      	b.n	8005424 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80053f2:	f7fe fa49 	bl	8003888 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d911      	bls.n	8005424 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005406:	4b87      	ldr	r3, [pc, #540]	@ (8005624 <HAL_DAC_ConfigChannel+0x288>)
 8005408:	4013      	ands	r3, r2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f043 0208 	orr.w	r2, r3, #8
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2203      	movs	r2, #3
 800541e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e0fa      	b.n	800561a <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800542a:	4b7e      	ldr	r3, [pc, #504]	@ (8005624 <HAL_DAC_ConfigChannel+0x288>)
 800542c:	4013      	ands	r3, r2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1df      	bne.n	80053f2 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	6992      	ldr	r2, [r2, #24]
 800543a:	641a      	str	r2, [r3, #64]	@ 0x40
 800543c:	e020      	b.n	8005480 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800543e:	f7fe fa23 	bl	8003888 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b01      	cmp	r3, #1
 800544a:	d90f      	bls.n	800546c <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005452:	2b00      	cmp	r3, #0
 8005454:	da0a      	bge.n	800546c <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f043 0208 	orr.w	r2, r3, #8
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2203      	movs	r2, #3
 8005466:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e0d6      	b.n	800561a <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005472:	2b00      	cmp	r3, #0
 8005474:	dbe3      	blt.n	800543e <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	6992      	ldr	r2, [r2, #24]
 800547e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005490:	fa01 f303 	lsl.w	r3, r1, r3
 8005494:	43db      	mvns	r3, r3
 8005496:	ea02 0103 	and.w	r1, r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	69da      	ldr	r2, [r3, #28]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	409a      	lsls	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	21ff      	movs	r1, #255	@ 0xff
 80054bc:	fa01 f303 	lsl.w	r3, r1, r3
 80054c0:	43db      	mvns	r3, r3
 80054c2:	ea02 0103 	and.w	r1, r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6a1a      	ldr	r2, [r3, #32]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	409a      	lsls	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d11d      	bne.n	800551e <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	221f      	movs	r2, #31
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	43db      	mvns	r3, r3
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4013      	ands	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f003 0310 	and.w	r3, r3, #16
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	4313      	orrs	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005524:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2207      	movs	r2, #7
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43db      	mvns	r3, r3
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	4013      	ands	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d102      	bne.n	8005548 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 8005542:	2300      	movs	r3, #0
 8005544:	627b      	str	r3, [r7, #36]	@ 0x24
 8005546:	e00f      	b.n	8005568 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d102      	bne.n	8005556 <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005550:	2301      	movs	r3, #1
 8005552:	627b      	str	r3, [r7, #36]	@ 0x24
 8005554:	e008      	b.n	8005568 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d102      	bne.n	8005564 <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800555e:	2301      	movs	r3, #1
 8005560:	627b      	str	r3, [r7, #36]	@ 0x24
 8005562:	e001      	b.n	8005568 <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005564:	2300      	movs	r3, #0
 8005566:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4313      	orrs	r3, r2
 8005572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4313      	orrs	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6819      	ldr	r1, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43da      	mvns	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	400a      	ands	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	43db      	mvns	r3, r3
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4013      	ands	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f003 0310 	and.w	r3, r3, #16
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6819      	ldr	r1, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	22c0      	movs	r2, #192	@ 0xc0
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	43da      	mvns	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	400a      	ands	r2, r1
 8005608:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005616:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800561a:	4618      	mov	r0, r3
 800561c:	3728      	adds	r7, #40	@ 0x28
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20008000 	.word	0x20008000

08005628 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005634:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f7ff fe92 	bl	8005360 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	711a      	strb	r2, [r3, #4]
}
 8005642:	bf00      	nop
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005656:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f7ff fe8b 	bl	8005374 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800565e:	bf00      	nop
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005672:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	f043 0204 	orr.w	r2, r3, #4
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f7ff fe81 	bl	8005388 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	711a      	strb	r2, [r3, #4]
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff ffd8 	bl	8005694 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	711a      	strb	r2, [r3, #4]
}
 80056ea:	bf00      	nop
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff ffd1 	bl	80056a8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f043 0204 	orr.w	r2, r3, #4
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7ff ffc7 	bl	80056bc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2201      	movs	r2, #1
 8005732:	711a      	strb	r2, [r3, #4]
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005744:	f7fe f8a0 	bl	8003888 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e316      	b.n	8005d82 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a66      	ldr	r2, [pc, #408]	@ (80058f4 <HAL_DMA_Init+0x1b8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d04a      	beq.n	80057f4 <HAL_DMA_Init+0xb8>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a65      	ldr	r2, [pc, #404]	@ (80058f8 <HAL_DMA_Init+0x1bc>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d045      	beq.n	80057f4 <HAL_DMA_Init+0xb8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a63      	ldr	r2, [pc, #396]	@ (80058fc <HAL_DMA_Init+0x1c0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d040      	beq.n	80057f4 <HAL_DMA_Init+0xb8>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a62      	ldr	r2, [pc, #392]	@ (8005900 <HAL_DMA_Init+0x1c4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d03b      	beq.n	80057f4 <HAL_DMA_Init+0xb8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a60      	ldr	r2, [pc, #384]	@ (8005904 <HAL_DMA_Init+0x1c8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d036      	beq.n	80057f4 <HAL_DMA_Init+0xb8>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a5f      	ldr	r2, [pc, #380]	@ (8005908 <HAL_DMA_Init+0x1cc>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d031      	beq.n	80057f4 <HAL_DMA_Init+0xb8>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a5d      	ldr	r2, [pc, #372]	@ (800590c <HAL_DMA_Init+0x1d0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d02c      	beq.n	80057f4 <HAL_DMA_Init+0xb8>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a5c      	ldr	r2, [pc, #368]	@ (8005910 <HAL_DMA_Init+0x1d4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d027      	beq.n	80057f4 <HAL_DMA_Init+0xb8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a5a      	ldr	r2, [pc, #360]	@ (8005914 <HAL_DMA_Init+0x1d8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d022      	beq.n	80057f4 <HAL_DMA_Init+0xb8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a59      	ldr	r2, [pc, #356]	@ (8005918 <HAL_DMA_Init+0x1dc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d01d      	beq.n	80057f4 <HAL_DMA_Init+0xb8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a57      	ldr	r2, [pc, #348]	@ (800591c <HAL_DMA_Init+0x1e0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d018      	beq.n	80057f4 <HAL_DMA_Init+0xb8>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a56      	ldr	r2, [pc, #344]	@ (8005920 <HAL_DMA_Init+0x1e4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d013      	beq.n	80057f4 <HAL_DMA_Init+0xb8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a54      	ldr	r2, [pc, #336]	@ (8005924 <HAL_DMA_Init+0x1e8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00e      	beq.n	80057f4 <HAL_DMA_Init+0xb8>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a53      	ldr	r2, [pc, #332]	@ (8005928 <HAL_DMA_Init+0x1ec>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d009      	beq.n	80057f4 <HAL_DMA_Init+0xb8>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a51      	ldr	r2, [pc, #324]	@ (800592c <HAL_DMA_Init+0x1f0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d004      	beq.n	80057f4 <HAL_DMA_Init+0xb8>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a50      	ldr	r2, [pc, #320]	@ (8005930 <HAL_DMA_Init+0x1f4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d101      	bne.n	80057f8 <HAL_DMA_Init+0xbc>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <HAL_DMA_Init+0xbe>
 80057f8:	2300      	movs	r3, #0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 813b 	beq.w	8005a76 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a37      	ldr	r2, [pc, #220]	@ (80058f4 <HAL_DMA_Init+0x1b8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d04a      	beq.n	80058b0 <HAL_DMA_Init+0x174>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a36      	ldr	r2, [pc, #216]	@ (80058f8 <HAL_DMA_Init+0x1bc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d045      	beq.n	80058b0 <HAL_DMA_Init+0x174>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a34      	ldr	r2, [pc, #208]	@ (80058fc <HAL_DMA_Init+0x1c0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d040      	beq.n	80058b0 <HAL_DMA_Init+0x174>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a33      	ldr	r2, [pc, #204]	@ (8005900 <HAL_DMA_Init+0x1c4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d03b      	beq.n	80058b0 <HAL_DMA_Init+0x174>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a31      	ldr	r2, [pc, #196]	@ (8005904 <HAL_DMA_Init+0x1c8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d036      	beq.n	80058b0 <HAL_DMA_Init+0x174>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a30      	ldr	r2, [pc, #192]	@ (8005908 <HAL_DMA_Init+0x1cc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d031      	beq.n	80058b0 <HAL_DMA_Init+0x174>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a2e      	ldr	r2, [pc, #184]	@ (800590c <HAL_DMA_Init+0x1d0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d02c      	beq.n	80058b0 <HAL_DMA_Init+0x174>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a2d      	ldr	r2, [pc, #180]	@ (8005910 <HAL_DMA_Init+0x1d4>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d027      	beq.n	80058b0 <HAL_DMA_Init+0x174>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a2b      	ldr	r2, [pc, #172]	@ (8005914 <HAL_DMA_Init+0x1d8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d022      	beq.n	80058b0 <HAL_DMA_Init+0x174>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a2a      	ldr	r2, [pc, #168]	@ (8005918 <HAL_DMA_Init+0x1dc>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d01d      	beq.n	80058b0 <HAL_DMA_Init+0x174>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a28      	ldr	r2, [pc, #160]	@ (800591c <HAL_DMA_Init+0x1e0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d018      	beq.n	80058b0 <HAL_DMA_Init+0x174>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a27      	ldr	r2, [pc, #156]	@ (8005920 <HAL_DMA_Init+0x1e4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d013      	beq.n	80058b0 <HAL_DMA_Init+0x174>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a25      	ldr	r2, [pc, #148]	@ (8005924 <HAL_DMA_Init+0x1e8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00e      	beq.n	80058b0 <HAL_DMA_Init+0x174>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a24      	ldr	r2, [pc, #144]	@ (8005928 <HAL_DMA_Init+0x1ec>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d009      	beq.n	80058b0 <HAL_DMA_Init+0x174>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a22      	ldr	r2, [pc, #136]	@ (800592c <HAL_DMA_Init+0x1f0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d004      	beq.n	80058b0 <HAL_DMA_Init+0x174>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a21      	ldr	r2, [pc, #132]	@ (8005930 <HAL_DMA_Init+0x1f4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d108      	bne.n	80058c2 <HAL_DMA_Init+0x186>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0201 	bic.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	e007      	b.n	80058d2 <HAL_DMA_Init+0x196>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0201 	bic.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80058d2:	e02f      	b.n	8005934 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058d4:	f7fd ffd8 	bl	8003888 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d928      	bls.n	8005934 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2203      	movs	r2, #3
 80058ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e246      	b.n	8005d82 <HAL_DMA_Init+0x646>
 80058f4:	40020010 	.word	0x40020010
 80058f8:	40020028 	.word	0x40020028
 80058fc:	40020040 	.word	0x40020040
 8005900:	40020058 	.word	0x40020058
 8005904:	40020070 	.word	0x40020070
 8005908:	40020088 	.word	0x40020088
 800590c:	400200a0 	.word	0x400200a0
 8005910:	400200b8 	.word	0x400200b8
 8005914:	40020410 	.word	0x40020410
 8005918:	40020428 	.word	0x40020428
 800591c:	40020440 	.word	0x40020440
 8005920:	40020458 	.word	0x40020458
 8005924:	40020470 	.word	0x40020470
 8005928:	40020488 	.word	0x40020488
 800592c:	400204a0 	.word	0x400204a0
 8005930:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1c8      	bne.n	80058d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4b83      	ldr	r3, [pc, #524]	@ (8005b5c <HAL_DMA_Init+0x420>)
 800594e:	4013      	ands	r3, r2
 8005950:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800595a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005966:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005972:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4313      	orrs	r3, r2
 800597e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005984:	2b04      	cmp	r3, #4
 8005986:	d107      	bne.n	8005998 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005990:	4313      	orrs	r3, r2
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005998:	4b71      	ldr	r3, [pc, #452]	@ (8005b60 <HAL_DMA_Init+0x424>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4b71      	ldr	r3, [pc, #452]	@ (8005b64 <HAL_DMA_Init+0x428>)
 800599e:	4013      	ands	r3, r2
 80059a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059a4:	d328      	bcc.n	80059f8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b28      	cmp	r3, #40	@ 0x28
 80059ac:	d903      	bls.n	80059b6 <HAL_DMA_Init+0x27a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80059b4:	d917      	bls.n	80059e6 <HAL_DMA_Init+0x2aa>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80059bc:	d903      	bls.n	80059c6 <HAL_DMA_Init+0x28a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b42      	cmp	r3, #66	@ 0x42
 80059c4:	d90f      	bls.n	80059e6 <HAL_DMA_Init+0x2aa>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2b46      	cmp	r3, #70	@ 0x46
 80059cc:	d903      	bls.n	80059d6 <HAL_DMA_Init+0x29a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b48      	cmp	r3, #72	@ 0x48
 80059d4:	d907      	bls.n	80059e6 <HAL_DMA_Init+0x2aa>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2b4e      	cmp	r3, #78	@ 0x4e
 80059dc:	d905      	bls.n	80059ea <HAL_DMA_Init+0x2ae>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b52      	cmp	r3, #82	@ 0x52
 80059e4:	d801      	bhi.n	80059ea <HAL_DMA_Init+0x2ae>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <HAL_DMA_Init+0x2b0>
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059f6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f023 0307 	bic.w	r3, r3, #7
 8005a0e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d117      	bne.n	8005a52 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00e      	beq.n	8005a52 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 fdcf 	bl	80075d8 <DMA_CheckFifoParam>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d008      	beq.n	8005a52 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2240      	movs	r2, #64	@ 0x40
 8005a44:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e197      	b.n	8005d82 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 fd0a 	bl	8007474 <DMA_CalcBaseAndBitshift>
 8005a60:	4603      	mov	r3, r0
 8005a62:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a68:	f003 031f 	and.w	r3, r3, #31
 8005a6c:	223f      	movs	r2, #63	@ 0x3f
 8005a6e:	409a      	lsls	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	609a      	str	r2, [r3, #8]
 8005a74:	e0cd      	b.n	8005c12 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a3b      	ldr	r2, [pc, #236]	@ (8005b68 <HAL_DMA_Init+0x42c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d022      	beq.n	8005ac6 <HAL_DMA_Init+0x38a>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a39      	ldr	r2, [pc, #228]	@ (8005b6c <HAL_DMA_Init+0x430>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d01d      	beq.n	8005ac6 <HAL_DMA_Init+0x38a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a38      	ldr	r2, [pc, #224]	@ (8005b70 <HAL_DMA_Init+0x434>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d018      	beq.n	8005ac6 <HAL_DMA_Init+0x38a>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a36      	ldr	r2, [pc, #216]	@ (8005b74 <HAL_DMA_Init+0x438>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d013      	beq.n	8005ac6 <HAL_DMA_Init+0x38a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a35      	ldr	r2, [pc, #212]	@ (8005b78 <HAL_DMA_Init+0x43c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00e      	beq.n	8005ac6 <HAL_DMA_Init+0x38a>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a33      	ldr	r2, [pc, #204]	@ (8005b7c <HAL_DMA_Init+0x440>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d009      	beq.n	8005ac6 <HAL_DMA_Init+0x38a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a32      	ldr	r2, [pc, #200]	@ (8005b80 <HAL_DMA_Init+0x444>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d004      	beq.n	8005ac6 <HAL_DMA_Init+0x38a>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a30      	ldr	r2, [pc, #192]	@ (8005b84 <HAL_DMA_Init+0x448>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d101      	bne.n	8005aca <HAL_DMA_Init+0x38e>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e000      	b.n	8005acc <HAL_DMA_Init+0x390>
 8005aca:	2300      	movs	r3, #0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8097 	beq.w	8005c00 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a24      	ldr	r2, [pc, #144]	@ (8005b68 <HAL_DMA_Init+0x42c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d021      	beq.n	8005b20 <HAL_DMA_Init+0x3e4>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a22      	ldr	r2, [pc, #136]	@ (8005b6c <HAL_DMA_Init+0x430>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d01c      	beq.n	8005b20 <HAL_DMA_Init+0x3e4>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a21      	ldr	r2, [pc, #132]	@ (8005b70 <HAL_DMA_Init+0x434>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d017      	beq.n	8005b20 <HAL_DMA_Init+0x3e4>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1f      	ldr	r2, [pc, #124]	@ (8005b74 <HAL_DMA_Init+0x438>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d012      	beq.n	8005b20 <HAL_DMA_Init+0x3e4>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1e      	ldr	r2, [pc, #120]	@ (8005b78 <HAL_DMA_Init+0x43c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00d      	beq.n	8005b20 <HAL_DMA_Init+0x3e4>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1c      	ldr	r2, [pc, #112]	@ (8005b7c <HAL_DMA_Init+0x440>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d008      	beq.n	8005b20 <HAL_DMA_Init+0x3e4>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1b      	ldr	r2, [pc, #108]	@ (8005b80 <HAL_DMA_Init+0x444>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <HAL_DMA_Init+0x3e4>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a19      	ldr	r2, [pc, #100]	@ (8005b84 <HAL_DMA_Init+0x448>)
 8005b1e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4b13      	ldr	r3, [pc, #76]	@ (8005b88 <HAL_DMA_Init+0x44c>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b40      	cmp	r3, #64	@ 0x40
 8005b46:	d021      	beq.n	8005b8c <HAL_DMA_Init+0x450>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b80      	cmp	r3, #128	@ 0x80
 8005b4e:	d102      	bne.n	8005b56 <HAL_DMA_Init+0x41a>
 8005b50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005b54:	e01b      	b.n	8005b8e <HAL_DMA_Init+0x452>
 8005b56:	2300      	movs	r3, #0
 8005b58:	e019      	b.n	8005b8e <HAL_DMA_Init+0x452>
 8005b5a:	bf00      	nop
 8005b5c:	fe10803f 	.word	0xfe10803f
 8005b60:	5c001000 	.word	0x5c001000
 8005b64:	ffff0000 	.word	0xffff0000
 8005b68:	58025408 	.word	0x58025408
 8005b6c:	5802541c 	.word	0x5802541c
 8005b70:	58025430 	.word	0x58025430
 8005b74:	58025444 	.word	0x58025444
 8005b78:	58025458 	.word	0x58025458
 8005b7c:	5802546c 	.word	0x5802546c
 8005b80:	58025480 	.word	0x58025480
 8005b84:	58025494 	.word	0x58025494
 8005b88:	fffe000f 	.word	0xfffe000f
 8005b8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	68d2      	ldr	r2, [r2, #12]
 8005b92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005b9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005ba4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005bac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005bb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005bbc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4b6e      	ldr	r3, [pc, #440]	@ (8005d8c <HAL_DMA_Init+0x650>)
 8005bd4:	4413      	add	r3, r2
 8005bd6:	4a6e      	ldr	r2, [pc, #440]	@ (8005d90 <HAL_DMA_Init+0x654>)
 8005bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bdc:	091b      	lsrs	r3, r3, #4
 8005bde:	009a      	lsls	r2, r3, #2
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f001 fc45 	bl	8007474 <DMA_CalcBaseAndBitshift>
 8005bea:	4603      	mov	r3, r0
 8005bec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf2:	f003 031f 	and.w	r3, r3, #31
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	409a      	lsls	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	605a      	str	r2, [r3, #4]
 8005bfe:	e008      	b.n	8005c12 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2240      	movs	r2, #64	@ 0x40
 8005c04:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2203      	movs	r2, #3
 8005c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e0b7      	b.n	8005d82 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a5f      	ldr	r2, [pc, #380]	@ (8005d94 <HAL_DMA_Init+0x658>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d072      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a5d      	ldr	r2, [pc, #372]	@ (8005d98 <HAL_DMA_Init+0x65c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d06d      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a5c      	ldr	r2, [pc, #368]	@ (8005d9c <HAL_DMA_Init+0x660>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d068      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a5a      	ldr	r2, [pc, #360]	@ (8005da0 <HAL_DMA_Init+0x664>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d063      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a59      	ldr	r2, [pc, #356]	@ (8005da4 <HAL_DMA_Init+0x668>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d05e      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a57      	ldr	r2, [pc, #348]	@ (8005da8 <HAL_DMA_Init+0x66c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d059      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a56      	ldr	r2, [pc, #344]	@ (8005dac <HAL_DMA_Init+0x670>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d054      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a54      	ldr	r2, [pc, #336]	@ (8005db0 <HAL_DMA_Init+0x674>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d04f      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a53      	ldr	r2, [pc, #332]	@ (8005db4 <HAL_DMA_Init+0x678>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d04a      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a51      	ldr	r2, [pc, #324]	@ (8005db8 <HAL_DMA_Init+0x67c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d045      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a50      	ldr	r2, [pc, #320]	@ (8005dbc <HAL_DMA_Init+0x680>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d040      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a4e      	ldr	r2, [pc, #312]	@ (8005dc0 <HAL_DMA_Init+0x684>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d03b      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a4d      	ldr	r2, [pc, #308]	@ (8005dc4 <HAL_DMA_Init+0x688>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d036      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a4b      	ldr	r2, [pc, #300]	@ (8005dc8 <HAL_DMA_Init+0x68c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d031      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a4a      	ldr	r2, [pc, #296]	@ (8005dcc <HAL_DMA_Init+0x690>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d02c      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a48      	ldr	r2, [pc, #288]	@ (8005dd0 <HAL_DMA_Init+0x694>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d027      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a47      	ldr	r2, [pc, #284]	@ (8005dd4 <HAL_DMA_Init+0x698>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d022      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a45      	ldr	r2, [pc, #276]	@ (8005dd8 <HAL_DMA_Init+0x69c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d01d      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a44      	ldr	r2, [pc, #272]	@ (8005ddc <HAL_DMA_Init+0x6a0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d018      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a42      	ldr	r2, [pc, #264]	@ (8005de0 <HAL_DMA_Init+0x6a4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d013      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a41      	ldr	r2, [pc, #260]	@ (8005de4 <HAL_DMA_Init+0x6a8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d00e      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a3f      	ldr	r2, [pc, #252]	@ (8005de8 <HAL_DMA_Init+0x6ac>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d009      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8005dec <HAL_DMA_Init+0x6b0>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d004      	beq.n	8005d02 <HAL_DMA_Init+0x5c6>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a3c      	ldr	r2, [pc, #240]	@ (8005df0 <HAL_DMA_Init+0x6b4>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d101      	bne.n	8005d06 <HAL_DMA_Init+0x5ca>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e000      	b.n	8005d08 <HAL_DMA_Init+0x5cc>
 8005d06:	2300      	movs	r3, #0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d032      	beq.n	8005d72 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f001 fcdf 	bl	80076d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2b80      	cmp	r3, #128	@ 0x80
 8005d18:	d102      	bne.n	8005d20 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d010      	beq.n	8005d60 <HAL_DMA_Init+0x624>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d80c      	bhi.n	8005d60 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f001 fd5c 	bl	8007804 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005d5c:	605a      	str	r2, [r3, #4]
 8005d5e:	e008      	b.n	8005d72 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	a7fdabf8 	.word	0xa7fdabf8
 8005d90:	cccccccd 	.word	0xcccccccd
 8005d94:	40020010 	.word	0x40020010
 8005d98:	40020028 	.word	0x40020028
 8005d9c:	40020040 	.word	0x40020040
 8005da0:	40020058 	.word	0x40020058
 8005da4:	40020070 	.word	0x40020070
 8005da8:	40020088 	.word	0x40020088
 8005dac:	400200a0 	.word	0x400200a0
 8005db0:	400200b8 	.word	0x400200b8
 8005db4:	40020410 	.word	0x40020410
 8005db8:	40020428 	.word	0x40020428
 8005dbc:	40020440 	.word	0x40020440
 8005dc0:	40020458 	.word	0x40020458
 8005dc4:	40020470 	.word	0x40020470
 8005dc8:	40020488 	.word	0x40020488
 8005dcc:	400204a0 	.word	0x400204a0
 8005dd0:	400204b8 	.word	0x400204b8
 8005dd4:	58025408 	.word	0x58025408
 8005dd8:	5802541c 	.word	0x5802541c
 8005ddc:	58025430 	.word	0x58025430
 8005de0:	58025444 	.word	0x58025444
 8005de4:	58025458 	.word	0x58025458
 8005de8:	5802546c 	.word	0x5802546c
 8005dec:	58025480 	.word	0x58025480
 8005df0:	58025494 	.word	0x58025494

08005df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e226      	b.n	800625e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <HAL_DMA_Start_IT+0x2a>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e21f      	b.n	800625e <HAL_DMA_Start_IT+0x46a>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	f040 820a 	bne.w	8006248 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a68      	ldr	r2, [pc, #416]	@ (8005fe8 <HAL_DMA_Start_IT+0x1f4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d04a      	beq.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a66      	ldr	r2, [pc, #408]	@ (8005fec <HAL_DMA_Start_IT+0x1f8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d045      	beq.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a65      	ldr	r2, [pc, #404]	@ (8005ff0 <HAL_DMA_Start_IT+0x1fc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d040      	beq.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a63      	ldr	r2, [pc, #396]	@ (8005ff4 <HAL_DMA_Start_IT+0x200>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d03b      	beq.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a62      	ldr	r2, [pc, #392]	@ (8005ff8 <HAL_DMA_Start_IT+0x204>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d036      	beq.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a60      	ldr	r2, [pc, #384]	@ (8005ffc <HAL_DMA_Start_IT+0x208>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d031      	beq.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a5f      	ldr	r2, [pc, #380]	@ (8006000 <HAL_DMA_Start_IT+0x20c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d02c      	beq.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a5d      	ldr	r2, [pc, #372]	@ (8006004 <HAL_DMA_Start_IT+0x210>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d027      	beq.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a5c      	ldr	r2, [pc, #368]	@ (8006008 <HAL_DMA_Start_IT+0x214>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d022      	beq.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a5a      	ldr	r2, [pc, #360]	@ (800600c <HAL_DMA_Start_IT+0x218>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d01d      	beq.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a59      	ldr	r2, [pc, #356]	@ (8006010 <HAL_DMA_Start_IT+0x21c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d018      	beq.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a57      	ldr	r2, [pc, #348]	@ (8006014 <HAL_DMA_Start_IT+0x220>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d013      	beq.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a56      	ldr	r2, [pc, #344]	@ (8006018 <HAL_DMA_Start_IT+0x224>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00e      	beq.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a54      	ldr	r2, [pc, #336]	@ (800601c <HAL_DMA_Start_IT+0x228>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d009      	beq.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a53      	ldr	r2, [pc, #332]	@ (8006020 <HAL_DMA_Start_IT+0x22c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d004      	beq.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a51      	ldr	r2, [pc, #324]	@ (8006024 <HAL_DMA_Start_IT+0x230>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d108      	bne.n	8005ef4 <HAL_DMA_Start_IT+0x100>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0201 	bic.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	e007      	b.n	8005f04 <HAL_DMA_Start_IT+0x110>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0201 	bic.w	r2, r2, #1
 8005f02:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	68b9      	ldr	r1, [r7, #8]
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f001 f906 	bl	800711c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a34      	ldr	r2, [pc, #208]	@ (8005fe8 <HAL_DMA_Start_IT+0x1f4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d04a      	beq.n	8005fb0 <HAL_DMA_Start_IT+0x1bc>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a33      	ldr	r2, [pc, #204]	@ (8005fec <HAL_DMA_Start_IT+0x1f8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d045      	beq.n	8005fb0 <HAL_DMA_Start_IT+0x1bc>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a31      	ldr	r2, [pc, #196]	@ (8005ff0 <HAL_DMA_Start_IT+0x1fc>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d040      	beq.n	8005fb0 <HAL_DMA_Start_IT+0x1bc>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a30      	ldr	r2, [pc, #192]	@ (8005ff4 <HAL_DMA_Start_IT+0x200>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d03b      	beq.n	8005fb0 <HAL_DMA_Start_IT+0x1bc>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a2e      	ldr	r2, [pc, #184]	@ (8005ff8 <HAL_DMA_Start_IT+0x204>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d036      	beq.n	8005fb0 <HAL_DMA_Start_IT+0x1bc>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a2d      	ldr	r2, [pc, #180]	@ (8005ffc <HAL_DMA_Start_IT+0x208>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d031      	beq.n	8005fb0 <HAL_DMA_Start_IT+0x1bc>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a2b      	ldr	r2, [pc, #172]	@ (8006000 <HAL_DMA_Start_IT+0x20c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d02c      	beq.n	8005fb0 <HAL_DMA_Start_IT+0x1bc>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8006004 <HAL_DMA_Start_IT+0x210>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d027      	beq.n	8005fb0 <HAL_DMA_Start_IT+0x1bc>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a28      	ldr	r2, [pc, #160]	@ (8006008 <HAL_DMA_Start_IT+0x214>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d022      	beq.n	8005fb0 <HAL_DMA_Start_IT+0x1bc>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a27      	ldr	r2, [pc, #156]	@ (800600c <HAL_DMA_Start_IT+0x218>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d01d      	beq.n	8005fb0 <HAL_DMA_Start_IT+0x1bc>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a25      	ldr	r2, [pc, #148]	@ (8006010 <HAL_DMA_Start_IT+0x21c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d018      	beq.n	8005fb0 <HAL_DMA_Start_IT+0x1bc>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a24      	ldr	r2, [pc, #144]	@ (8006014 <HAL_DMA_Start_IT+0x220>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <HAL_DMA_Start_IT+0x1bc>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a22      	ldr	r2, [pc, #136]	@ (8006018 <HAL_DMA_Start_IT+0x224>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00e      	beq.n	8005fb0 <HAL_DMA_Start_IT+0x1bc>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a21      	ldr	r2, [pc, #132]	@ (800601c <HAL_DMA_Start_IT+0x228>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d009      	beq.n	8005fb0 <HAL_DMA_Start_IT+0x1bc>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8006020 <HAL_DMA_Start_IT+0x22c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <HAL_DMA_Start_IT+0x1bc>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1e      	ldr	r2, [pc, #120]	@ (8006024 <HAL_DMA_Start_IT+0x230>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d101      	bne.n	8005fb4 <HAL_DMA_Start_IT+0x1c0>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <HAL_DMA_Start_IT+0x1c2>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d036      	beq.n	8006028 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f023 021e 	bic.w	r2, r3, #30
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0216 	orr.w	r2, r2, #22
 8005fcc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d03e      	beq.n	8006054 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0208 	orr.w	r2, r2, #8
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	e035      	b.n	8006054 <HAL_DMA_Start_IT+0x260>
 8005fe8:	40020010 	.word	0x40020010
 8005fec:	40020028 	.word	0x40020028
 8005ff0:	40020040 	.word	0x40020040
 8005ff4:	40020058 	.word	0x40020058
 8005ff8:	40020070 	.word	0x40020070
 8005ffc:	40020088 	.word	0x40020088
 8006000:	400200a0 	.word	0x400200a0
 8006004:	400200b8 	.word	0x400200b8
 8006008:	40020410 	.word	0x40020410
 800600c:	40020428 	.word	0x40020428
 8006010:	40020440 	.word	0x40020440
 8006014:	40020458 	.word	0x40020458
 8006018:	40020470 	.word	0x40020470
 800601c:	40020488 	.word	0x40020488
 8006020:	400204a0 	.word	0x400204a0
 8006024:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f023 020e 	bic.w	r2, r3, #14
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 020a 	orr.w	r2, r2, #10
 800603a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0204 	orr.w	r2, r2, #4
 8006052:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a83      	ldr	r2, [pc, #524]	@ (8006268 <HAL_DMA_Start_IT+0x474>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d072      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a82      	ldr	r2, [pc, #520]	@ (800626c <HAL_DMA_Start_IT+0x478>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d06d      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a80      	ldr	r2, [pc, #512]	@ (8006270 <HAL_DMA_Start_IT+0x47c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d068      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a7f      	ldr	r2, [pc, #508]	@ (8006274 <HAL_DMA_Start_IT+0x480>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d063      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a7d      	ldr	r2, [pc, #500]	@ (8006278 <HAL_DMA_Start_IT+0x484>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d05e      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a7c      	ldr	r2, [pc, #496]	@ (800627c <HAL_DMA_Start_IT+0x488>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d059      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a7a      	ldr	r2, [pc, #488]	@ (8006280 <HAL_DMA_Start_IT+0x48c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d054      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a79      	ldr	r2, [pc, #484]	@ (8006284 <HAL_DMA_Start_IT+0x490>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d04f      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a77      	ldr	r2, [pc, #476]	@ (8006288 <HAL_DMA_Start_IT+0x494>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d04a      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a76      	ldr	r2, [pc, #472]	@ (800628c <HAL_DMA_Start_IT+0x498>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d045      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a74      	ldr	r2, [pc, #464]	@ (8006290 <HAL_DMA_Start_IT+0x49c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d040      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a73      	ldr	r2, [pc, #460]	@ (8006294 <HAL_DMA_Start_IT+0x4a0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d03b      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a71      	ldr	r2, [pc, #452]	@ (8006298 <HAL_DMA_Start_IT+0x4a4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d036      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a70      	ldr	r2, [pc, #448]	@ (800629c <HAL_DMA_Start_IT+0x4a8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d031      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a6e      	ldr	r2, [pc, #440]	@ (80062a0 <HAL_DMA_Start_IT+0x4ac>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d02c      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a6d      	ldr	r2, [pc, #436]	@ (80062a4 <HAL_DMA_Start_IT+0x4b0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d027      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a6b      	ldr	r2, [pc, #428]	@ (80062a8 <HAL_DMA_Start_IT+0x4b4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d022      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a6a      	ldr	r2, [pc, #424]	@ (80062ac <HAL_DMA_Start_IT+0x4b8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d01d      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a68      	ldr	r2, [pc, #416]	@ (80062b0 <HAL_DMA_Start_IT+0x4bc>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d018      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a67      	ldr	r2, [pc, #412]	@ (80062b4 <HAL_DMA_Start_IT+0x4c0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d013      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a65      	ldr	r2, [pc, #404]	@ (80062b8 <HAL_DMA_Start_IT+0x4c4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00e      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a64      	ldr	r2, [pc, #400]	@ (80062bc <HAL_DMA_Start_IT+0x4c8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d009      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a62      	ldr	r2, [pc, #392]	@ (80062c0 <HAL_DMA_Start_IT+0x4cc>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d004      	beq.n	8006144 <HAL_DMA_Start_IT+0x350>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a61      	ldr	r2, [pc, #388]	@ (80062c4 <HAL_DMA_Start_IT+0x4d0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d101      	bne.n	8006148 <HAL_DMA_Start_IT+0x354>
 8006144:	2301      	movs	r3, #1
 8006146:	e000      	b.n	800614a <HAL_DMA_Start_IT+0x356>
 8006148:	2300      	movs	r3, #0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d01a      	beq.n	8006184 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006166:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800616a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d007      	beq.n	8006184 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800617e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006182:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a37      	ldr	r2, [pc, #220]	@ (8006268 <HAL_DMA_Start_IT+0x474>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d04a      	beq.n	8006224 <HAL_DMA_Start_IT+0x430>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a36      	ldr	r2, [pc, #216]	@ (800626c <HAL_DMA_Start_IT+0x478>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d045      	beq.n	8006224 <HAL_DMA_Start_IT+0x430>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a34      	ldr	r2, [pc, #208]	@ (8006270 <HAL_DMA_Start_IT+0x47c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d040      	beq.n	8006224 <HAL_DMA_Start_IT+0x430>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a33      	ldr	r2, [pc, #204]	@ (8006274 <HAL_DMA_Start_IT+0x480>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d03b      	beq.n	8006224 <HAL_DMA_Start_IT+0x430>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a31      	ldr	r2, [pc, #196]	@ (8006278 <HAL_DMA_Start_IT+0x484>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d036      	beq.n	8006224 <HAL_DMA_Start_IT+0x430>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a30      	ldr	r2, [pc, #192]	@ (800627c <HAL_DMA_Start_IT+0x488>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d031      	beq.n	8006224 <HAL_DMA_Start_IT+0x430>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006280 <HAL_DMA_Start_IT+0x48c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d02c      	beq.n	8006224 <HAL_DMA_Start_IT+0x430>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006284 <HAL_DMA_Start_IT+0x490>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d027      	beq.n	8006224 <HAL_DMA_Start_IT+0x430>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006288 <HAL_DMA_Start_IT+0x494>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d022      	beq.n	8006224 <HAL_DMA_Start_IT+0x430>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a2a      	ldr	r2, [pc, #168]	@ (800628c <HAL_DMA_Start_IT+0x498>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d01d      	beq.n	8006224 <HAL_DMA_Start_IT+0x430>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a28      	ldr	r2, [pc, #160]	@ (8006290 <HAL_DMA_Start_IT+0x49c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d018      	beq.n	8006224 <HAL_DMA_Start_IT+0x430>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a27      	ldr	r2, [pc, #156]	@ (8006294 <HAL_DMA_Start_IT+0x4a0>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d013      	beq.n	8006224 <HAL_DMA_Start_IT+0x430>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a25      	ldr	r2, [pc, #148]	@ (8006298 <HAL_DMA_Start_IT+0x4a4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00e      	beq.n	8006224 <HAL_DMA_Start_IT+0x430>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a24      	ldr	r2, [pc, #144]	@ (800629c <HAL_DMA_Start_IT+0x4a8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d009      	beq.n	8006224 <HAL_DMA_Start_IT+0x430>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a22      	ldr	r2, [pc, #136]	@ (80062a0 <HAL_DMA_Start_IT+0x4ac>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d004      	beq.n	8006224 <HAL_DMA_Start_IT+0x430>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a21      	ldr	r2, [pc, #132]	@ (80062a4 <HAL_DMA_Start_IT+0x4b0>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d108      	bne.n	8006236 <HAL_DMA_Start_IT+0x442>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0201 	orr.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	e012      	b.n	800625c <HAL_DMA_Start_IT+0x468>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0201 	orr.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e009      	b.n	800625c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800624e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800625c:	7dfb      	ldrb	r3, [r7, #23]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	40020010 	.word	0x40020010
 800626c:	40020028 	.word	0x40020028
 8006270:	40020040 	.word	0x40020040
 8006274:	40020058 	.word	0x40020058
 8006278:	40020070 	.word	0x40020070
 800627c:	40020088 	.word	0x40020088
 8006280:	400200a0 	.word	0x400200a0
 8006284:	400200b8 	.word	0x400200b8
 8006288:	40020410 	.word	0x40020410
 800628c:	40020428 	.word	0x40020428
 8006290:	40020440 	.word	0x40020440
 8006294:	40020458 	.word	0x40020458
 8006298:	40020470 	.word	0x40020470
 800629c:	40020488 	.word	0x40020488
 80062a0:	400204a0 	.word	0x400204a0
 80062a4:	400204b8 	.word	0x400204b8
 80062a8:	58025408 	.word	0x58025408
 80062ac:	5802541c 	.word	0x5802541c
 80062b0:	58025430 	.word	0x58025430
 80062b4:	58025444 	.word	0x58025444
 80062b8:	58025458 	.word	0x58025458
 80062bc:	5802546c 	.word	0x5802546c
 80062c0:	58025480 	.word	0x58025480
 80062c4:	58025494 	.word	0x58025494

080062c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	@ 0x28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062d4:	4b67      	ldr	r3, [pc, #412]	@ (8006474 <HAL_DMA_IRQHandler+0x1ac>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a67      	ldr	r2, [pc, #412]	@ (8006478 <HAL_DMA_IRQHandler+0x1b0>)
 80062da:	fba2 2303 	umull	r2, r3, r2, r3
 80062de:	0a9b      	lsrs	r3, r3, #10
 80062e0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a5f      	ldr	r2, [pc, #380]	@ (800647c <HAL_DMA_IRQHandler+0x1b4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d04a      	beq.n	800639a <HAL_DMA_IRQHandler+0xd2>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a5d      	ldr	r2, [pc, #372]	@ (8006480 <HAL_DMA_IRQHandler+0x1b8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d045      	beq.n	800639a <HAL_DMA_IRQHandler+0xd2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a5c      	ldr	r2, [pc, #368]	@ (8006484 <HAL_DMA_IRQHandler+0x1bc>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d040      	beq.n	800639a <HAL_DMA_IRQHandler+0xd2>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a5a      	ldr	r2, [pc, #360]	@ (8006488 <HAL_DMA_IRQHandler+0x1c0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d03b      	beq.n	800639a <HAL_DMA_IRQHandler+0xd2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a59      	ldr	r2, [pc, #356]	@ (800648c <HAL_DMA_IRQHandler+0x1c4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d036      	beq.n	800639a <HAL_DMA_IRQHandler+0xd2>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a57      	ldr	r2, [pc, #348]	@ (8006490 <HAL_DMA_IRQHandler+0x1c8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d031      	beq.n	800639a <HAL_DMA_IRQHandler+0xd2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a56      	ldr	r2, [pc, #344]	@ (8006494 <HAL_DMA_IRQHandler+0x1cc>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d02c      	beq.n	800639a <HAL_DMA_IRQHandler+0xd2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a54      	ldr	r2, [pc, #336]	@ (8006498 <HAL_DMA_IRQHandler+0x1d0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d027      	beq.n	800639a <HAL_DMA_IRQHandler+0xd2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a53      	ldr	r2, [pc, #332]	@ (800649c <HAL_DMA_IRQHandler+0x1d4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d022      	beq.n	800639a <HAL_DMA_IRQHandler+0xd2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a51      	ldr	r2, [pc, #324]	@ (80064a0 <HAL_DMA_IRQHandler+0x1d8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d01d      	beq.n	800639a <HAL_DMA_IRQHandler+0xd2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a50      	ldr	r2, [pc, #320]	@ (80064a4 <HAL_DMA_IRQHandler+0x1dc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d018      	beq.n	800639a <HAL_DMA_IRQHandler+0xd2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a4e      	ldr	r2, [pc, #312]	@ (80064a8 <HAL_DMA_IRQHandler+0x1e0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <HAL_DMA_IRQHandler+0xd2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a4d      	ldr	r2, [pc, #308]	@ (80064ac <HAL_DMA_IRQHandler+0x1e4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00e      	beq.n	800639a <HAL_DMA_IRQHandler+0xd2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a4b      	ldr	r2, [pc, #300]	@ (80064b0 <HAL_DMA_IRQHandler+0x1e8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d009      	beq.n	800639a <HAL_DMA_IRQHandler+0xd2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a4a      	ldr	r2, [pc, #296]	@ (80064b4 <HAL_DMA_IRQHandler+0x1ec>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d004      	beq.n	800639a <HAL_DMA_IRQHandler+0xd2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a48      	ldr	r2, [pc, #288]	@ (80064b8 <HAL_DMA_IRQHandler+0x1f0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d101      	bne.n	800639e <HAL_DMA_IRQHandler+0xd6>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <HAL_DMA_IRQHandler+0xd8>
 800639e:	2300      	movs	r3, #0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 842b 	beq.w	8006bfc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063aa:	f003 031f 	and.w	r3, r3, #31
 80063ae:	2208      	movs	r2, #8
 80063b0:	409a      	lsls	r2, r3
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	4013      	ands	r3, r2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 80a2 	beq.w	8006500 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a2e      	ldr	r2, [pc, #184]	@ (800647c <HAL_DMA_IRQHandler+0x1b4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d04a      	beq.n	800645c <HAL_DMA_IRQHandler+0x194>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006480 <HAL_DMA_IRQHandler+0x1b8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d045      	beq.n	800645c <HAL_DMA_IRQHandler+0x194>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006484 <HAL_DMA_IRQHandler+0x1bc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d040      	beq.n	800645c <HAL_DMA_IRQHandler+0x194>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a2a      	ldr	r2, [pc, #168]	@ (8006488 <HAL_DMA_IRQHandler+0x1c0>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d03b      	beq.n	800645c <HAL_DMA_IRQHandler+0x194>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a28      	ldr	r2, [pc, #160]	@ (800648c <HAL_DMA_IRQHandler+0x1c4>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d036      	beq.n	800645c <HAL_DMA_IRQHandler+0x194>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a27      	ldr	r2, [pc, #156]	@ (8006490 <HAL_DMA_IRQHandler+0x1c8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d031      	beq.n	800645c <HAL_DMA_IRQHandler+0x194>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a25      	ldr	r2, [pc, #148]	@ (8006494 <HAL_DMA_IRQHandler+0x1cc>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d02c      	beq.n	800645c <HAL_DMA_IRQHandler+0x194>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a24      	ldr	r2, [pc, #144]	@ (8006498 <HAL_DMA_IRQHandler+0x1d0>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d027      	beq.n	800645c <HAL_DMA_IRQHandler+0x194>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a22      	ldr	r2, [pc, #136]	@ (800649c <HAL_DMA_IRQHandler+0x1d4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d022      	beq.n	800645c <HAL_DMA_IRQHandler+0x194>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a21      	ldr	r2, [pc, #132]	@ (80064a0 <HAL_DMA_IRQHandler+0x1d8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d01d      	beq.n	800645c <HAL_DMA_IRQHandler+0x194>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1f      	ldr	r2, [pc, #124]	@ (80064a4 <HAL_DMA_IRQHandler+0x1dc>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d018      	beq.n	800645c <HAL_DMA_IRQHandler+0x194>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1e      	ldr	r2, [pc, #120]	@ (80064a8 <HAL_DMA_IRQHandler+0x1e0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d013      	beq.n	800645c <HAL_DMA_IRQHandler+0x194>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1c      	ldr	r2, [pc, #112]	@ (80064ac <HAL_DMA_IRQHandler+0x1e4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00e      	beq.n	800645c <HAL_DMA_IRQHandler+0x194>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1b      	ldr	r2, [pc, #108]	@ (80064b0 <HAL_DMA_IRQHandler+0x1e8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d009      	beq.n	800645c <HAL_DMA_IRQHandler+0x194>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a19      	ldr	r2, [pc, #100]	@ (80064b4 <HAL_DMA_IRQHandler+0x1ec>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d004      	beq.n	800645c <HAL_DMA_IRQHandler+0x194>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a18      	ldr	r2, [pc, #96]	@ (80064b8 <HAL_DMA_IRQHandler+0x1f0>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d12f      	bne.n	80064bc <HAL_DMA_IRQHandler+0x1f4>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	2b00      	cmp	r3, #0
 8006468:	bf14      	ite	ne
 800646a:	2301      	movne	r3, #1
 800646c:	2300      	moveq	r3, #0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	e02e      	b.n	80064d0 <HAL_DMA_IRQHandler+0x208>
 8006472:	bf00      	nop
 8006474:	24000000 	.word	0x24000000
 8006478:	1b4e81b5 	.word	0x1b4e81b5
 800647c:	40020010 	.word	0x40020010
 8006480:	40020028 	.word	0x40020028
 8006484:	40020040 	.word	0x40020040
 8006488:	40020058 	.word	0x40020058
 800648c:	40020070 	.word	0x40020070
 8006490:	40020088 	.word	0x40020088
 8006494:	400200a0 	.word	0x400200a0
 8006498:	400200b8 	.word	0x400200b8
 800649c:	40020410 	.word	0x40020410
 80064a0:	40020428 	.word	0x40020428
 80064a4:	40020440 	.word	0x40020440
 80064a8:	40020458 	.word	0x40020458
 80064ac:	40020470 	.word	0x40020470
 80064b0:	40020488 	.word	0x40020488
 80064b4:	400204a0 	.word	0x400204a0
 80064b8:	400204b8 	.word	0x400204b8
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	bf14      	ite	ne
 80064ca:	2301      	movne	r3, #1
 80064cc:	2300      	moveq	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d015      	beq.n	8006500 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0204 	bic.w	r2, r2, #4
 80064e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064e8:	f003 031f 	and.w	r3, r3, #31
 80064ec:	2208      	movs	r2, #8
 80064ee:	409a      	lsls	r2, r3
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f8:	f043 0201 	orr.w	r2, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	fa22 f303 	lsr.w	r3, r2, r3
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d06e      	beq.n	80065f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a69      	ldr	r2, [pc, #420]	@ (80066c0 <HAL_DMA_IRQHandler+0x3f8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d04a      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x2ee>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a67      	ldr	r2, [pc, #412]	@ (80066c4 <HAL_DMA_IRQHandler+0x3fc>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d045      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x2ee>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a66      	ldr	r2, [pc, #408]	@ (80066c8 <HAL_DMA_IRQHandler+0x400>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d040      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x2ee>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a64      	ldr	r2, [pc, #400]	@ (80066cc <HAL_DMA_IRQHandler+0x404>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d03b      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x2ee>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a63      	ldr	r2, [pc, #396]	@ (80066d0 <HAL_DMA_IRQHandler+0x408>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d036      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x2ee>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a61      	ldr	r2, [pc, #388]	@ (80066d4 <HAL_DMA_IRQHandler+0x40c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d031      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x2ee>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a60      	ldr	r2, [pc, #384]	@ (80066d8 <HAL_DMA_IRQHandler+0x410>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d02c      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x2ee>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a5e      	ldr	r2, [pc, #376]	@ (80066dc <HAL_DMA_IRQHandler+0x414>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d027      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x2ee>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a5d      	ldr	r2, [pc, #372]	@ (80066e0 <HAL_DMA_IRQHandler+0x418>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d022      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x2ee>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a5b      	ldr	r2, [pc, #364]	@ (80066e4 <HAL_DMA_IRQHandler+0x41c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d01d      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x2ee>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a5a      	ldr	r2, [pc, #360]	@ (80066e8 <HAL_DMA_IRQHandler+0x420>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d018      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x2ee>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a58      	ldr	r2, [pc, #352]	@ (80066ec <HAL_DMA_IRQHandler+0x424>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d013      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x2ee>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a57      	ldr	r2, [pc, #348]	@ (80066f0 <HAL_DMA_IRQHandler+0x428>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d00e      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x2ee>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a55      	ldr	r2, [pc, #340]	@ (80066f4 <HAL_DMA_IRQHandler+0x42c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d009      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x2ee>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a54      	ldr	r2, [pc, #336]	@ (80066f8 <HAL_DMA_IRQHandler+0x430>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d004      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x2ee>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a52      	ldr	r2, [pc, #328]	@ (80066fc <HAL_DMA_IRQHandler+0x434>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d10a      	bne.n	80065cc <HAL_DMA_IRQHandler+0x304>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	bf14      	ite	ne
 80065c4:	2301      	movne	r3, #1
 80065c6:	2300      	moveq	r3, #0
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	e003      	b.n	80065d4 <HAL_DMA_IRQHandler+0x30c>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2300      	movs	r3, #0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00d      	beq.n	80065f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065dc:	f003 031f 	and.w	r3, r3, #31
 80065e0:	2201      	movs	r2, #1
 80065e2:	409a      	lsls	r2, r3
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ec:	f043 0202 	orr.w	r2, r3, #2
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065f8:	f003 031f 	and.w	r3, r3, #31
 80065fc:	2204      	movs	r2, #4
 80065fe:	409a      	lsls	r2, r3
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	4013      	ands	r3, r2
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 808f 	beq.w	8006728 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a2c      	ldr	r2, [pc, #176]	@ (80066c0 <HAL_DMA_IRQHandler+0x3f8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d04a      	beq.n	80066aa <HAL_DMA_IRQHandler+0x3e2>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a2a      	ldr	r2, [pc, #168]	@ (80066c4 <HAL_DMA_IRQHandler+0x3fc>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d045      	beq.n	80066aa <HAL_DMA_IRQHandler+0x3e2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a29      	ldr	r2, [pc, #164]	@ (80066c8 <HAL_DMA_IRQHandler+0x400>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d040      	beq.n	80066aa <HAL_DMA_IRQHandler+0x3e2>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a27      	ldr	r2, [pc, #156]	@ (80066cc <HAL_DMA_IRQHandler+0x404>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d03b      	beq.n	80066aa <HAL_DMA_IRQHandler+0x3e2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a26      	ldr	r2, [pc, #152]	@ (80066d0 <HAL_DMA_IRQHandler+0x408>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d036      	beq.n	80066aa <HAL_DMA_IRQHandler+0x3e2>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a24      	ldr	r2, [pc, #144]	@ (80066d4 <HAL_DMA_IRQHandler+0x40c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d031      	beq.n	80066aa <HAL_DMA_IRQHandler+0x3e2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a23      	ldr	r2, [pc, #140]	@ (80066d8 <HAL_DMA_IRQHandler+0x410>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d02c      	beq.n	80066aa <HAL_DMA_IRQHandler+0x3e2>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a21      	ldr	r2, [pc, #132]	@ (80066dc <HAL_DMA_IRQHandler+0x414>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d027      	beq.n	80066aa <HAL_DMA_IRQHandler+0x3e2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a20      	ldr	r2, [pc, #128]	@ (80066e0 <HAL_DMA_IRQHandler+0x418>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d022      	beq.n	80066aa <HAL_DMA_IRQHandler+0x3e2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a1e      	ldr	r2, [pc, #120]	@ (80066e4 <HAL_DMA_IRQHandler+0x41c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d01d      	beq.n	80066aa <HAL_DMA_IRQHandler+0x3e2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1d      	ldr	r2, [pc, #116]	@ (80066e8 <HAL_DMA_IRQHandler+0x420>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d018      	beq.n	80066aa <HAL_DMA_IRQHandler+0x3e2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a1b      	ldr	r2, [pc, #108]	@ (80066ec <HAL_DMA_IRQHandler+0x424>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d013      	beq.n	80066aa <HAL_DMA_IRQHandler+0x3e2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1a      	ldr	r2, [pc, #104]	@ (80066f0 <HAL_DMA_IRQHandler+0x428>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00e      	beq.n	80066aa <HAL_DMA_IRQHandler+0x3e2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a18      	ldr	r2, [pc, #96]	@ (80066f4 <HAL_DMA_IRQHandler+0x42c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d009      	beq.n	80066aa <HAL_DMA_IRQHandler+0x3e2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a17      	ldr	r2, [pc, #92]	@ (80066f8 <HAL_DMA_IRQHandler+0x430>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d004      	beq.n	80066aa <HAL_DMA_IRQHandler+0x3e2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a15      	ldr	r2, [pc, #84]	@ (80066fc <HAL_DMA_IRQHandler+0x434>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d12a      	bne.n	8006700 <HAL_DMA_IRQHandler+0x438>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	bf14      	ite	ne
 80066b8:	2301      	movne	r3, #1
 80066ba:	2300      	moveq	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	e023      	b.n	8006708 <HAL_DMA_IRQHandler+0x440>
 80066c0:	40020010 	.word	0x40020010
 80066c4:	40020028 	.word	0x40020028
 80066c8:	40020040 	.word	0x40020040
 80066cc:	40020058 	.word	0x40020058
 80066d0:	40020070 	.word	0x40020070
 80066d4:	40020088 	.word	0x40020088
 80066d8:	400200a0 	.word	0x400200a0
 80066dc:	400200b8 	.word	0x400200b8
 80066e0:	40020410 	.word	0x40020410
 80066e4:	40020428 	.word	0x40020428
 80066e8:	40020440 	.word	0x40020440
 80066ec:	40020458 	.word	0x40020458
 80066f0:	40020470 	.word	0x40020470
 80066f4:	40020488 	.word	0x40020488
 80066f8:	400204a0 	.word	0x400204a0
 80066fc:	400204b8 	.word	0x400204b8
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2300      	movs	r3, #0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00d      	beq.n	8006728 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006710:	f003 031f 	and.w	r3, r3, #31
 8006714:	2204      	movs	r2, #4
 8006716:	409a      	lsls	r2, r3
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006720:	f043 0204 	orr.w	r2, r3, #4
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800672c:	f003 031f 	and.w	r3, r3, #31
 8006730:	2210      	movs	r2, #16
 8006732:	409a      	lsls	r2, r3
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	4013      	ands	r3, r2
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 80a6 	beq.w	800688a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a85      	ldr	r2, [pc, #532]	@ (8006958 <HAL_DMA_IRQHandler+0x690>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d04a      	beq.n	80067de <HAL_DMA_IRQHandler+0x516>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a83      	ldr	r2, [pc, #524]	@ (800695c <HAL_DMA_IRQHandler+0x694>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d045      	beq.n	80067de <HAL_DMA_IRQHandler+0x516>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a82      	ldr	r2, [pc, #520]	@ (8006960 <HAL_DMA_IRQHandler+0x698>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d040      	beq.n	80067de <HAL_DMA_IRQHandler+0x516>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a80      	ldr	r2, [pc, #512]	@ (8006964 <HAL_DMA_IRQHandler+0x69c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d03b      	beq.n	80067de <HAL_DMA_IRQHandler+0x516>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a7f      	ldr	r2, [pc, #508]	@ (8006968 <HAL_DMA_IRQHandler+0x6a0>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d036      	beq.n	80067de <HAL_DMA_IRQHandler+0x516>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a7d      	ldr	r2, [pc, #500]	@ (800696c <HAL_DMA_IRQHandler+0x6a4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d031      	beq.n	80067de <HAL_DMA_IRQHandler+0x516>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a7c      	ldr	r2, [pc, #496]	@ (8006970 <HAL_DMA_IRQHandler+0x6a8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d02c      	beq.n	80067de <HAL_DMA_IRQHandler+0x516>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a7a      	ldr	r2, [pc, #488]	@ (8006974 <HAL_DMA_IRQHandler+0x6ac>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d027      	beq.n	80067de <HAL_DMA_IRQHandler+0x516>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a79      	ldr	r2, [pc, #484]	@ (8006978 <HAL_DMA_IRQHandler+0x6b0>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d022      	beq.n	80067de <HAL_DMA_IRQHandler+0x516>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a77      	ldr	r2, [pc, #476]	@ (800697c <HAL_DMA_IRQHandler+0x6b4>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d01d      	beq.n	80067de <HAL_DMA_IRQHandler+0x516>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a76      	ldr	r2, [pc, #472]	@ (8006980 <HAL_DMA_IRQHandler+0x6b8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d018      	beq.n	80067de <HAL_DMA_IRQHandler+0x516>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a74      	ldr	r2, [pc, #464]	@ (8006984 <HAL_DMA_IRQHandler+0x6bc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d013      	beq.n	80067de <HAL_DMA_IRQHandler+0x516>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a73      	ldr	r2, [pc, #460]	@ (8006988 <HAL_DMA_IRQHandler+0x6c0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00e      	beq.n	80067de <HAL_DMA_IRQHandler+0x516>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a71      	ldr	r2, [pc, #452]	@ (800698c <HAL_DMA_IRQHandler+0x6c4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d009      	beq.n	80067de <HAL_DMA_IRQHandler+0x516>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a70      	ldr	r2, [pc, #448]	@ (8006990 <HAL_DMA_IRQHandler+0x6c8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d004      	beq.n	80067de <HAL_DMA_IRQHandler+0x516>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a6e      	ldr	r2, [pc, #440]	@ (8006994 <HAL_DMA_IRQHandler+0x6cc>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d10a      	bne.n	80067f4 <HAL_DMA_IRQHandler+0x52c>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0308 	and.w	r3, r3, #8
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	bf14      	ite	ne
 80067ec:	2301      	movne	r3, #1
 80067ee:	2300      	moveq	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	e009      	b.n	8006808 <HAL_DMA_IRQHandler+0x540>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0304 	and.w	r3, r3, #4
 80067fe:	2b00      	cmp	r3, #0
 8006800:	bf14      	ite	ne
 8006802:	2301      	movne	r3, #1
 8006804:	2300      	moveq	r3, #0
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	d03e      	beq.n	800688a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	2210      	movs	r2, #16
 8006816:	409a      	lsls	r2, r3
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d018      	beq.n	800685c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d108      	bne.n	800684a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683c:	2b00      	cmp	r3, #0
 800683e:	d024      	beq.n	800688a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	4798      	blx	r3
 8006848:	e01f      	b.n	800688a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800684e:	2b00      	cmp	r3, #0
 8006850:	d01b      	beq.n	800688a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	4798      	blx	r3
 800685a:	e016      	b.n	800688a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006866:	2b00      	cmp	r3, #0
 8006868:	d107      	bne.n	800687a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0208 	bic.w	r2, r2, #8
 8006878:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800688e:	f003 031f 	and.w	r3, r3, #31
 8006892:	2220      	movs	r2, #32
 8006894:	409a      	lsls	r2, r3
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	4013      	ands	r3, r2
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 8110 	beq.w	8006ac0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006958 <HAL_DMA_IRQHandler+0x690>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d04a      	beq.n	8006940 <HAL_DMA_IRQHandler+0x678>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a2b      	ldr	r2, [pc, #172]	@ (800695c <HAL_DMA_IRQHandler+0x694>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d045      	beq.n	8006940 <HAL_DMA_IRQHandler+0x678>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a29      	ldr	r2, [pc, #164]	@ (8006960 <HAL_DMA_IRQHandler+0x698>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d040      	beq.n	8006940 <HAL_DMA_IRQHandler+0x678>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a28      	ldr	r2, [pc, #160]	@ (8006964 <HAL_DMA_IRQHandler+0x69c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d03b      	beq.n	8006940 <HAL_DMA_IRQHandler+0x678>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a26      	ldr	r2, [pc, #152]	@ (8006968 <HAL_DMA_IRQHandler+0x6a0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d036      	beq.n	8006940 <HAL_DMA_IRQHandler+0x678>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a25      	ldr	r2, [pc, #148]	@ (800696c <HAL_DMA_IRQHandler+0x6a4>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d031      	beq.n	8006940 <HAL_DMA_IRQHandler+0x678>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a23      	ldr	r2, [pc, #140]	@ (8006970 <HAL_DMA_IRQHandler+0x6a8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d02c      	beq.n	8006940 <HAL_DMA_IRQHandler+0x678>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a22      	ldr	r2, [pc, #136]	@ (8006974 <HAL_DMA_IRQHandler+0x6ac>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d027      	beq.n	8006940 <HAL_DMA_IRQHandler+0x678>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a20      	ldr	r2, [pc, #128]	@ (8006978 <HAL_DMA_IRQHandler+0x6b0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d022      	beq.n	8006940 <HAL_DMA_IRQHandler+0x678>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a1f      	ldr	r2, [pc, #124]	@ (800697c <HAL_DMA_IRQHandler+0x6b4>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d01d      	beq.n	8006940 <HAL_DMA_IRQHandler+0x678>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1d      	ldr	r2, [pc, #116]	@ (8006980 <HAL_DMA_IRQHandler+0x6b8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d018      	beq.n	8006940 <HAL_DMA_IRQHandler+0x678>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1c      	ldr	r2, [pc, #112]	@ (8006984 <HAL_DMA_IRQHandler+0x6bc>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d013      	beq.n	8006940 <HAL_DMA_IRQHandler+0x678>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1a      	ldr	r2, [pc, #104]	@ (8006988 <HAL_DMA_IRQHandler+0x6c0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00e      	beq.n	8006940 <HAL_DMA_IRQHandler+0x678>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a19      	ldr	r2, [pc, #100]	@ (800698c <HAL_DMA_IRQHandler+0x6c4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d009      	beq.n	8006940 <HAL_DMA_IRQHandler+0x678>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a17      	ldr	r2, [pc, #92]	@ (8006990 <HAL_DMA_IRQHandler+0x6c8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d004      	beq.n	8006940 <HAL_DMA_IRQHandler+0x678>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a16      	ldr	r2, [pc, #88]	@ (8006994 <HAL_DMA_IRQHandler+0x6cc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d12b      	bne.n	8006998 <HAL_DMA_IRQHandler+0x6d0>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0310 	and.w	r3, r3, #16
 800694a:	2b00      	cmp	r3, #0
 800694c:	bf14      	ite	ne
 800694e:	2301      	movne	r3, #1
 8006950:	2300      	moveq	r3, #0
 8006952:	b2db      	uxtb	r3, r3
 8006954:	e02a      	b.n	80069ac <HAL_DMA_IRQHandler+0x6e4>
 8006956:	bf00      	nop
 8006958:	40020010 	.word	0x40020010
 800695c:	40020028 	.word	0x40020028
 8006960:	40020040 	.word	0x40020040
 8006964:	40020058 	.word	0x40020058
 8006968:	40020070 	.word	0x40020070
 800696c:	40020088 	.word	0x40020088
 8006970:	400200a0 	.word	0x400200a0
 8006974:	400200b8 	.word	0x400200b8
 8006978:	40020410 	.word	0x40020410
 800697c:	40020428 	.word	0x40020428
 8006980:	40020440 	.word	0x40020440
 8006984:	40020458 	.word	0x40020458
 8006988:	40020470 	.word	0x40020470
 800698c:	40020488 	.word	0x40020488
 8006990:	400204a0 	.word	0x400204a0
 8006994:	400204b8 	.word	0x400204b8
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bf14      	ite	ne
 80069a6:	2301      	movne	r3, #1
 80069a8:	2300      	moveq	r3, #0
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 8087 	beq.w	8006ac0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b6:	f003 031f 	and.w	r3, r3, #31
 80069ba:	2220      	movs	r2, #32
 80069bc:	409a      	lsls	r2, r3
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d139      	bne.n	8006a42 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0216 	bic.w	r2, r2, #22
 80069dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	695a      	ldr	r2, [r3, #20]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d103      	bne.n	80069fe <HAL_DMA_IRQHandler+0x736>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d007      	beq.n	8006a0e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 0208 	bic.w	r2, r2, #8
 8006a0c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a12:	f003 031f 	and.w	r3, r3, #31
 8006a16:	223f      	movs	r2, #63	@ 0x3f
 8006a18:	409a      	lsls	r2, r3
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 834a 	beq.w	80070cc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
          }
          return;
 8006a40:	e344      	b.n	80070cc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d018      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d108      	bne.n	8006a70 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d02c      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	e027      	b.n	8006ac0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d023      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
 8006a80:	e01e      	b.n	8006ac0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10f      	bne.n	8006ab0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0210 	bic.w	r2, r2, #16
 8006a9e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 8306 	beq.w	80070d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 8088 	beq.w	8006be8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2204      	movs	r2, #4
 8006adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a7a      	ldr	r2, [pc, #488]	@ (8006cd0 <HAL_DMA_IRQHandler+0xa08>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d04a      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x8b8>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a79      	ldr	r2, [pc, #484]	@ (8006cd4 <HAL_DMA_IRQHandler+0xa0c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d045      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x8b8>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a77      	ldr	r2, [pc, #476]	@ (8006cd8 <HAL_DMA_IRQHandler+0xa10>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d040      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x8b8>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a76      	ldr	r2, [pc, #472]	@ (8006cdc <HAL_DMA_IRQHandler+0xa14>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d03b      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x8b8>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a74      	ldr	r2, [pc, #464]	@ (8006ce0 <HAL_DMA_IRQHandler+0xa18>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d036      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x8b8>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a73      	ldr	r2, [pc, #460]	@ (8006ce4 <HAL_DMA_IRQHandler+0xa1c>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d031      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x8b8>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a71      	ldr	r2, [pc, #452]	@ (8006ce8 <HAL_DMA_IRQHandler+0xa20>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d02c      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x8b8>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a70      	ldr	r2, [pc, #448]	@ (8006cec <HAL_DMA_IRQHandler+0xa24>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d027      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x8b8>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a6e      	ldr	r2, [pc, #440]	@ (8006cf0 <HAL_DMA_IRQHandler+0xa28>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d022      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x8b8>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a6d      	ldr	r2, [pc, #436]	@ (8006cf4 <HAL_DMA_IRQHandler+0xa2c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d01d      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x8b8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a6b      	ldr	r2, [pc, #428]	@ (8006cf8 <HAL_DMA_IRQHandler+0xa30>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d018      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x8b8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a6a      	ldr	r2, [pc, #424]	@ (8006cfc <HAL_DMA_IRQHandler+0xa34>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d013      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x8b8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a68      	ldr	r2, [pc, #416]	@ (8006d00 <HAL_DMA_IRQHandler+0xa38>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00e      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x8b8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a67      	ldr	r2, [pc, #412]	@ (8006d04 <HAL_DMA_IRQHandler+0xa3c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d009      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x8b8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a65      	ldr	r2, [pc, #404]	@ (8006d08 <HAL_DMA_IRQHandler+0xa40>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d004      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x8b8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a64      	ldr	r2, [pc, #400]	@ (8006d0c <HAL_DMA_IRQHandler+0xa44>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d108      	bne.n	8006b92 <HAL_DMA_IRQHandler+0x8ca>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 0201 	bic.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	e007      	b.n	8006ba2 <HAL_DMA_IRQHandler+0x8da>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0201 	bic.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d307      	bcc.n	8006bbe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1f2      	bne.n	8006ba2 <HAL_DMA_IRQHandler+0x8da>
 8006bbc:	e000      	b.n	8006bc0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006bbe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d004      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2203      	movs	r2, #3
 8006bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006bd6:	e003      	b.n	8006be0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 8272 	beq.w	80070d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	4798      	blx	r3
 8006bfa:	e26c      	b.n	80070d6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a43      	ldr	r2, [pc, #268]	@ (8006d10 <HAL_DMA_IRQHandler+0xa48>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d022      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x984>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a42      	ldr	r2, [pc, #264]	@ (8006d14 <HAL_DMA_IRQHandler+0xa4c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d01d      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x984>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a40      	ldr	r2, [pc, #256]	@ (8006d18 <HAL_DMA_IRQHandler+0xa50>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d018      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x984>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a3f      	ldr	r2, [pc, #252]	@ (8006d1c <HAL_DMA_IRQHandler+0xa54>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d013      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x984>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a3d      	ldr	r2, [pc, #244]	@ (8006d20 <HAL_DMA_IRQHandler+0xa58>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00e      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x984>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a3c      	ldr	r2, [pc, #240]	@ (8006d24 <HAL_DMA_IRQHandler+0xa5c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d009      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x984>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a3a      	ldr	r2, [pc, #232]	@ (8006d28 <HAL_DMA_IRQHandler+0xa60>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d004      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x984>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a39      	ldr	r2, [pc, #228]	@ (8006d2c <HAL_DMA_IRQHandler+0xa64>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d101      	bne.n	8006c50 <HAL_DMA_IRQHandler+0x988>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e000      	b.n	8006c52 <HAL_DMA_IRQHandler+0x98a>
 8006c50:	2300      	movs	r3, #0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 823f 	beq.w	80070d6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c64:	f003 031f 	and.w	r3, r3, #31
 8006c68:	2204      	movs	r2, #4
 8006c6a:	409a      	lsls	r2, r3
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 80cd 	beq.w	8006e10 <HAL_DMA_IRQHandler+0xb48>
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f003 0304 	and.w	r3, r3, #4
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 80c7 	beq.w	8006e10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	2204      	movs	r2, #4
 8006c8c:	409a      	lsls	r2, r3
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d049      	beq.n	8006d30 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d109      	bne.n	8006cba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 8210 	beq.w	80070d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cb8:	e20a      	b.n	80070d0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 8206 	beq.w	80070d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ccc:	e200      	b.n	80070d0 <HAL_DMA_IRQHandler+0xe08>
 8006cce:	bf00      	nop
 8006cd0:	40020010 	.word	0x40020010
 8006cd4:	40020028 	.word	0x40020028
 8006cd8:	40020040 	.word	0x40020040
 8006cdc:	40020058 	.word	0x40020058
 8006ce0:	40020070 	.word	0x40020070
 8006ce4:	40020088 	.word	0x40020088
 8006ce8:	400200a0 	.word	0x400200a0
 8006cec:	400200b8 	.word	0x400200b8
 8006cf0:	40020410 	.word	0x40020410
 8006cf4:	40020428 	.word	0x40020428
 8006cf8:	40020440 	.word	0x40020440
 8006cfc:	40020458 	.word	0x40020458
 8006d00:	40020470 	.word	0x40020470
 8006d04:	40020488 	.word	0x40020488
 8006d08:	400204a0 	.word	0x400204a0
 8006d0c:	400204b8 	.word	0x400204b8
 8006d10:	58025408 	.word	0x58025408
 8006d14:	5802541c 	.word	0x5802541c
 8006d18:	58025430 	.word	0x58025430
 8006d1c:	58025444 	.word	0x58025444
 8006d20:	58025458 	.word	0x58025458
 8006d24:	5802546c 	.word	0x5802546c
 8006d28:	58025480 	.word	0x58025480
 8006d2c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d160      	bne.n	8006dfc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a7f      	ldr	r2, [pc, #508]	@ (8006f3c <HAL_DMA_IRQHandler+0xc74>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d04a      	beq.n	8006dda <HAL_DMA_IRQHandler+0xb12>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a7d      	ldr	r2, [pc, #500]	@ (8006f40 <HAL_DMA_IRQHandler+0xc78>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d045      	beq.n	8006dda <HAL_DMA_IRQHandler+0xb12>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a7c      	ldr	r2, [pc, #496]	@ (8006f44 <HAL_DMA_IRQHandler+0xc7c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d040      	beq.n	8006dda <HAL_DMA_IRQHandler+0xb12>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a7a      	ldr	r2, [pc, #488]	@ (8006f48 <HAL_DMA_IRQHandler+0xc80>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d03b      	beq.n	8006dda <HAL_DMA_IRQHandler+0xb12>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a79      	ldr	r2, [pc, #484]	@ (8006f4c <HAL_DMA_IRQHandler+0xc84>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d036      	beq.n	8006dda <HAL_DMA_IRQHandler+0xb12>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a77      	ldr	r2, [pc, #476]	@ (8006f50 <HAL_DMA_IRQHandler+0xc88>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d031      	beq.n	8006dda <HAL_DMA_IRQHandler+0xb12>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a76      	ldr	r2, [pc, #472]	@ (8006f54 <HAL_DMA_IRQHandler+0xc8c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d02c      	beq.n	8006dda <HAL_DMA_IRQHandler+0xb12>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a74      	ldr	r2, [pc, #464]	@ (8006f58 <HAL_DMA_IRQHandler+0xc90>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d027      	beq.n	8006dda <HAL_DMA_IRQHandler+0xb12>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a73      	ldr	r2, [pc, #460]	@ (8006f5c <HAL_DMA_IRQHandler+0xc94>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d022      	beq.n	8006dda <HAL_DMA_IRQHandler+0xb12>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a71      	ldr	r2, [pc, #452]	@ (8006f60 <HAL_DMA_IRQHandler+0xc98>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d01d      	beq.n	8006dda <HAL_DMA_IRQHandler+0xb12>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a70      	ldr	r2, [pc, #448]	@ (8006f64 <HAL_DMA_IRQHandler+0xc9c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d018      	beq.n	8006dda <HAL_DMA_IRQHandler+0xb12>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a6e      	ldr	r2, [pc, #440]	@ (8006f68 <HAL_DMA_IRQHandler+0xca0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d013      	beq.n	8006dda <HAL_DMA_IRQHandler+0xb12>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a6d      	ldr	r2, [pc, #436]	@ (8006f6c <HAL_DMA_IRQHandler+0xca4>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d00e      	beq.n	8006dda <HAL_DMA_IRQHandler+0xb12>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a6b      	ldr	r2, [pc, #428]	@ (8006f70 <HAL_DMA_IRQHandler+0xca8>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d009      	beq.n	8006dda <HAL_DMA_IRQHandler+0xb12>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a6a      	ldr	r2, [pc, #424]	@ (8006f74 <HAL_DMA_IRQHandler+0xcac>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d004      	beq.n	8006dda <HAL_DMA_IRQHandler+0xb12>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a68      	ldr	r2, [pc, #416]	@ (8006f78 <HAL_DMA_IRQHandler+0xcb0>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d108      	bne.n	8006dec <HAL_DMA_IRQHandler+0xb24>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0208 	bic.w	r2, r2, #8
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	e007      	b.n	8006dfc <HAL_DMA_IRQHandler+0xb34>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0204 	bic.w	r2, r2, #4
 8006dfa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 8165 	beq.w	80070d0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e0e:	e15f      	b.n	80070d0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	2202      	movs	r2, #2
 8006e1a:	409a      	lsls	r2, r3
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 80c5 	beq.w	8006fb0 <HAL_DMA_IRQHandler+0xce8>
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 80bf 	beq.w	8006fb0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e36:	f003 031f 	and.w	r3, r3, #31
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	409a      	lsls	r2, r3
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d018      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 813a 	beq.w	80070d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e68:	e134      	b.n	80070d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 8130 	beq.w	80070d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e7c:	e12a      	b.n	80070d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	f003 0320 	and.w	r3, r3, #32
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f040 8089 	bne.w	8006f9c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a2b      	ldr	r2, [pc, #172]	@ (8006f3c <HAL_DMA_IRQHandler+0xc74>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d04a      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc62>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a29      	ldr	r2, [pc, #164]	@ (8006f40 <HAL_DMA_IRQHandler+0xc78>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d045      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc62>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a28      	ldr	r2, [pc, #160]	@ (8006f44 <HAL_DMA_IRQHandler+0xc7c>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d040      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc62>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a26      	ldr	r2, [pc, #152]	@ (8006f48 <HAL_DMA_IRQHandler+0xc80>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d03b      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc62>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a25      	ldr	r2, [pc, #148]	@ (8006f4c <HAL_DMA_IRQHandler+0xc84>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d036      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc62>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a23      	ldr	r2, [pc, #140]	@ (8006f50 <HAL_DMA_IRQHandler+0xc88>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d031      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc62>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a22      	ldr	r2, [pc, #136]	@ (8006f54 <HAL_DMA_IRQHandler+0xc8c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d02c      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc62>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a20      	ldr	r2, [pc, #128]	@ (8006f58 <HAL_DMA_IRQHandler+0xc90>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d027      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc62>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a1f      	ldr	r2, [pc, #124]	@ (8006f5c <HAL_DMA_IRQHandler+0xc94>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d022      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc62>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f60 <HAL_DMA_IRQHandler+0xc98>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d01d      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc62>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8006f64 <HAL_DMA_IRQHandler+0xc9c>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d018      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc62>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a1a      	ldr	r2, [pc, #104]	@ (8006f68 <HAL_DMA_IRQHandler+0xca0>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d013      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc62>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a19      	ldr	r2, [pc, #100]	@ (8006f6c <HAL_DMA_IRQHandler+0xca4>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00e      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc62>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a17      	ldr	r2, [pc, #92]	@ (8006f70 <HAL_DMA_IRQHandler+0xca8>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d009      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc62>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a16      	ldr	r2, [pc, #88]	@ (8006f74 <HAL_DMA_IRQHandler+0xcac>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d004      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xc62>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a14      	ldr	r2, [pc, #80]	@ (8006f78 <HAL_DMA_IRQHandler+0xcb0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d128      	bne.n	8006f7c <HAL_DMA_IRQHandler+0xcb4>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0214 	bic.w	r2, r2, #20
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	e027      	b.n	8006f8c <HAL_DMA_IRQHandler+0xcc4>
 8006f3c:	40020010 	.word	0x40020010
 8006f40:	40020028 	.word	0x40020028
 8006f44:	40020040 	.word	0x40020040
 8006f48:	40020058 	.word	0x40020058
 8006f4c:	40020070 	.word	0x40020070
 8006f50:	40020088 	.word	0x40020088
 8006f54:	400200a0 	.word	0x400200a0
 8006f58:	400200b8 	.word	0x400200b8
 8006f5c:	40020410 	.word	0x40020410
 8006f60:	40020428 	.word	0x40020428
 8006f64:	40020440 	.word	0x40020440
 8006f68:	40020458 	.word	0x40020458
 8006f6c:	40020470 	.word	0x40020470
 8006f70:	40020488 	.word	0x40020488
 8006f74:	400204a0 	.word	0x400204a0
 8006f78:	400204b8 	.word	0x400204b8
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 020a 	bic.w	r2, r2, #10
 8006f8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 8097 	beq.w	80070d4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fae:	e091      	b.n	80070d4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fb4:	f003 031f 	and.w	r3, r3, #31
 8006fb8:	2208      	movs	r2, #8
 8006fba:	409a      	lsls	r2, r3
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 8088 	beq.w	80070d6 <HAL_DMA_IRQHandler+0xe0e>
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f003 0308 	and.w	r3, r3, #8
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 8082 	beq.w	80070d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a41      	ldr	r2, [pc, #260]	@ (80070dc <HAL_DMA_IRQHandler+0xe14>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d04a      	beq.n	8007072 <HAL_DMA_IRQHandler+0xdaa>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a3f      	ldr	r2, [pc, #252]	@ (80070e0 <HAL_DMA_IRQHandler+0xe18>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d045      	beq.n	8007072 <HAL_DMA_IRQHandler+0xdaa>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a3e      	ldr	r2, [pc, #248]	@ (80070e4 <HAL_DMA_IRQHandler+0xe1c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d040      	beq.n	8007072 <HAL_DMA_IRQHandler+0xdaa>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a3c      	ldr	r2, [pc, #240]	@ (80070e8 <HAL_DMA_IRQHandler+0xe20>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d03b      	beq.n	8007072 <HAL_DMA_IRQHandler+0xdaa>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a3b      	ldr	r2, [pc, #236]	@ (80070ec <HAL_DMA_IRQHandler+0xe24>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d036      	beq.n	8007072 <HAL_DMA_IRQHandler+0xdaa>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a39      	ldr	r2, [pc, #228]	@ (80070f0 <HAL_DMA_IRQHandler+0xe28>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d031      	beq.n	8007072 <HAL_DMA_IRQHandler+0xdaa>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a38      	ldr	r2, [pc, #224]	@ (80070f4 <HAL_DMA_IRQHandler+0xe2c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d02c      	beq.n	8007072 <HAL_DMA_IRQHandler+0xdaa>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a36      	ldr	r2, [pc, #216]	@ (80070f8 <HAL_DMA_IRQHandler+0xe30>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d027      	beq.n	8007072 <HAL_DMA_IRQHandler+0xdaa>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a35      	ldr	r2, [pc, #212]	@ (80070fc <HAL_DMA_IRQHandler+0xe34>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d022      	beq.n	8007072 <HAL_DMA_IRQHandler+0xdaa>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a33      	ldr	r2, [pc, #204]	@ (8007100 <HAL_DMA_IRQHandler+0xe38>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d01d      	beq.n	8007072 <HAL_DMA_IRQHandler+0xdaa>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a32      	ldr	r2, [pc, #200]	@ (8007104 <HAL_DMA_IRQHandler+0xe3c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d018      	beq.n	8007072 <HAL_DMA_IRQHandler+0xdaa>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a30      	ldr	r2, [pc, #192]	@ (8007108 <HAL_DMA_IRQHandler+0xe40>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d013      	beq.n	8007072 <HAL_DMA_IRQHandler+0xdaa>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a2f      	ldr	r2, [pc, #188]	@ (800710c <HAL_DMA_IRQHandler+0xe44>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00e      	beq.n	8007072 <HAL_DMA_IRQHandler+0xdaa>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a2d      	ldr	r2, [pc, #180]	@ (8007110 <HAL_DMA_IRQHandler+0xe48>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d009      	beq.n	8007072 <HAL_DMA_IRQHandler+0xdaa>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a2c      	ldr	r2, [pc, #176]	@ (8007114 <HAL_DMA_IRQHandler+0xe4c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d004      	beq.n	8007072 <HAL_DMA_IRQHandler+0xdaa>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a2a      	ldr	r2, [pc, #168]	@ (8007118 <HAL_DMA_IRQHandler+0xe50>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d108      	bne.n	8007084 <HAL_DMA_IRQHandler+0xdbc>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 021c 	bic.w	r2, r2, #28
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	e007      	b.n	8007094 <HAL_DMA_IRQHandler+0xdcc>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 020e 	bic.w	r2, r2, #14
 8007092:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007098:	f003 031f 	and.w	r3, r3, #31
 800709c:	2201      	movs	r2, #1
 800709e:	409a      	lsls	r2, r3
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	4798      	blx	r3
 80070ca:	e004      	b.n	80070d6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80070cc:	bf00      	nop
 80070ce:	e002      	b.n	80070d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070d0:	bf00      	nop
 80070d2:	e000      	b.n	80070d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070d4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070d6:	3728      	adds	r7, #40	@ 0x28
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	40020010 	.word	0x40020010
 80070e0:	40020028 	.word	0x40020028
 80070e4:	40020040 	.word	0x40020040
 80070e8:	40020058 	.word	0x40020058
 80070ec:	40020070 	.word	0x40020070
 80070f0:	40020088 	.word	0x40020088
 80070f4:	400200a0 	.word	0x400200a0
 80070f8:	400200b8 	.word	0x400200b8
 80070fc:	40020410 	.word	0x40020410
 8007100:	40020428 	.word	0x40020428
 8007104:	40020440 	.word	0x40020440
 8007108:	40020458 	.word	0x40020458
 800710c:	40020470 	.word	0x40020470
 8007110:	40020488 	.word	0x40020488
 8007114:	400204a0 	.word	0x400204a0
 8007118:	400204b8 	.word	0x400204b8

0800711c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007134:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a7f      	ldr	r2, [pc, #508]	@ (8007338 <DMA_SetConfig+0x21c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d072      	beq.n	8007226 <DMA_SetConfig+0x10a>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a7d      	ldr	r2, [pc, #500]	@ (800733c <DMA_SetConfig+0x220>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d06d      	beq.n	8007226 <DMA_SetConfig+0x10a>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a7c      	ldr	r2, [pc, #496]	@ (8007340 <DMA_SetConfig+0x224>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d068      	beq.n	8007226 <DMA_SetConfig+0x10a>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a7a      	ldr	r2, [pc, #488]	@ (8007344 <DMA_SetConfig+0x228>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d063      	beq.n	8007226 <DMA_SetConfig+0x10a>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a79      	ldr	r2, [pc, #484]	@ (8007348 <DMA_SetConfig+0x22c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d05e      	beq.n	8007226 <DMA_SetConfig+0x10a>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a77      	ldr	r2, [pc, #476]	@ (800734c <DMA_SetConfig+0x230>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d059      	beq.n	8007226 <DMA_SetConfig+0x10a>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a76      	ldr	r2, [pc, #472]	@ (8007350 <DMA_SetConfig+0x234>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d054      	beq.n	8007226 <DMA_SetConfig+0x10a>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a74      	ldr	r2, [pc, #464]	@ (8007354 <DMA_SetConfig+0x238>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d04f      	beq.n	8007226 <DMA_SetConfig+0x10a>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a73      	ldr	r2, [pc, #460]	@ (8007358 <DMA_SetConfig+0x23c>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d04a      	beq.n	8007226 <DMA_SetConfig+0x10a>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a71      	ldr	r2, [pc, #452]	@ (800735c <DMA_SetConfig+0x240>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d045      	beq.n	8007226 <DMA_SetConfig+0x10a>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a70      	ldr	r2, [pc, #448]	@ (8007360 <DMA_SetConfig+0x244>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d040      	beq.n	8007226 <DMA_SetConfig+0x10a>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a6e      	ldr	r2, [pc, #440]	@ (8007364 <DMA_SetConfig+0x248>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d03b      	beq.n	8007226 <DMA_SetConfig+0x10a>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a6d      	ldr	r2, [pc, #436]	@ (8007368 <DMA_SetConfig+0x24c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d036      	beq.n	8007226 <DMA_SetConfig+0x10a>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a6b      	ldr	r2, [pc, #428]	@ (800736c <DMA_SetConfig+0x250>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d031      	beq.n	8007226 <DMA_SetConfig+0x10a>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a6a      	ldr	r2, [pc, #424]	@ (8007370 <DMA_SetConfig+0x254>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d02c      	beq.n	8007226 <DMA_SetConfig+0x10a>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a68      	ldr	r2, [pc, #416]	@ (8007374 <DMA_SetConfig+0x258>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d027      	beq.n	8007226 <DMA_SetConfig+0x10a>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a67      	ldr	r2, [pc, #412]	@ (8007378 <DMA_SetConfig+0x25c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d022      	beq.n	8007226 <DMA_SetConfig+0x10a>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a65      	ldr	r2, [pc, #404]	@ (800737c <DMA_SetConfig+0x260>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d01d      	beq.n	8007226 <DMA_SetConfig+0x10a>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a64      	ldr	r2, [pc, #400]	@ (8007380 <DMA_SetConfig+0x264>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d018      	beq.n	8007226 <DMA_SetConfig+0x10a>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a62      	ldr	r2, [pc, #392]	@ (8007384 <DMA_SetConfig+0x268>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d013      	beq.n	8007226 <DMA_SetConfig+0x10a>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a61      	ldr	r2, [pc, #388]	@ (8007388 <DMA_SetConfig+0x26c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d00e      	beq.n	8007226 <DMA_SetConfig+0x10a>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a5f      	ldr	r2, [pc, #380]	@ (800738c <DMA_SetConfig+0x270>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d009      	beq.n	8007226 <DMA_SetConfig+0x10a>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a5e      	ldr	r2, [pc, #376]	@ (8007390 <DMA_SetConfig+0x274>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d004      	beq.n	8007226 <DMA_SetConfig+0x10a>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a5c      	ldr	r2, [pc, #368]	@ (8007394 <DMA_SetConfig+0x278>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d101      	bne.n	800722a <DMA_SetConfig+0x10e>
 8007226:	2301      	movs	r3, #1
 8007228:	e000      	b.n	800722c <DMA_SetConfig+0x110>
 800722a:	2300      	movs	r3, #0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00d      	beq.n	800724c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007238:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800724a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a39      	ldr	r2, [pc, #228]	@ (8007338 <DMA_SetConfig+0x21c>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d04a      	beq.n	80072ec <DMA_SetConfig+0x1d0>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a38      	ldr	r2, [pc, #224]	@ (800733c <DMA_SetConfig+0x220>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d045      	beq.n	80072ec <DMA_SetConfig+0x1d0>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a36      	ldr	r2, [pc, #216]	@ (8007340 <DMA_SetConfig+0x224>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d040      	beq.n	80072ec <DMA_SetConfig+0x1d0>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a35      	ldr	r2, [pc, #212]	@ (8007344 <DMA_SetConfig+0x228>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d03b      	beq.n	80072ec <DMA_SetConfig+0x1d0>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a33      	ldr	r2, [pc, #204]	@ (8007348 <DMA_SetConfig+0x22c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d036      	beq.n	80072ec <DMA_SetConfig+0x1d0>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a32      	ldr	r2, [pc, #200]	@ (800734c <DMA_SetConfig+0x230>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d031      	beq.n	80072ec <DMA_SetConfig+0x1d0>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a30      	ldr	r2, [pc, #192]	@ (8007350 <DMA_SetConfig+0x234>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d02c      	beq.n	80072ec <DMA_SetConfig+0x1d0>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a2f      	ldr	r2, [pc, #188]	@ (8007354 <DMA_SetConfig+0x238>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d027      	beq.n	80072ec <DMA_SetConfig+0x1d0>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007358 <DMA_SetConfig+0x23c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d022      	beq.n	80072ec <DMA_SetConfig+0x1d0>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a2c      	ldr	r2, [pc, #176]	@ (800735c <DMA_SetConfig+0x240>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d01d      	beq.n	80072ec <DMA_SetConfig+0x1d0>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a2a      	ldr	r2, [pc, #168]	@ (8007360 <DMA_SetConfig+0x244>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d018      	beq.n	80072ec <DMA_SetConfig+0x1d0>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a29      	ldr	r2, [pc, #164]	@ (8007364 <DMA_SetConfig+0x248>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d013      	beq.n	80072ec <DMA_SetConfig+0x1d0>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a27      	ldr	r2, [pc, #156]	@ (8007368 <DMA_SetConfig+0x24c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00e      	beq.n	80072ec <DMA_SetConfig+0x1d0>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a26      	ldr	r2, [pc, #152]	@ (800736c <DMA_SetConfig+0x250>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d009      	beq.n	80072ec <DMA_SetConfig+0x1d0>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a24      	ldr	r2, [pc, #144]	@ (8007370 <DMA_SetConfig+0x254>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d004      	beq.n	80072ec <DMA_SetConfig+0x1d0>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a23      	ldr	r2, [pc, #140]	@ (8007374 <DMA_SetConfig+0x258>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d101      	bne.n	80072f0 <DMA_SetConfig+0x1d4>
 80072ec:	2301      	movs	r3, #1
 80072ee:	e000      	b.n	80072f2 <DMA_SetConfig+0x1d6>
 80072f0:	2300      	movs	r3, #0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d059      	beq.n	80073aa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072fa:	f003 031f 	and.w	r3, r3, #31
 80072fe:	223f      	movs	r2, #63	@ 0x3f
 8007300:	409a      	lsls	r2, r3
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007314:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2b40      	cmp	r3, #64	@ 0x40
 8007324:	d138      	bne.n	8007398 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007336:	e086      	b.n	8007446 <DMA_SetConfig+0x32a>
 8007338:	40020010 	.word	0x40020010
 800733c:	40020028 	.word	0x40020028
 8007340:	40020040 	.word	0x40020040
 8007344:	40020058 	.word	0x40020058
 8007348:	40020070 	.word	0x40020070
 800734c:	40020088 	.word	0x40020088
 8007350:	400200a0 	.word	0x400200a0
 8007354:	400200b8 	.word	0x400200b8
 8007358:	40020410 	.word	0x40020410
 800735c:	40020428 	.word	0x40020428
 8007360:	40020440 	.word	0x40020440
 8007364:	40020458 	.word	0x40020458
 8007368:	40020470 	.word	0x40020470
 800736c:	40020488 	.word	0x40020488
 8007370:	400204a0 	.word	0x400204a0
 8007374:	400204b8 	.word	0x400204b8
 8007378:	58025408 	.word	0x58025408
 800737c:	5802541c 	.word	0x5802541c
 8007380:	58025430 	.word	0x58025430
 8007384:	58025444 	.word	0x58025444
 8007388:	58025458 	.word	0x58025458
 800738c:	5802546c 	.word	0x5802546c
 8007390:	58025480 	.word	0x58025480
 8007394:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	60da      	str	r2, [r3, #12]
}
 80073a8:	e04d      	b.n	8007446 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a29      	ldr	r2, [pc, #164]	@ (8007454 <DMA_SetConfig+0x338>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d022      	beq.n	80073fa <DMA_SetConfig+0x2de>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a27      	ldr	r2, [pc, #156]	@ (8007458 <DMA_SetConfig+0x33c>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d01d      	beq.n	80073fa <DMA_SetConfig+0x2de>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a26      	ldr	r2, [pc, #152]	@ (800745c <DMA_SetConfig+0x340>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d018      	beq.n	80073fa <DMA_SetConfig+0x2de>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a24      	ldr	r2, [pc, #144]	@ (8007460 <DMA_SetConfig+0x344>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d013      	beq.n	80073fa <DMA_SetConfig+0x2de>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a23      	ldr	r2, [pc, #140]	@ (8007464 <DMA_SetConfig+0x348>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d00e      	beq.n	80073fa <DMA_SetConfig+0x2de>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a21      	ldr	r2, [pc, #132]	@ (8007468 <DMA_SetConfig+0x34c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d009      	beq.n	80073fa <DMA_SetConfig+0x2de>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a20      	ldr	r2, [pc, #128]	@ (800746c <DMA_SetConfig+0x350>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d004      	beq.n	80073fa <DMA_SetConfig+0x2de>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1e      	ldr	r2, [pc, #120]	@ (8007470 <DMA_SetConfig+0x354>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d101      	bne.n	80073fe <DMA_SetConfig+0x2e2>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e000      	b.n	8007400 <DMA_SetConfig+0x2e4>
 80073fe:	2300      	movs	r3, #0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d020      	beq.n	8007446 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007408:	f003 031f 	and.w	r3, r3, #31
 800740c:	2201      	movs	r2, #1
 800740e:	409a      	lsls	r2, r3
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	2b40      	cmp	r3, #64	@ 0x40
 8007422:	d108      	bne.n	8007436 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	60da      	str	r2, [r3, #12]
}
 8007434:	e007      	b.n	8007446 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	60da      	str	r2, [r3, #12]
}
 8007446:	bf00      	nop
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	58025408 	.word	0x58025408
 8007458:	5802541c 	.word	0x5802541c
 800745c:	58025430 	.word	0x58025430
 8007460:	58025444 	.word	0x58025444
 8007464:	58025458 	.word	0x58025458
 8007468:	5802546c 	.word	0x5802546c
 800746c:	58025480 	.word	0x58025480
 8007470:	58025494 	.word	0x58025494

08007474 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a42      	ldr	r2, [pc, #264]	@ (800758c <DMA_CalcBaseAndBitshift+0x118>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d04a      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xa8>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a41      	ldr	r2, [pc, #260]	@ (8007590 <DMA_CalcBaseAndBitshift+0x11c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d045      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xa8>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a3f      	ldr	r2, [pc, #252]	@ (8007594 <DMA_CalcBaseAndBitshift+0x120>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d040      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xa8>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a3e      	ldr	r2, [pc, #248]	@ (8007598 <DMA_CalcBaseAndBitshift+0x124>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d03b      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xa8>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a3c      	ldr	r2, [pc, #240]	@ (800759c <DMA_CalcBaseAndBitshift+0x128>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d036      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xa8>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a3b      	ldr	r2, [pc, #236]	@ (80075a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d031      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xa8>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a39      	ldr	r2, [pc, #228]	@ (80075a4 <DMA_CalcBaseAndBitshift+0x130>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d02c      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xa8>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a38      	ldr	r2, [pc, #224]	@ (80075a8 <DMA_CalcBaseAndBitshift+0x134>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d027      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xa8>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a36      	ldr	r2, [pc, #216]	@ (80075ac <DMA_CalcBaseAndBitshift+0x138>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d022      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xa8>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a35      	ldr	r2, [pc, #212]	@ (80075b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d01d      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xa8>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a33      	ldr	r2, [pc, #204]	@ (80075b4 <DMA_CalcBaseAndBitshift+0x140>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d018      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xa8>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a32      	ldr	r2, [pc, #200]	@ (80075b8 <DMA_CalcBaseAndBitshift+0x144>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d013      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xa8>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a30      	ldr	r2, [pc, #192]	@ (80075bc <DMA_CalcBaseAndBitshift+0x148>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d00e      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xa8>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a2f      	ldr	r2, [pc, #188]	@ (80075c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d009      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xa8>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a2d      	ldr	r2, [pc, #180]	@ (80075c4 <DMA_CalcBaseAndBitshift+0x150>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d004      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xa8>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a2c      	ldr	r2, [pc, #176]	@ (80075c8 <DMA_CalcBaseAndBitshift+0x154>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d101      	bne.n	8007520 <DMA_CalcBaseAndBitshift+0xac>
 800751c:	2301      	movs	r3, #1
 800751e:	e000      	b.n	8007522 <DMA_CalcBaseAndBitshift+0xae>
 8007520:	2300      	movs	r3, #0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d024      	beq.n	8007570 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	b2db      	uxtb	r3, r3
 800752c:	3b10      	subs	r3, #16
 800752e:	4a27      	ldr	r2, [pc, #156]	@ (80075cc <DMA_CalcBaseAndBitshift+0x158>)
 8007530:	fba2 2303 	umull	r2, r3, r2, r3
 8007534:	091b      	lsrs	r3, r3, #4
 8007536:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f003 0307 	and.w	r3, r3, #7
 800753e:	4a24      	ldr	r2, [pc, #144]	@ (80075d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007540:	5cd3      	ldrb	r3, [r2, r3]
 8007542:	461a      	mov	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2b03      	cmp	r3, #3
 800754c:	d908      	bls.n	8007560 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	4b1f      	ldr	r3, [pc, #124]	@ (80075d4 <DMA_CalcBaseAndBitshift+0x160>)
 8007556:	4013      	ands	r3, r2
 8007558:	1d1a      	adds	r2, r3, #4
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	659a      	str	r2, [r3, #88]	@ 0x58
 800755e:	e00d      	b.n	800757c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	461a      	mov	r2, r3
 8007566:	4b1b      	ldr	r3, [pc, #108]	@ (80075d4 <DMA_CalcBaseAndBitshift+0x160>)
 8007568:	4013      	ands	r3, r2
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	6593      	str	r3, [r2, #88]	@ 0x58
 800756e:	e005      	b.n	800757c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007580:	4618      	mov	r0, r3
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	40020010 	.word	0x40020010
 8007590:	40020028 	.word	0x40020028
 8007594:	40020040 	.word	0x40020040
 8007598:	40020058 	.word	0x40020058
 800759c:	40020070 	.word	0x40020070
 80075a0:	40020088 	.word	0x40020088
 80075a4:	400200a0 	.word	0x400200a0
 80075a8:	400200b8 	.word	0x400200b8
 80075ac:	40020410 	.word	0x40020410
 80075b0:	40020428 	.word	0x40020428
 80075b4:	40020440 	.word	0x40020440
 80075b8:	40020458 	.word	0x40020458
 80075bc:	40020470 	.word	0x40020470
 80075c0:	40020488 	.word	0x40020488
 80075c4:	400204a0 	.word	0x400204a0
 80075c8:	400204b8 	.word	0x400204b8
 80075cc:	aaaaaaab 	.word	0xaaaaaaab
 80075d0:	0800f0d4 	.word	0x0800f0d4
 80075d4:	fffffc00 	.word	0xfffffc00

080075d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d120      	bne.n	800762e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d858      	bhi.n	80076a6 <DMA_CheckFifoParam+0xce>
 80075f4:	a201      	add	r2, pc, #4	@ (adr r2, 80075fc <DMA_CheckFifoParam+0x24>)
 80075f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fa:	bf00      	nop
 80075fc:	0800760d 	.word	0x0800760d
 8007600:	0800761f 	.word	0x0800761f
 8007604:	0800760d 	.word	0x0800760d
 8007608:	080076a7 	.word	0x080076a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007610:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d048      	beq.n	80076aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800761c:	e045      	b.n	80076aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007622:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007626:	d142      	bne.n	80076ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800762c:	e03f      	b.n	80076ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007636:	d123      	bne.n	8007680 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763c:	2b03      	cmp	r3, #3
 800763e:	d838      	bhi.n	80076b2 <DMA_CheckFifoParam+0xda>
 8007640:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <DMA_CheckFifoParam+0x70>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	08007659 	.word	0x08007659
 800764c:	0800765f 	.word	0x0800765f
 8007650:	08007659 	.word	0x08007659
 8007654:	08007671 	.word	0x08007671
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	73fb      	strb	r3, [r7, #15]
        break;
 800765c:	e030      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007662:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d025      	beq.n	80076b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800766e:	e022      	b.n	80076b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007674:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007678:	d11f      	bne.n	80076ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800767e:	e01c      	b.n	80076ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007684:	2b02      	cmp	r3, #2
 8007686:	d902      	bls.n	800768e <DMA_CheckFifoParam+0xb6>
 8007688:	2b03      	cmp	r3, #3
 800768a:	d003      	beq.n	8007694 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800768c:	e018      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	73fb      	strb	r3, [r7, #15]
        break;
 8007692:	e015      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007698:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00e      	beq.n	80076be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	73fb      	strb	r3, [r7, #15]
    break;
 80076a4:	e00b      	b.n	80076be <DMA_CheckFifoParam+0xe6>
        break;
 80076a6:	bf00      	nop
 80076a8:	e00a      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
        break;
 80076aa:	bf00      	nop
 80076ac:	e008      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
        break;
 80076ae:	bf00      	nop
 80076b0:	e006      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
        break;
 80076b2:	bf00      	nop
 80076b4:	e004      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
        break;
 80076b6:	bf00      	nop
 80076b8:	e002      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
        break;
 80076ba:	bf00      	nop
 80076bc:	e000      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
    break;
 80076be:	bf00      	nop
    }
  }

  return status;
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop

080076d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a38      	ldr	r2, [pc, #224]	@ (80077c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d022      	beq.n	800772e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a36      	ldr	r2, [pc, #216]	@ (80077c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d01d      	beq.n	800772e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a35      	ldr	r2, [pc, #212]	@ (80077cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d018      	beq.n	800772e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a33      	ldr	r2, [pc, #204]	@ (80077d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d013      	beq.n	800772e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a32      	ldr	r2, [pc, #200]	@ (80077d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d00e      	beq.n	800772e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a30      	ldr	r2, [pc, #192]	@ (80077d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d009      	beq.n	800772e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a2f      	ldr	r2, [pc, #188]	@ (80077dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d004      	beq.n	800772e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a2d      	ldr	r2, [pc, #180]	@ (80077e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d101      	bne.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800772e:	2301      	movs	r3, #1
 8007730:	e000      	b.n	8007734 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007732:	2300      	movs	r3, #0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d01a      	beq.n	800776e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	3b08      	subs	r3, #8
 8007740:	4a28      	ldr	r2, [pc, #160]	@ (80077e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007742:	fba2 2303 	umull	r2, r3, r2, r3
 8007746:	091b      	lsrs	r3, r3, #4
 8007748:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	4b26      	ldr	r3, [pc, #152]	@ (80077e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	461a      	mov	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a24      	ldr	r2, [pc, #144]	@ (80077ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800775c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f003 031f 	and.w	r3, r3, #31
 8007764:	2201      	movs	r2, #1
 8007766:	409a      	lsls	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800776c:	e024      	b.n	80077b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	3b10      	subs	r3, #16
 8007776:	4a1e      	ldr	r2, [pc, #120]	@ (80077f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007778:	fba2 2303 	umull	r2, r3, r2, r3
 800777c:	091b      	lsrs	r3, r3, #4
 800777e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4a1c      	ldr	r2, [pc, #112]	@ (80077f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d806      	bhi.n	8007796 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	4a1b      	ldr	r2, [pc, #108]	@ (80077f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d902      	bls.n	8007796 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	3308      	adds	r3, #8
 8007794:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4b18      	ldr	r3, [pc, #96]	@ (80077fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800779a:	4413      	add	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	461a      	mov	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a16      	ldr	r2, [pc, #88]	@ (8007800 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80077a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f003 031f 	and.w	r3, r3, #31
 80077b0:	2201      	movs	r2, #1
 80077b2:	409a      	lsls	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80077b8:	bf00      	nop
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	58025408 	.word	0x58025408
 80077c8:	5802541c 	.word	0x5802541c
 80077cc:	58025430 	.word	0x58025430
 80077d0:	58025444 	.word	0x58025444
 80077d4:	58025458 	.word	0x58025458
 80077d8:	5802546c 	.word	0x5802546c
 80077dc:	58025480 	.word	0x58025480
 80077e0:	58025494 	.word	0x58025494
 80077e4:	cccccccd 	.word	0xcccccccd
 80077e8:	16009600 	.word	0x16009600
 80077ec:	58025880 	.word	0x58025880
 80077f0:	aaaaaaab 	.word	0xaaaaaaab
 80077f4:	400204b8 	.word	0x400204b8
 80077f8:	4002040f 	.word	0x4002040f
 80077fc:	10008200 	.word	0x10008200
 8007800:	40020880 	.word	0x40020880

08007804 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	b2db      	uxtb	r3, r3
 8007812:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d04a      	beq.n	80078b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b08      	cmp	r3, #8
 800781e:	d847      	bhi.n	80078b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a25      	ldr	r2, [pc, #148]	@ (80078bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d022      	beq.n	8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a24      	ldr	r2, [pc, #144]	@ (80078c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d01d      	beq.n	8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a22      	ldr	r2, [pc, #136]	@ (80078c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d018      	beq.n	8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a21      	ldr	r2, [pc, #132]	@ (80078c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d013      	beq.n	8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a1f      	ldr	r2, [pc, #124]	@ (80078cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d00e      	beq.n	8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a1e      	ldr	r2, [pc, #120]	@ (80078d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d009      	beq.n	8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a1c      	ldr	r2, [pc, #112]	@ (80078d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d004      	beq.n	8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a1b      	ldr	r2, [pc, #108]	@ (80078d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d101      	bne.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007870:	2301      	movs	r3, #1
 8007872:	e000      	b.n	8007876 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007874:	2300      	movs	r3, #0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	4b17      	ldr	r3, [pc, #92]	@ (80078dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	461a      	mov	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a15      	ldr	r2, [pc, #84]	@ (80078e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800788c:	671a      	str	r2, [r3, #112]	@ 0x70
 800788e:	e009      	b.n	80078a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4b14      	ldr	r3, [pc, #80]	@ (80078e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	461a      	mov	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a11      	ldr	r2, [pc, #68]	@ (80078e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80078a2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	2201      	movs	r2, #1
 80078aa:	409a      	lsls	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80078b0:	bf00      	nop
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	58025408 	.word	0x58025408
 80078c0:	5802541c 	.word	0x5802541c
 80078c4:	58025430 	.word	0x58025430
 80078c8:	58025444 	.word	0x58025444
 80078cc:	58025458 	.word	0x58025458
 80078d0:	5802546c 	.word	0x5802546c
 80078d4:	58025480 	.word	0x58025480
 80078d8:	58025494 	.word	0x58025494
 80078dc:	1600963f 	.word	0x1600963f
 80078e0:	58025940 	.word	0x58025940
 80078e4:	1000823f 	.word	0x1000823f
 80078e8:	40020940 	.word	0x40020940

080078ec <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	460b      	mov	r3, r1
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e00a      	b.n	800791e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d103      	bne.n	8007916 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	605a      	str	r2, [r3, #4]
      break;
 8007914:	e002      	b.n	800791c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	75fb      	strb	r3, [r7, #23]
      break;
 800791a:	bf00      	nop
  }

  return status;
 800791c:	7dfb      	ldrb	r3, [r7, #23]
}
 800791e:	4618      	mov	r0, r3
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e003      	b.n	8007946 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007944:	2300      	movs	r3, #0
  }
}
 8007946:	4618      	mov	r0, r3
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
	...

08007954 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	0c1b      	lsrs	r3, r3, #16
 8007962:	f003 0303 	and.w	r3, r3, #3
 8007966:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 031f 	and.w	r3, r3, #31
 8007970:	2201      	movs	r2, #1
 8007972:	fa02 f303 	lsl.w	r3, r2, r3
 8007976:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8007978:	f7fd fba4 	bl	80050c4 <HAL_GetCurrentCPUID>
 800797c:	4603      	mov	r3, r0
 800797e:	2b03      	cmp	r3, #3
 8007980:	d105      	bne.n	800798e <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	011a      	lsls	r2, r3, #4
 8007986:	4b0f      	ldr	r3, [pc, #60]	@ (80079c4 <HAL_EXTI_IRQHandler+0x70>)
 8007988:	4413      	add	r3, r2
 800798a:	617b      	str	r3, [r7, #20]
 800798c:	e004      	b.n	8007998 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	011a      	lsls	r2, r3, #4
 8007992:	4b0d      	ldr	r3, [pc, #52]	@ (80079c8 <HAL_EXTI_IRQHandler+0x74>)
 8007994:	4413      	add	r3, r2
 8007996:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	4013      	ands	r3, r2
 80079a0:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d009      	beq.n	80079bc <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	4798      	blx	r3
    }
  }
}
 80079bc:	bf00      	nop
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	58000088 	.word	0x58000088
 80079c8:	580000c8 	.word	0x580000c8

080079cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b089      	sub	sp, #36	@ 0x24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80079da:	4b89      	ldr	r3, [pc, #548]	@ (8007c00 <HAL_GPIO_Init+0x234>)
 80079dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079de:	e194      	b.n	8007d0a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	2101      	movs	r1, #1
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	fa01 f303 	lsl.w	r3, r1, r3
 80079ec:	4013      	ands	r3, r2
 80079ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 8186 	beq.w	8007d04 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f003 0303 	and.w	r3, r3, #3
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d005      	beq.n	8007a10 <HAL_GPIO_Init+0x44>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f003 0303 	and.w	r3, r3, #3
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d130      	bne.n	8007a72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	2203      	movs	r2, #3
 8007a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a20:	43db      	mvns	r3, r3
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	4013      	ands	r3, r2
 8007a26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	005b      	lsls	r3, r3, #1
 8007a30:	fa02 f303 	lsl.w	r3, r2, r3
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	69ba      	ldr	r2, [r7, #24]
 8007a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a46:	2201      	movs	r2, #1
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4e:	43db      	mvns	r3, r3
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	4013      	ands	r3, r2
 8007a54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	091b      	lsrs	r3, r3, #4
 8007a5c:	f003 0201 	and.w	r2, r3, #1
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	fa02 f303 	lsl.w	r3, r2, r3
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f003 0303 	and.w	r3, r3, #3
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d017      	beq.n	8007aae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	2203      	movs	r2, #3
 8007a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8e:	43db      	mvns	r3, r3
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	4013      	ands	r3, r2
 8007a94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	689a      	ldr	r2, [r3, #8]
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f003 0303 	and.w	r3, r3, #3
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d123      	bne.n	8007b02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	08da      	lsrs	r2, r3, #3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	3208      	adds	r2, #8
 8007ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	220f      	movs	r2, #15
 8007ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad6:	43db      	mvns	r3, r3
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	4013      	ands	r3, r2
 8007adc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	691a      	ldr	r2, [r3, #16]
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	fa02 f303 	lsl.w	r3, r2, r3
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	08da      	lsrs	r2, r3, #3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3208      	adds	r2, #8
 8007afc:	69b9      	ldr	r1, [r7, #24]
 8007afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b12:	43db      	mvns	r3, r3
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	4013      	ands	r3, r2
 8007b18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f003 0203 	and.w	r2, r3, #3
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 80e0 	beq.w	8007d04 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b44:	4b2f      	ldr	r3, [pc, #188]	@ (8007c04 <HAL_GPIO_Init+0x238>)
 8007b46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b4a:	4a2e      	ldr	r2, [pc, #184]	@ (8007c04 <HAL_GPIO_Init+0x238>)
 8007b4c:	f043 0302 	orr.w	r3, r3, #2
 8007b50:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007b54:	4b2b      	ldr	r3, [pc, #172]	@ (8007c04 <HAL_GPIO_Init+0x238>)
 8007b56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b5a:	f003 0302 	and.w	r3, r3, #2
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b62:	4a29      	ldr	r2, [pc, #164]	@ (8007c08 <HAL_GPIO_Init+0x23c>)
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	089b      	lsrs	r3, r3, #2
 8007b68:	3302      	adds	r3, #2
 8007b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	220f      	movs	r2, #15
 8007b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7e:	43db      	mvns	r3, r3
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	4013      	ands	r3, r2
 8007b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a20      	ldr	r2, [pc, #128]	@ (8007c0c <HAL_GPIO_Init+0x240>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d052      	beq.n	8007c34 <HAL_GPIO_Init+0x268>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a1f      	ldr	r2, [pc, #124]	@ (8007c10 <HAL_GPIO_Init+0x244>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d031      	beq.n	8007bfa <HAL_GPIO_Init+0x22e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a1e      	ldr	r2, [pc, #120]	@ (8007c14 <HAL_GPIO_Init+0x248>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d02b      	beq.n	8007bf6 <HAL_GPIO_Init+0x22a>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8007c18 <HAL_GPIO_Init+0x24c>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d025      	beq.n	8007bf2 <HAL_GPIO_Init+0x226>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8007c1c <HAL_GPIO_Init+0x250>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d01f      	beq.n	8007bee <HAL_GPIO_Init+0x222>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c20 <HAL_GPIO_Init+0x254>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d019      	beq.n	8007bea <HAL_GPIO_Init+0x21e>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8007c24 <HAL_GPIO_Init+0x258>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d013      	beq.n	8007be6 <HAL_GPIO_Init+0x21a>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a19      	ldr	r2, [pc, #100]	@ (8007c28 <HAL_GPIO_Init+0x25c>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d00d      	beq.n	8007be2 <HAL_GPIO_Init+0x216>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a18      	ldr	r2, [pc, #96]	@ (8007c2c <HAL_GPIO_Init+0x260>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d007      	beq.n	8007bde <HAL_GPIO_Init+0x212>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a17      	ldr	r2, [pc, #92]	@ (8007c30 <HAL_GPIO_Init+0x264>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d101      	bne.n	8007bda <HAL_GPIO_Init+0x20e>
 8007bd6:	2309      	movs	r3, #9
 8007bd8:	e02d      	b.n	8007c36 <HAL_GPIO_Init+0x26a>
 8007bda:	230a      	movs	r3, #10
 8007bdc:	e02b      	b.n	8007c36 <HAL_GPIO_Init+0x26a>
 8007bde:	2308      	movs	r3, #8
 8007be0:	e029      	b.n	8007c36 <HAL_GPIO_Init+0x26a>
 8007be2:	2307      	movs	r3, #7
 8007be4:	e027      	b.n	8007c36 <HAL_GPIO_Init+0x26a>
 8007be6:	2306      	movs	r3, #6
 8007be8:	e025      	b.n	8007c36 <HAL_GPIO_Init+0x26a>
 8007bea:	2305      	movs	r3, #5
 8007bec:	e023      	b.n	8007c36 <HAL_GPIO_Init+0x26a>
 8007bee:	2304      	movs	r3, #4
 8007bf0:	e021      	b.n	8007c36 <HAL_GPIO_Init+0x26a>
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e01f      	b.n	8007c36 <HAL_GPIO_Init+0x26a>
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	e01d      	b.n	8007c36 <HAL_GPIO_Init+0x26a>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e01b      	b.n	8007c36 <HAL_GPIO_Init+0x26a>
 8007bfe:	bf00      	nop
 8007c00:	58000080 	.word	0x58000080
 8007c04:	58024400 	.word	0x58024400
 8007c08:	58000400 	.word	0x58000400
 8007c0c:	58020000 	.word	0x58020000
 8007c10:	58020400 	.word	0x58020400
 8007c14:	58020800 	.word	0x58020800
 8007c18:	58020c00 	.word	0x58020c00
 8007c1c:	58021000 	.word	0x58021000
 8007c20:	58021400 	.word	0x58021400
 8007c24:	58021800 	.word	0x58021800
 8007c28:	58021c00 	.word	0x58021c00
 8007c2c:	58022000 	.word	0x58022000
 8007c30:	58022400 	.word	0x58022400
 8007c34:	2300      	movs	r3, #0
 8007c36:	69fa      	ldr	r2, [r7, #28]
 8007c38:	f002 0203 	and.w	r2, r2, #3
 8007c3c:	0092      	lsls	r2, r2, #2
 8007c3e:	4093      	lsls	r3, r2
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c46:	4938      	ldr	r1, [pc, #224]	@ (8007d28 <HAL_GPIO_Init+0x35c>)
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	089b      	lsrs	r3, r3, #2
 8007c4c:	3302      	adds	r3, #2
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	43db      	mvns	r3, r3
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	4013      	ands	r3, r2
 8007c64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	43db      	mvns	r3, r3
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	4013      	ands	r3, r2
 8007c92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007ca8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	43db      	mvns	r3, r3
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	43db      	mvns	r3, r3
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	3301      	adds	r3, #1
 8007d08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	fa22 f303 	lsr.w	r3, r2, r3
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f47f ae63 	bne.w	80079e0 <HAL_GPIO_Init+0x14>
  }
}
 8007d1a:	bf00      	nop
 8007d1c:	bf00      	nop
 8007d1e:	3724      	adds	r7, #36	@ 0x24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	58000400 	.word	0x58000400

08007d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	807b      	strh	r3, [r7, #2]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d3c:	787b      	ldrb	r3, [r7, #1]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d003      	beq.n	8007d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d42:	887a      	ldrh	r2, [r7, #2]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d48:	e003      	b.n	8007d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d4a:	887b      	ldrh	r3, [r7, #2]
 8007d4c:	041a      	lsls	r2, r3, #16
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	619a      	str	r2, [r3, #24]
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b085      	sub	sp, #20
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	460b      	mov	r3, r1
 8007d68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d70:	887a      	ldrh	r2, [r7, #2]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4013      	ands	r3, r2
 8007d76:	041a      	lsls	r2, r3, #16
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	43d9      	mvns	r1, r3
 8007d7c:	887b      	ldrh	r3, [r7, #2]
 8007d7e:	400b      	ands	r3, r1
 8007d80:	431a      	orrs	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	619a      	str	r2, [r3, #24]
}
 8007d86:	bf00      	nop
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	4603      	mov	r3, r0
 8007d9a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007da0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007da4:	88fb      	ldrh	r3, [r7, #6]
 8007da6:	4013      	ands	r3, r2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d008      	beq.n	8007dbe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007dac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007db0:	88fb      	ldrh	r3, [r7, #6]
 8007db2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007db6:	88fb      	ldrh	r3, [r7, #6]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7f9 fb35 	bl	8001428 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
	...

08007dc8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007dd0:	4a08      	ldr	r2, [pc, #32]	@ (8007df4 <HAL_HSEM_FastTake+0x2c>)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	3320      	adds	r3, #32
 8007dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dda:	4a07      	ldr	r2, [pc, #28]	@ (8007df8 <HAL_HSEM_FastTake+0x30>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d101      	bne.n	8007de4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	e000      	b.n	8007de6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	58026400 	.word	0x58026400
 8007df8:	80000300 	.word	0x80000300

08007dfc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007e06:	4906      	ldr	r1, [pc, #24]	@ (8007e20 <HAL_HSEM_Release+0x24>)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	58026400 	.word	0x58026400

08007e24 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007e2c:	4b29      	ldr	r3, [pc, #164]	@ (8007ed4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f003 0307 	and.w	r3, r3, #7
 8007e34:	2b06      	cmp	r3, #6
 8007e36:	d00a      	beq.n	8007e4e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e38:	4b26      	ldr	r3, [pc, #152]	@ (8007ed4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d001      	beq.n	8007e4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e040      	b.n	8007ecc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	e03e      	b.n	8007ecc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e4e:	4b21      	ldr	r3, [pc, #132]	@ (8007ed4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007e56:	491f      	ldr	r1, [pc, #124]	@ (8007ed4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007e5e:	f7fb fd13 	bl	8003888 <HAL_GetTick>
 8007e62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e64:	e009      	b.n	8007e7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e66:	f7fb fd0f 	bl	8003888 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e74:	d901      	bls.n	8007e7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e028      	b.n	8007ecc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e7a:	4b16      	ldr	r3, [pc, #88]	@ (8007ed4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e86:	d1ee      	bne.n	8007e66 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b1e      	cmp	r3, #30
 8007e8c:	d008      	beq.n	8007ea0 <HAL_PWREx_ConfigSupply+0x7c>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e92:	d005      	beq.n	8007ea0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b1d      	cmp	r3, #29
 8007e98:	d002      	beq.n	8007ea0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b2d      	cmp	r3, #45	@ 0x2d
 8007e9e:	d114      	bne.n	8007eca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007ea0:	f7fb fcf2 	bl	8003888 <HAL_GetTick>
 8007ea4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007ea6:	e009      	b.n	8007ebc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ea8:	f7fb fcee 	bl	8003888 <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007eb6:	d901      	bls.n	8007ebc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e007      	b.n	8007ecc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007ebc:	4b05      	ldr	r3, [pc, #20]	@ (8007ed4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ec8:	d1ee      	bne.n	8007ea8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	58024800 	.word	0x58024800

08007ed8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08c      	sub	sp, #48	@ 0x30
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d102      	bne.n	8007eec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	f000 bc48 	b.w	800877c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 8088 	beq.w	800800a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007efa:	4b99      	ldr	r3, [pc, #612]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f04:	4b96      	ldr	r3, [pc, #600]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f08:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0c:	2b10      	cmp	r3, #16
 8007f0e:	d007      	beq.n	8007f20 <HAL_RCC_OscConfig+0x48>
 8007f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f12:	2b18      	cmp	r3, #24
 8007f14:	d111      	bne.n	8007f3a <HAL_RCC_OscConfig+0x62>
 8007f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f18:	f003 0303 	and.w	r3, r3, #3
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d10c      	bne.n	8007f3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f20:	4b8f      	ldr	r3, [pc, #572]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d06d      	beq.n	8008008 <HAL_RCC_OscConfig+0x130>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d169      	bne.n	8008008 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	f000 bc21 	b.w	800877c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f42:	d106      	bne.n	8007f52 <HAL_RCC_OscConfig+0x7a>
 8007f44:	4b86      	ldr	r3, [pc, #536]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a85      	ldr	r2, [pc, #532]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f4e:	6013      	str	r3, [r2, #0]
 8007f50:	e02e      	b.n	8007fb0 <HAL_RCC_OscConfig+0xd8>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10c      	bne.n	8007f74 <HAL_RCC_OscConfig+0x9c>
 8007f5a:	4b81      	ldr	r3, [pc, #516]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a80      	ldr	r2, [pc, #512]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	4b7e      	ldr	r3, [pc, #504]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a7d      	ldr	r2, [pc, #500]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007f6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	e01d      	b.n	8007fb0 <HAL_RCC_OscConfig+0xd8>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f7c:	d10c      	bne.n	8007f98 <HAL_RCC_OscConfig+0xc0>
 8007f7e:	4b78      	ldr	r3, [pc, #480]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a77      	ldr	r2, [pc, #476]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007f84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f88:	6013      	str	r3, [r2, #0]
 8007f8a:	4b75      	ldr	r3, [pc, #468]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a74      	ldr	r2, [pc, #464]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	e00b      	b.n	8007fb0 <HAL_RCC_OscConfig+0xd8>
 8007f98:	4b71      	ldr	r3, [pc, #452]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a70      	ldr	r2, [pc, #448]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	4b6e      	ldr	r3, [pc, #440]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a6d      	ldr	r2, [pc, #436]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007faa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d013      	beq.n	8007fe0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb8:	f7fb fc66 	bl	8003888 <HAL_GetTick>
 8007fbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fbe:	e008      	b.n	8007fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fc0:	f7fb fc62 	bl	8003888 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	2b64      	cmp	r3, #100	@ 0x64
 8007fcc:	d901      	bls.n	8007fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e3d4      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fd2:	4b63      	ldr	r3, [pc, #396]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0f0      	beq.n	8007fc0 <HAL_RCC_OscConfig+0xe8>
 8007fde:	e014      	b.n	800800a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe0:	f7fb fc52 	bl	8003888 <HAL_GetTick>
 8007fe4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007fe6:	e008      	b.n	8007ffa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fe8:	f7fb fc4e 	bl	8003888 <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b64      	cmp	r3, #100	@ 0x64
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e3c0      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ffa:	4b59      	ldr	r3, [pc, #356]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1f0      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x110>
 8008006:	e000      	b.n	800800a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 80ca 	beq.w	80081ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008018:	4b51      	ldr	r3, [pc, #324]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008020:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008022:	4b4f      	ldr	r3, [pc, #316]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8008024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008026:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d007      	beq.n	800803e <HAL_RCC_OscConfig+0x166>
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	2b18      	cmp	r3, #24
 8008032:	d156      	bne.n	80080e2 <HAL_RCC_OscConfig+0x20a>
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	f003 0303 	and.w	r3, r3, #3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d151      	bne.n	80080e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800803e:	4b48      	ldr	r3, [pc, #288]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0304 	and.w	r3, r3, #4
 8008046:	2b00      	cmp	r3, #0
 8008048:	d005      	beq.n	8008056 <HAL_RCC_OscConfig+0x17e>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e392      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008056:	4b42      	ldr	r3, [pc, #264]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f023 0219 	bic.w	r2, r3, #25
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	493f      	ldr	r1, [pc, #252]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8008064:	4313      	orrs	r3, r2
 8008066:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008068:	f7fb fc0e 	bl	8003888 <HAL_GetTick>
 800806c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800806e:	e008      	b.n	8008082 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008070:	f7fb fc0a 	bl	8003888 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b02      	cmp	r3, #2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e37c      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008082:	4b37      	ldr	r3, [pc, #220]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0304 	and.w	r3, r3, #4
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0f0      	beq.n	8008070 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800808e:	f7fb fc2b 	bl	80038e8 <HAL_GetREVID>
 8008092:	4603      	mov	r3, r0
 8008094:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008098:	4293      	cmp	r3, r2
 800809a:	d817      	bhi.n	80080cc <HAL_RCC_OscConfig+0x1f4>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	2b40      	cmp	r3, #64	@ 0x40
 80080a2:	d108      	bne.n	80080b6 <HAL_RCC_OscConfig+0x1de>
 80080a4:	4b2e      	ldr	r3, [pc, #184]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80080ac:	4a2c      	ldr	r2, [pc, #176]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 80080ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080b4:	e07a      	b.n	80081ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080b6:	4b2a      	ldr	r3, [pc, #168]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	031b      	lsls	r3, r3, #12
 80080c4:	4926      	ldr	r1, [pc, #152]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080ca:	e06f      	b.n	80081ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080cc:	4b24      	ldr	r3, [pc, #144]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	061b      	lsls	r3, r3, #24
 80080da:	4921      	ldr	r1, [pc, #132]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080e0:	e064      	b.n	80081ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d047      	beq.n	800817a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80080ea:	4b1d      	ldr	r3, [pc, #116]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f023 0219 	bic.w	r2, r3, #25
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	491a      	ldr	r1, [pc, #104]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080fc:	f7fb fbc4 	bl	8003888 <HAL_GetTick>
 8008100:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008102:	e008      	b.n	8008116 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008104:	f7fb fbc0 	bl	8003888 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d901      	bls.n	8008116 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e332      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008116:	4b12      	ldr	r3, [pc, #72]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0304 	and.w	r3, r3, #4
 800811e:	2b00      	cmp	r3, #0
 8008120:	d0f0      	beq.n	8008104 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008122:	f7fb fbe1 	bl	80038e8 <HAL_GetREVID>
 8008126:	4603      	mov	r3, r0
 8008128:	f241 0203 	movw	r2, #4099	@ 0x1003
 800812c:	4293      	cmp	r3, r2
 800812e:	d819      	bhi.n	8008164 <HAL_RCC_OscConfig+0x28c>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	2b40      	cmp	r3, #64	@ 0x40
 8008136:	d108      	bne.n	800814a <HAL_RCC_OscConfig+0x272>
 8008138:	4b09      	ldr	r3, [pc, #36]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008140:	4a07      	ldr	r2, [pc, #28]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 8008142:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008146:	6053      	str	r3, [r2, #4]
 8008148:	e030      	b.n	80081ac <HAL_RCC_OscConfig+0x2d4>
 800814a:	4b05      	ldr	r3, [pc, #20]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	031b      	lsls	r3, r3, #12
 8008158:	4901      	ldr	r1, [pc, #4]	@ (8008160 <HAL_RCC_OscConfig+0x288>)
 800815a:	4313      	orrs	r3, r2
 800815c:	604b      	str	r3, [r1, #4]
 800815e:	e025      	b.n	80081ac <HAL_RCC_OscConfig+0x2d4>
 8008160:	58024400 	.word	0x58024400
 8008164:	4b9a      	ldr	r3, [pc, #616]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	061b      	lsls	r3, r3, #24
 8008172:	4997      	ldr	r1, [pc, #604]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 8008174:	4313      	orrs	r3, r2
 8008176:	604b      	str	r3, [r1, #4]
 8008178:	e018      	b.n	80081ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800817a:	4b95      	ldr	r3, [pc, #596]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a94      	ldr	r2, [pc, #592]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008186:	f7fb fb7f 	bl	8003888 <HAL_GetTick>
 800818a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800818c:	e008      	b.n	80081a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800818e:	f7fb fb7b 	bl	8003888 <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	2b02      	cmp	r3, #2
 800819a:	d901      	bls.n	80081a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e2ed      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80081a0:	4b8b      	ldr	r3, [pc, #556]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0304 	and.w	r3, r3, #4
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1f0      	bne.n	800818e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0310 	and.w	r3, r3, #16
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 80a9 	beq.w	800830c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081ba:	4b85      	ldr	r3, [pc, #532]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081c4:	4b82      	ldr	r3, [pc, #520]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 80081c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	2b08      	cmp	r3, #8
 80081ce:	d007      	beq.n	80081e0 <HAL_RCC_OscConfig+0x308>
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	2b18      	cmp	r3, #24
 80081d4:	d13a      	bne.n	800824c <HAL_RCC_OscConfig+0x374>
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f003 0303 	and.w	r3, r3, #3
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d135      	bne.n	800824c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081e0:	4b7b      	ldr	r3, [pc, #492]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d005      	beq.n	80081f8 <HAL_RCC_OscConfig+0x320>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	2b80      	cmp	r3, #128	@ 0x80
 80081f2:	d001      	beq.n	80081f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e2c1      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081f8:	f7fb fb76 	bl	80038e8 <HAL_GetREVID>
 80081fc:	4603      	mov	r3, r0
 80081fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008202:	4293      	cmp	r3, r2
 8008204:	d817      	bhi.n	8008236 <HAL_RCC_OscConfig+0x35e>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	2b20      	cmp	r3, #32
 800820c:	d108      	bne.n	8008220 <HAL_RCC_OscConfig+0x348>
 800820e:	4b70      	ldr	r3, [pc, #448]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008216:	4a6e      	ldr	r2, [pc, #440]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 8008218:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800821c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800821e:	e075      	b.n	800830c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008220:	4b6b      	ldr	r3, [pc, #428]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	069b      	lsls	r3, r3, #26
 800822e:	4968      	ldr	r1, [pc, #416]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 8008230:	4313      	orrs	r3, r2
 8008232:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008234:	e06a      	b.n	800830c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008236:	4b66      	ldr	r3, [pc, #408]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	061b      	lsls	r3, r3, #24
 8008244:	4962      	ldr	r1, [pc, #392]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 8008246:	4313      	orrs	r3, r2
 8008248:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800824a:	e05f      	b.n	800830c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d042      	beq.n	80082da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008254:	4b5e      	ldr	r3, [pc, #376]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a5d      	ldr	r2, [pc, #372]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 800825a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800825e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008260:	f7fb fb12 	bl	8003888 <HAL_GetTick>
 8008264:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008266:	e008      	b.n	800827a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008268:	f7fb fb0e 	bl	8003888 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b02      	cmp	r3, #2
 8008274:	d901      	bls.n	800827a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e280      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800827a:	4b55      	ldr	r3, [pc, #340]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0f0      	beq.n	8008268 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008286:	f7fb fb2f 	bl	80038e8 <HAL_GetREVID>
 800828a:	4603      	mov	r3, r0
 800828c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008290:	4293      	cmp	r3, r2
 8008292:	d817      	bhi.n	80082c4 <HAL_RCC_OscConfig+0x3ec>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	2b20      	cmp	r3, #32
 800829a:	d108      	bne.n	80082ae <HAL_RCC_OscConfig+0x3d6>
 800829c:	4b4c      	ldr	r3, [pc, #304]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80082a4:	4a4a      	ldr	r2, [pc, #296]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 80082a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082aa:	6053      	str	r3, [r2, #4]
 80082ac:	e02e      	b.n	800830c <HAL_RCC_OscConfig+0x434>
 80082ae:	4b48      	ldr	r3, [pc, #288]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	069b      	lsls	r3, r3, #26
 80082bc:	4944      	ldr	r1, [pc, #272]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	604b      	str	r3, [r1, #4]
 80082c2:	e023      	b.n	800830c <HAL_RCC_OscConfig+0x434>
 80082c4:	4b42      	ldr	r3, [pc, #264]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	061b      	lsls	r3, r3, #24
 80082d2:	493f      	ldr	r1, [pc, #252]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60cb      	str	r3, [r1, #12]
 80082d8:	e018      	b.n	800830c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80082da:	4b3d      	ldr	r3, [pc, #244]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a3c      	ldr	r2, [pc, #240]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 80082e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e6:	f7fb facf 	bl	8003888 <HAL_GetTick>
 80082ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80082ec:	e008      	b.n	8008300 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80082ee:	f7fb facb 	bl	8003888 <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d901      	bls.n	8008300 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e23d      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008300:	4b33      	ldr	r3, [pc, #204]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1f0      	bne.n	80082ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0308 	and.w	r3, r3, #8
 8008314:	2b00      	cmp	r3, #0
 8008316:	d036      	beq.n	8008386 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d019      	beq.n	8008354 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008320:	4b2b      	ldr	r3, [pc, #172]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 8008322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008324:	4a2a      	ldr	r2, [pc, #168]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 8008326:	f043 0301 	orr.w	r3, r3, #1
 800832a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800832c:	f7fb faac 	bl	8003888 <HAL_GetTick>
 8008330:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008332:	e008      	b.n	8008346 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008334:	f7fb faa8 	bl	8003888 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	2b02      	cmp	r3, #2
 8008340:	d901      	bls.n	8008346 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e21a      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008346:	4b22      	ldr	r3, [pc, #136]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 8008348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800834a:	f003 0302 	and.w	r3, r3, #2
 800834e:	2b00      	cmp	r3, #0
 8008350:	d0f0      	beq.n	8008334 <HAL_RCC_OscConfig+0x45c>
 8008352:	e018      	b.n	8008386 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008354:	4b1e      	ldr	r3, [pc, #120]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 8008356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008358:	4a1d      	ldr	r2, [pc, #116]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 800835a:	f023 0301 	bic.w	r3, r3, #1
 800835e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008360:	f7fb fa92 	bl	8003888 <HAL_GetTick>
 8008364:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008366:	e008      	b.n	800837a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008368:	f7fb fa8e 	bl	8003888 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	2b02      	cmp	r3, #2
 8008374:	d901      	bls.n	800837a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e200      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800837a:	4b15      	ldr	r3, [pc, #84]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 800837c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1f0      	bne.n	8008368 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b00      	cmp	r3, #0
 8008390:	d039      	beq.n	8008406 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d01c      	beq.n	80083d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800839a:	4b0d      	ldr	r3, [pc, #52]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a0c      	ldr	r2, [pc, #48]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 80083a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80083a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80083a6:	f7fb fa6f 	bl	8003888 <HAL_GetTick>
 80083aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083ac:	e008      	b.n	80083c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083ae:	f7fb fa6b 	bl	8003888 <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d901      	bls.n	80083c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e1dd      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083c0:	4b03      	ldr	r3, [pc, #12]	@ (80083d0 <HAL_RCC_OscConfig+0x4f8>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0f0      	beq.n	80083ae <HAL_RCC_OscConfig+0x4d6>
 80083cc:	e01b      	b.n	8008406 <HAL_RCC_OscConfig+0x52e>
 80083ce:	bf00      	nop
 80083d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083d4:	4b9b      	ldr	r3, [pc, #620]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a9a      	ldr	r2, [pc, #616]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80083da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80083e0:	f7fb fa52 	bl	8003888 <HAL_GetTick>
 80083e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083e6:	e008      	b.n	80083fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083e8:	f7fb fa4e 	bl	8003888 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e1c0      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083fa:	4b92      	ldr	r3, [pc, #584]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1f0      	bne.n	80083e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0304 	and.w	r3, r3, #4
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 8081 	beq.w	8008516 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008414:	4b8c      	ldr	r3, [pc, #560]	@ (8008648 <HAL_RCC_OscConfig+0x770>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a8b      	ldr	r2, [pc, #556]	@ (8008648 <HAL_RCC_OscConfig+0x770>)
 800841a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800841e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008420:	f7fb fa32 	bl	8003888 <HAL_GetTick>
 8008424:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008426:	e008      	b.n	800843a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008428:	f7fb fa2e 	bl	8003888 <HAL_GetTick>
 800842c:	4602      	mov	r2, r0
 800842e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	2b64      	cmp	r3, #100	@ 0x64
 8008434:	d901      	bls.n	800843a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e1a0      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800843a:	4b83      	ldr	r3, [pc, #524]	@ (8008648 <HAL_RCC_OscConfig+0x770>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0f0      	beq.n	8008428 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d106      	bne.n	800845c <HAL_RCC_OscConfig+0x584>
 800844e:	4b7d      	ldr	r3, [pc, #500]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008452:	4a7c      	ldr	r2, [pc, #496]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008454:	f043 0301 	orr.w	r3, r3, #1
 8008458:	6713      	str	r3, [r2, #112]	@ 0x70
 800845a:	e02d      	b.n	80084b8 <HAL_RCC_OscConfig+0x5e0>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10c      	bne.n	800847e <HAL_RCC_OscConfig+0x5a6>
 8008464:	4b77      	ldr	r3, [pc, #476]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008468:	4a76      	ldr	r2, [pc, #472]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 800846a:	f023 0301 	bic.w	r3, r3, #1
 800846e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008470:	4b74      	ldr	r3, [pc, #464]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008474:	4a73      	ldr	r2, [pc, #460]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008476:	f023 0304 	bic.w	r3, r3, #4
 800847a:	6713      	str	r3, [r2, #112]	@ 0x70
 800847c:	e01c      	b.n	80084b8 <HAL_RCC_OscConfig+0x5e0>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	2b05      	cmp	r3, #5
 8008484:	d10c      	bne.n	80084a0 <HAL_RCC_OscConfig+0x5c8>
 8008486:	4b6f      	ldr	r3, [pc, #444]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800848a:	4a6e      	ldr	r2, [pc, #440]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 800848c:	f043 0304 	orr.w	r3, r3, #4
 8008490:	6713      	str	r3, [r2, #112]	@ 0x70
 8008492:	4b6c      	ldr	r3, [pc, #432]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008496:	4a6b      	ldr	r2, [pc, #428]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008498:	f043 0301 	orr.w	r3, r3, #1
 800849c:	6713      	str	r3, [r2, #112]	@ 0x70
 800849e:	e00b      	b.n	80084b8 <HAL_RCC_OscConfig+0x5e0>
 80084a0:	4b68      	ldr	r3, [pc, #416]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80084a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084a4:	4a67      	ldr	r2, [pc, #412]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80084a6:	f023 0301 	bic.w	r3, r3, #1
 80084aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80084ac:	4b65      	ldr	r3, [pc, #404]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80084ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084b0:	4a64      	ldr	r2, [pc, #400]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80084b2:	f023 0304 	bic.w	r3, r3, #4
 80084b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d015      	beq.n	80084ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084c0:	f7fb f9e2 	bl	8003888 <HAL_GetTick>
 80084c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084c6:	e00a      	b.n	80084de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084c8:	f7fb f9de 	bl	8003888 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d901      	bls.n	80084de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e14e      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084de:	4b59      	ldr	r3, [pc, #356]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80084e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084e2:	f003 0302 	and.w	r3, r3, #2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0ee      	beq.n	80084c8 <HAL_RCC_OscConfig+0x5f0>
 80084ea:	e014      	b.n	8008516 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ec:	f7fb f9cc 	bl	8003888 <HAL_GetTick>
 80084f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80084f2:	e00a      	b.n	800850a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084f4:	f7fb f9c8 	bl	8003888 <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008502:	4293      	cmp	r3, r2
 8008504:	d901      	bls.n	800850a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e138      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800850a:	4b4e      	ldr	r3, [pc, #312]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 800850c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1ee      	bne.n	80084f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 812d 	beq.w	800877a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008520:	4b48      	ldr	r3, [pc, #288]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008528:	2b18      	cmp	r3, #24
 800852a:	f000 80bd 	beq.w	80086a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008532:	2b02      	cmp	r3, #2
 8008534:	f040 809e 	bne.w	8008674 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008538:	4b42      	ldr	r3, [pc, #264]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a41      	ldr	r2, [pc, #260]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 800853e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008544:	f7fb f9a0 	bl	8003888 <HAL_GetTick>
 8008548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800854a:	e008      	b.n	800855e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800854c:	f7fb f99c 	bl	8003888 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	2b02      	cmp	r3, #2
 8008558:	d901      	bls.n	800855e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e10e      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800855e:	4b39      	ldr	r3, [pc, #228]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1f0      	bne.n	800854c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800856a:	4b36      	ldr	r3, [pc, #216]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 800856c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800856e:	4b37      	ldr	r3, [pc, #220]	@ (800864c <HAL_RCC_OscConfig+0x774>)
 8008570:	4013      	ands	r3, r2
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800857a:	0112      	lsls	r2, r2, #4
 800857c:	430a      	orrs	r2, r1
 800857e:	4931      	ldr	r1, [pc, #196]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008580:	4313      	orrs	r3, r2
 8008582:	628b      	str	r3, [r1, #40]	@ 0x28
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008588:	3b01      	subs	r3, #1
 800858a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008592:	3b01      	subs	r3, #1
 8008594:	025b      	lsls	r3, r3, #9
 8008596:	b29b      	uxth	r3, r3
 8008598:	431a      	orrs	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859e:	3b01      	subs	r3, #1
 80085a0:	041b      	lsls	r3, r3, #16
 80085a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80085a6:	431a      	orrs	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ac:	3b01      	subs	r3, #1
 80085ae:	061b      	lsls	r3, r3, #24
 80085b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80085b4:	4923      	ldr	r1, [pc, #140]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80085ba:	4b22      	ldr	r3, [pc, #136]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80085bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085be:	4a21      	ldr	r2, [pc, #132]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80085c0:	f023 0301 	bic.w	r3, r3, #1
 80085c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80085c6:	4b1f      	ldr	r3, [pc, #124]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80085c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085ca:	4b21      	ldr	r3, [pc, #132]	@ (8008650 <HAL_RCC_OscConfig+0x778>)
 80085cc:	4013      	ands	r3, r2
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80085d2:	00d2      	lsls	r2, r2, #3
 80085d4:	491b      	ldr	r1, [pc, #108]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80085da:	4b1a      	ldr	r3, [pc, #104]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80085dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085de:	f023 020c 	bic.w	r2, r3, #12
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e6:	4917      	ldr	r1, [pc, #92]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80085ec:	4b15      	ldr	r3, [pc, #84]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80085ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f0:	f023 0202 	bic.w	r2, r3, #2
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085f8:	4912      	ldr	r1, [pc, #72]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80085fe:	4b11      	ldr	r3, [pc, #68]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008602:	4a10      	ldr	r2, [pc, #64]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008608:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800860a:	4b0e      	ldr	r3, [pc, #56]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 800860c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860e:	4a0d      	ldr	r2, [pc, #52]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008614:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008616:	4b0b      	ldr	r3, [pc, #44]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861a:	4a0a      	ldr	r2, [pc, #40]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 800861c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008620:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008622:	4b08      	ldr	r3, [pc, #32]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008626:	4a07      	ldr	r2, [pc, #28]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008628:	f043 0301 	orr.w	r3, r3, #1
 800862c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800862e:	4b05      	ldr	r3, [pc, #20]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a04      	ldr	r2, [pc, #16]	@ (8008644 <HAL_RCC_OscConfig+0x76c>)
 8008634:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800863a:	f7fb f925 	bl	8003888 <HAL_GetTick>
 800863e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008640:	e011      	b.n	8008666 <HAL_RCC_OscConfig+0x78e>
 8008642:	bf00      	nop
 8008644:	58024400 	.word	0x58024400
 8008648:	58024800 	.word	0x58024800
 800864c:	fffffc0c 	.word	0xfffffc0c
 8008650:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008654:	f7fb f918 	bl	8003888 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b02      	cmp	r3, #2
 8008660:	d901      	bls.n	8008666 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e08a      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008666:	4b47      	ldr	r3, [pc, #284]	@ (8008784 <HAL_RCC_OscConfig+0x8ac>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d0f0      	beq.n	8008654 <HAL_RCC_OscConfig+0x77c>
 8008672:	e082      	b.n	800877a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008674:	4b43      	ldr	r3, [pc, #268]	@ (8008784 <HAL_RCC_OscConfig+0x8ac>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a42      	ldr	r2, [pc, #264]	@ (8008784 <HAL_RCC_OscConfig+0x8ac>)
 800867a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800867e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008680:	f7fb f902 	bl	8003888 <HAL_GetTick>
 8008684:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008686:	e008      	b.n	800869a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008688:	f7fb f8fe 	bl	8003888 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	2b02      	cmp	r3, #2
 8008694:	d901      	bls.n	800869a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e070      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800869a:	4b3a      	ldr	r3, [pc, #232]	@ (8008784 <HAL_RCC_OscConfig+0x8ac>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1f0      	bne.n	8008688 <HAL_RCC_OscConfig+0x7b0>
 80086a6:	e068      	b.n	800877a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80086a8:	4b36      	ldr	r3, [pc, #216]	@ (8008784 <HAL_RCC_OscConfig+0x8ac>)
 80086aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80086ae:	4b35      	ldr	r3, [pc, #212]	@ (8008784 <HAL_RCC_OscConfig+0x8ac>)
 80086b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d031      	beq.n	8008720 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	f003 0203 	and.w	r2, r3, #3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d12a      	bne.n	8008720 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	091b      	lsrs	r3, r3, #4
 80086ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d122      	bne.n	8008720 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d11a      	bne.n	8008720 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	0a5b      	lsrs	r3, r3, #9
 80086ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d111      	bne.n	8008720 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	0c1b      	lsrs	r3, r3, #16
 8008700:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008708:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800870a:	429a      	cmp	r2, r3
 800870c:	d108      	bne.n	8008720 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	0e1b      	lsrs	r3, r3, #24
 8008712:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800871a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800871c:	429a      	cmp	r2, r3
 800871e:	d001      	beq.n	8008724 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e02b      	b.n	800877c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008724:	4b17      	ldr	r3, [pc, #92]	@ (8008784 <HAL_RCC_OscConfig+0x8ac>)
 8008726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008728:	08db      	lsrs	r3, r3, #3
 800872a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800872e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	429a      	cmp	r2, r3
 8008738:	d01f      	beq.n	800877a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800873a:	4b12      	ldr	r3, [pc, #72]	@ (8008784 <HAL_RCC_OscConfig+0x8ac>)
 800873c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800873e:	4a11      	ldr	r2, [pc, #68]	@ (8008784 <HAL_RCC_OscConfig+0x8ac>)
 8008740:	f023 0301 	bic.w	r3, r3, #1
 8008744:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008746:	f7fb f89f 	bl	8003888 <HAL_GetTick>
 800874a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800874c:	bf00      	nop
 800874e:	f7fb f89b 	bl	8003888 <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008756:	4293      	cmp	r3, r2
 8008758:	d0f9      	beq.n	800874e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800875a:	4b0a      	ldr	r3, [pc, #40]	@ (8008784 <HAL_RCC_OscConfig+0x8ac>)
 800875c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800875e:	4b0a      	ldr	r3, [pc, #40]	@ (8008788 <HAL_RCC_OscConfig+0x8b0>)
 8008760:	4013      	ands	r3, r2
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008766:	00d2      	lsls	r2, r2, #3
 8008768:	4906      	ldr	r1, [pc, #24]	@ (8008784 <HAL_RCC_OscConfig+0x8ac>)
 800876a:	4313      	orrs	r3, r2
 800876c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800876e:	4b05      	ldr	r3, [pc, #20]	@ (8008784 <HAL_RCC_OscConfig+0x8ac>)
 8008770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008772:	4a04      	ldr	r2, [pc, #16]	@ (8008784 <HAL_RCC_OscConfig+0x8ac>)
 8008774:	f043 0301 	orr.w	r3, r3, #1
 8008778:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3730      	adds	r7, #48	@ 0x30
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	58024400 	.word	0x58024400
 8008788:	ffff0007 	.word	0xffff0007

0800878c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e19c      	b.n	8008ada <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80087a0:	4b8a      	ldr	r3, [pc, #552]	@ (80089cc <HAL_RCC_ClockConfig+0x240>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 030f 	and.w	r3, r3, #15
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d910      	bls.n	80087d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ae:	4b87      	ldr	r3, [pc, #540]	@ (80089cc <HAL_RCC_ClockConfig+0x240>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f023 020f 	bic.w	r2, r3, #15
 80087b6:	4985      	ldr	r1, [pc, #532]	@ (80089cc <HAL_RCC_ClockConfig+0x240>)
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087be:	4b83      	ldr	r3, [pc, #524]	@ (80089cc <HAL_RCC_ClockConfig+0x240>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 030f 	and.w	r3, r3, #15
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d001      	beq.n	80087d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e184      	b.n	8008ada <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d010      	beq.n	80087fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691a      	ldr	r2, [r3, #16]
 80087e0:	4b7b      	ldr	r3, [pc, #492]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d908      	bls.n	80087fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087ec:	4b78      	ldr	r3, [pc, #480]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	4975      	ldr	r1, [pc, #468]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0308 	and.w	r3, r3, #8
 8008806:	2b00      	cmp	r3, #0
 8008808:	d010      	beq.n	800882c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	695a      	ldr	r2, [r3, #20]
 800880e:	4b70      	ldr	r3, [pc, #448]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008816:	429a      	cmp	r2, r3
 8008818:	d908      	bls.n	800882c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800881a:	4b6d      	ldr	r3, [pc, #436]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	496a      	ldr	r1, [pc, #424]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 8008828:	4313      	orrs	r3, r2
 800882a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0310 	and.w	r3, r3, #16
 8008834:	2b00      	cmp	r3, #0
 8008836:	d010      	beq.n	800885a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	699a      	ldr	r2, [r3, #24]
 800883c:	4b64      	ldr	r3, [pc, #400]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008844:	429a      	cmp	r2, r3
 8008846:	d908      	bls.n	800885a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008848:	4b61      	ldr	r3, [pc, #388]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	495e      	ldr	r1, [pc, #376]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 8008856:	4313      	orrs	r3, r2
 8008858:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0320 	and.w	r3, r3, #32
 8008862:	2b00      	cmp	r3, #0
 8008864:	d010      	beq.n	8008888 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	69da      	ldr	r2, [r3, #28]
 800886a:	4b59      	ldr	r3, [pc, #356]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008872:	429a      	cmp	r2, r3
 8008874:	d908      	bls.n	8008888 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008876:	4b56      	ldr	r3, [pc, #344]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	4953      	ldr	r1, [pc, #332]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 8008884:	4313      	orrs	r3, r2
 8008886:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0302 	and.w	r3, r3, #2
 8008890:	2b00      	cmp	r3, #0
 8008892:	d010      	beq.n	80088b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	4b4d      	ldr	r3, [pc, #308]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	f003 030f 	and.w	r3, r3, #15
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d908      	bls.n	80088b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088a4:	4b4a      	ldr	r3, [pc, #296]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	f023 020f 	bic.w	r2, r3, #15
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	4947      	ldr	r1, [pc, #284]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 80088b2:	4313      	orrs	r3, r2
 80088b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d055      	beq.n	800896e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80088c2:	4b43      	ldr	r3, [pc, #268]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	4940      	ldr	r1, [pc, #256]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 80088d0:	4313      	orrs	r3, r2
 80088d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d107      	bne.n	80088ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088dc:	4b3c      	ldr	r3, [pc, #240]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d121      	bne.n	800892c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e0f6      	b.n	8008ada <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d107      	bne.n	8008904 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088f4:	4b36      	ldr	r3, [pc, #216]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d115      	bne.n	800892c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e0ea      	b.n	8008ada <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d107      	bne.n	800891c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800890c:	4b30      	ldr	r3, [pc, #192]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008914:	2b00      	cmp	r3, #0
 8008916:	d109      	bne.n	800892c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e0de      	b.n	8008ada <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800891c:	4b2c      	ldr	r3, [pc, #176]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0304 	and.w	r3, r3, #4
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e0d6      	b.n	8008ada <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800892c:	4b28      	ldr	r3, [pc, #160]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	f023 0207 	bic.w	r2, r3, #7
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	4925      	ldr	r1, [pc, #148]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 800893a:	4313      	orrs	r3, r2
 800893c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800893e:	f7fa ffa3 	bl	8003888 <HAL_GetTick>
 8008942:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008944:	e00a      	b.n	800895c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008946:	f7fa ff9f 	bl	8003888 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008954:	4293      	cmp	r3, r2
 8008956:	d901      	bls.n	800895c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e0be      	b.n	8008ada <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800895c:	4b1c      	ldr	r3, [pc, #112]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	00db      	lsls	r3, r3, #3
 800896a:	429a      	cmp	r2, r3
 800896c:	d1eb      	bne.n	8008946 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d010      	beq.n	800899c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68da      	ldr	r2, [r3, #12]
 800897e:	4b14      	ldr	r3, [pc, #80]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	f003 030f 	and.w	r3, r3, #15
 8008986:	429a      	cmp	r2, r3
 8008988:	d208      	bcs.n	800899c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800898a:	4b11      	ldr	r3, [pc, #68]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	f023 020f 	bic.w	r2, r3, #15
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	490e      	ldr	r1, [pc, #56]	@ (80089d0 <HAL_RCC_ClockConfig+0x244>)
 8008998:	4313      	orrs	r3, r2
 800899a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800899c:	4b0b      	ldr	r3, [pc, #44]	@ (80089cc <HAL_RCC_ClockConfig+0x240>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 030f 	and.w	r3, r3, #15
 80089a4:	683a      	ldr	r2, [r7, #0]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d214      	bcs.n	80089d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089aa:	4b08      	ldr	r3, [pc, #32]	@ (80089cc <HAL_RCC_ClockConfig+0x240>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f023 020f 	bic.w	r2, r3, #15
 80089b2:	4906      	ldr	r1, [pc, #24]	@ (80089cc <HAL_RCC_ClockConfig+0x240>)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ba:	4b04      	ldr	r3, [pc, #16]	@ (80089cc <HAL_RCC_ClockConfig+0x240>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 030f 	and.w	r3, r3, #15
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d005      	beq.n	80089d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e086      	b.n	8008ada <HAL_RCC_ClockConfig+0x34e>
 80089cc:	52002000 	.word	0x52002000
 80089d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0304 	and.w	r3, r3, #4
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d010      	beq.n	8008a02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	691a      	ldr	r2, [r3, #16]
 80089e4:	4b3f      	ldr	r3, [pc, #252]	@ (8008ae4 <HAL_RCC_ClockConfig+0x358>)
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d208      	bcs.n	8008a02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80089f0:	4b3c      	ldr	r3, [pc, #240]	@ (8008ae4 <HAL_RCC_ClockConfig+0x358>)
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	4939      	ldr	r1, [pc, #228]	@ (8008ae4 <HAL_RCC_ClockConfig+0x358>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0308 	and.w	r3, r3, #8
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d010      	beq.n	8008a30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	695a      	ldr	r2, [r3, #20]
 8008a12:	4b34      	ldr	r3, [pc, #208]	@ (8008ae4 <HAL_RCC_ClockConfig+0x358>)
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d208      	bcs.n	8008a30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a1e:	4b31      	ldr	r3, [pc, #196]	@ (8008ae4 <HAL_RCC_ClockConfig+0x358>)
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	492e      	ldr	r1, [pc, #184]	@ (8008ae4 <HAL_RCC_ClockConfig+0x358>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0310 	and.w	r3, r3, #16
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d010      	beq.n	8008a5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	699a      	ldr	r2, [r3, #24]
 8008a40:	4b28      	ldr	r3, [pc, #160]	@ (8008ae4 <HAL_RCC_ClockConfig+0x358>)
 8008a42:	69db      	ldr	r3, [r3, #28]
 8008a44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d208      	bcs.n	8008a5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a4c:	4b25      	ldr	r3, [pc, #148]	@ (8008ae4 <HAL_RCC_ClockConfig+0x358>)
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	4922      	ldr	r1, [pc, #136]	@ (8008ae4 <HAL_RCC_ClockConfig+0x358>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 0320 	and.w	r3, r3, #32
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d010      	beq.n	8008a8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	69da      	ldr	r2, [r3, #28]
 8008a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ae4 <HAL_RCC_ClockConfig+0x358>)
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d208      	bcs.n	8008a8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ae4 <HAL_RCC_ClockConfig+0x358>)
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	4917      	ldr	r1, [pc, #92]	@ (8008ae4 <HAL_RCC_ClockConfig+0x358>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008a8c:	f000 f834 	bl	8008af8 <HAL_RCC_GetSysClockFreq>
 8008a90:	4602      	mov	r2, r0
 8008a92:	4b14      	ldr	r3, [pc, #80]	@ (8008ae4 <HAL_RCC_ClockConfig+0x358>)
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	0a1b      	lsrs	r3, r3, #8
 8008a98:	f003 030f 	and.w	r3, r3, #15
 8008a9c:	4912      	ldr	r1, [pc, #72]	@ (8008ae8 <HAL_RCC_ClockConfig+0x35c>)
 8008a9e:	5ccb      	ldrb	r3, [r1, r3]
 8008aa0:	f003 031f 	and.w	r3, r3, #31
 8008aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae4 <HAL_RCC_ClockConfig+0x358>)
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	f003 030f 	and.w	r3, r3, #15
 8008ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8008ae8 <HAL_RCC_ClockConfig+0x35c>)
 8008ab4:	5cd3      	ldrb	r3, [r2, r3]
 8008ab6:	f003 031f 	and.w	r3, r3, #31
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8008aec <HAL_RCC_ClockConfig+0x360>)
 8008ac2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8008af0 <HAL_RCC_ClockConfig+0x364>)
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008aca:	4b0a      	ldr	r3, [pc, #40]	@ (8008af4 <HAL_RCC_ClockConfig+0x368>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fa fe90 	bl	80037f4 <HAL_InitTick>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	58024400 	.word	0x58024400
 8008ae8:	0800f0c0 	.word	0x0800f0c0
 8008aec:	24000004 	.word	0x24000004
 8008af0:	24000000 	.word	0x24000000
 8008af4:	24000078 	.word	0x24000078

08008af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b089      	sub	sp, #36	@ 0x24
 8008afc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008afe:	4bb3      	ldr	r3, [pc, #716]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b06:	2b18      	cmp	r3, #24
 8008b08:	f200 8155 	bhi.w	8008db6 <HAL_RCC_GetSysClockFreq+0x2be>
 8008b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b12:	bf00      	nop
 8008b14:	08008b79 	.word	0x08008b79
 8008b18:	08008db7 	.word	0x08008db7
 8008b1c:	08008db7 	.word	0x08008db7
 8008b20:	08008db7 	.word	0x08008db7
 8008b24:	08008db7 	.word	0x08008db7
 8008b28:	08008db7 	.word	0x08008db7
 8008b2c:	08008db7 	.word	0x08008db7
 8008b30:	08008db7 	.word	0x08008db7
 8008b34:	08008b9f 	.word	0x08008b9f
 8008b38:	08008db7 	.word	0x08008db7
 8008b3c:	08008db7 	.word	0x08008db7
 8008b40:	08008db7 	.word	0x08008db7
 8008b44:	08008db7 	.word	0x08008db7
 8008b48:	08008db7 	.word	0x08008db7
 8008b4c:	08008db7 	.word	0x08008db7
 8008b50:	08008db7 	.word	0x08008db7
 8008b54:	08008ba5 	.word	0x08008ba5
 8008b58:	08008db7 	.word	0x08008db7
 8008b5c:	08008db7 	.word	0x08008db7
 8008b60:	08008db7 	.word	0x08008db7
 8008b64:	08008db7 	.word	0x08008db7
 8008b68:	08008db7 	.word	0x08008db7
 8008b6c:	08008db7 	.word	0x08008db7
 8008b70:	08008db7 	.word	0x08008db7
 8008b74:	08008bab 	.word	0x08008bab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b78:	4b94      	ldr	r3, [pc, #592]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0320 	and.w	r3, r3, #32
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d009      	beq.n	8008b98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b84:	4b91      	ldr	r3, [pc, #580]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	08db      	lsrs	r3, r3, #3
 8008b8a:	f003 0303 	and.w	r3, r3, #3
 8008b8e:	4a90      	ldr	r2, [pc, #576]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b90:	fa22 f303 	lsr.w	r3, r2, r3
 8008b94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008b96:	e111      	b.n	8008dbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008b98:	4b8d      	ldr	r3, [pc, #564]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b9a:	61bb      	str	r3, [r7, #24]
      break;
 8008b9c:	e10e      	b.n	8008dbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008b9e:	4b8d      	ldr	r3, [pc, #564]	@ (8008dd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ba0:	61bb      	str	r3, [r7, #24]
      break;
 8008ba2:	e10b      	b.n	8008dbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008ba4:	4b8c      	ldr	r3, [pc, #560]	@ (8008dd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008ba6:	61bb      	str	r3, [r7, #24]
      break;
 8008ba8:	e108      	b.n	8008dbc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008baa:	4b88      	ldr	r3, [pc, #544]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bae:	f003 0303 	and.w	r3, r3, #3
 8008bb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008bb4:	4b85      	ldr	r3, [pc, #532]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb8:	091b      	lsrs	r3, r3, #4
 8008bba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008bc0:	4b82      	ldr	r3, [pc, #520]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008bca:	4b80      	ldr	r3, [pc, #512]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bce:	08db      	lsrs	r3, r3, #3
 8008bd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	fb02 f303 	mul.w	r3, r2, r3
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 80e1 	beq.w	8008db0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	f000 8083 	beq.w	8008cfc <HAL_RCC_GetSysClockFreq+0x204>
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	f200 80a1 	bhi.w	8008d40 <HAL_RCC_GetSysClockFreq+0x248>
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d003      	beq.n	8008c0c <HAL_RCC_GetSysClockFreq+0x114>
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d056      	beq.n	8008cb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008c0a:	e099      	b.n	8008d40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c0c:	4b6f      	ldr	r3, [pc, #444]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0320 	and.w	r3, r3, #32
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d02d      	beq.n	8008c74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c18:	4b6c      	ldr	r3, [pc, #432]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	08db      	lsrs	r3, r3, #3
 8008c1e:	f003 0303 	and.w	r3, r3, #3
 8008c22:	4a6b      	ldr	r2, [pc, #428]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c24:	fa22 f303 	lsr.w	r3, r2, r3
 8008c28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	ee07 3a90 	vmov	s15, r3
 8008c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c42:	4b62      	ldr	r3, [pc, #392]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c4a:	ee07 3a90 	vmov	s15, r3
 8008c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c56:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008ddc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008c72:	e087      	b.n	8008d84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	ee07 3a90 	vmov	s15, r3
 8008c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008de0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c86:	4b51      	ldr	r3, [pc, #324]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8e:	ee07 3a90 	vmov	s15, r3
 8008c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c9a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008ddc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cb6:	e065      	b.n	8008d84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	ee07 3a90 	vmov	s15, r3
 8008cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008de4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cca:	4b40      	ldr	r3, [pc, #256]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd2:	ee07 3a90 	vmov	s15, r3
 8008cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cda:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cde:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008ddc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cfa:	e043      	b.n	8008d84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	ee07 3a90 	vmov	s15, r3
 8008d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d06:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008de8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d22:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008ddc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d3e:	e021      	b.n	8008d84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008de4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d52:	4b1e      	ldr	r3, [pc, #120]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d66:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008ddc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008d84:	4b11      	ldr	r3, [pc, #68]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d88:	0a5b      	lsrs	r3, r3, #9
 8008d8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d8e:	3301      	adds	r3, #1
 8008d90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	ee07 3a90 	vmov	s15, r3
 8008d98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008da8:	ee17 3a90 	vmov	r3, s15
 8008dac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008dae:	e005      	b.n	8008dbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008db0:	2300      	movs	r3, #0
 8008db2:	61bb      	str	r3, [r7, #24]
      break;
 8008db4:	e002      	b.n	8008dbc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008db6:	4b07      	ldr	r3, [pc, #28]	@ (8008dd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008db8:	61bb      	str	r3, [r7, #24]
      break;
 8008dba:	bf00      	nop
  }

  return sysclockfreq;
 8008dbc:	69bb      	ldr	r3, [r7, #24]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3724      	adds	r7, #36	@ 0x24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	58024400 	.word	0x58024400
 8008dd0:	03d09000 	.word	0x03d09000
 8008dd4:	003d0900 	.word	0x003d0900
 8008dd8:	017d7840 	.word	0x017d7840
 8008ddc:	46000000 	.word	0x46000000
 8008de0:	4c742400 	.word	0x4c742400
 8008de4:	4a742400 	.word	0x4a742400
 8008de8:	4bbebc20 	.word	0x4bbebc20

08008dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008df2:	f7ff fe81 	bl	8008af8 <HAL_RCC_GetSysClockFreq>
 8008df6:	4602      	mov	r2, r0
 8008df8:	4b10      	ldr	r3, [pc, #64]	@ (8008e3c <HAL_RCC_GetHCLKFreq+0x50>)
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	0a1b      	lsrs	r3, r3, #8
 8008dfe:	f003 030f 	and.w	r3, r3, #15
 8008e02:	490f      	ldr	r1, [pc, #60]	@ (8008e40 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e04:	5ccb      	ldrb	r3, [r1, r3]
 8008e06:	f003 031f 	and.w	r3, r3, #31
 8008e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e10:	4b0a      	ldr	r3, [pc, #40]	@ (8008e3c <HAL_RCC_GetHCLKFreq+0x50>)
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	f003 030f 	and.w	r3, r3, #15
 8008e18:	4a09      	ldr	r2, [pc, #36]	@ (8008e40 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e1a:	5cd3      	ldrb	r3, [r2, r3]
 8008e1c:	f003 031f 	and.w	r3, r3, #31
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	fa22 f303 	lsr.w	r3, r2, r3
 8008e26:	4a07      	ldr	r2, [pc, #28]	@ (8008e44 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e2a:	4a07      	ldr	r2, [pc, #28]	@ (8008e48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008e30:	4b04      	ldr	r3, [pc, #16]	@ (8008e44 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e32:	681b      	ldr	r3, [r3, #0]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	58024400 	.word	0x58024400
 8008e40:	0800f0c0 	.word	0x0800f0c0
 8008e44:	24000004 	.word	0x24000004
 8008e48:	24000000 	.word	0x24000000

08008e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008e50:	f7ff ffcc 	bl	8008dec <HAL_RCC_GetHCLKFreq>
 8008e54:	4602      	mov	r2, r0
 8008e56:	4b06      	ldr	r3, [pc, #24]	@ (8008e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	091b      	lsrs	r3, r3, #4
 8008e5c:	f003 0307 	and.w	r3, r3, #7
 8008e60:	4904      	ldr	r1, [pc, #16]	@ (8008e74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008e62:	5ccb      	ldrb	r3, [r1, r3]
 8008e64:	f003 031f 	and.w	r3, r3, #31
 8008e68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	58024400 	.word	0x58024400
 8008e74:	0800f0c0 	.word	0x0800f0c0

08008e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008e7c:	f7ff ffb6 	bl	8008dec <HAL_RCC_GetHCLKFreq>
 8008e80:	4602      	mov	r2, r0
 8008e82:	4b06      	ldr	r3, [pc, #24]	@ (8008e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	0a1b      	lsrs	r3, r3, #8
 8008e88:	f003 0307 	and.w	r3, r3, #7
 8008e8c:	4904      	ldr	r1, [pc, #16]	@ (8008ea0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008e8e:	5ccb      	ldrb	r3, [r1, r3]
 8008e90:	f003 031f 	and.w	r3, r3, #31
 8008e94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	58024400 	.word	0x58024400
 8008ea0:	0800f0c0 	.word	0x0800f0c0

08008ea4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ea8:	b0ca      	sub	sp, #296	@ 0x128
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008ec8:	2500      	movs	r5, #0
 8008eca:	ea54 0305 	orrs.w	r3, r4, r5
 8008ece:	d049      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ed4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ed6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008eda:	d02f      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008edc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ee0:	d828      	bhi.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008ee2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ee6:	d01a      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008ee8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008eec:	d822      	bhi.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d003      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ef6:	d007      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ef8:	e01c      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008efa:	4bb8      	ldr	r3, [pc, #736]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efe:	4ab7      	ldr	r2, [pc, #732]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f06:	e01a      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	2102      	movs	r1, #2
 8008f10:	4618      	mov	r0, r3
 8008f12:	f002 fb61 	bl	800b5d8 <RCCEx_PLL2_Config>
 8008f16:	4603      	mov	r3, r0
 8008f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f1c:	e00f      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f22:	3328      	adds	r3, #40	@ 0x28
 8008f24:	2102      	movs	r1, #2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f002 fc08 	bl	800b73c <RCCEx_PLL3_Config>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f32:	e004      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f3a:	e000      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10a      	bne.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008f46:	4ba5      	ldr	r3, [pc, #660]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f54:	4aa1      	ldr	r2, [pc, #644]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f56:	430b      	orrs	r3, r1
 8008f58:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f5a:	e003      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008f70:	f04f 0900 	mov.w	r9, #0
 8008f74:	ea58 0309 	orrs.w	r3, r8, r9
 8008f78:	d047      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f80:	2b04      	cmp	r3, #4
 8008f82:	d82a      	bhi.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008f84:	a201      	add	r2, pc, #4	@ (adr r2, 8008f8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8a:	bf00      	nop
 8008f8c:	08008fa1 	.word	0x08008fa1
 8008f90:	08008faf 	.word	0x08008faf
 8008f94:	08008fc5 	.word	0x08008fc5
 8008f98:	08008fe3 	.word	0x08008fe3
 8008f9c:	08008fe3 	.word	0x08008fe3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fa0:	4b8e      	ldr	r3, [pc, #568]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa4:	4a8d      	ldr	r2, [pc, #564]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fac:	e01a      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f002 fb0e 	bl	800b5d8 <RCCEx_PLL2_Config>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fc2:	e00f      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc8:	3328      	adds	r3, #40	@ 0x28
 8008fca:	2100      	movs	r1, #0
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f002 fbb5 	bl	800b73c <RCCEx_PLL3_Config>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fd8:	e004      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fe0:	e000      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10a      	bne.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008fec:	4b7b      	ldr	r3, [pc, #492]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ff0:	f023 0107 	bic.w	r1, r3, #7
 8008ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ffa:	4a78      	ldr	r2, [pc, #480]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ffc:	430b      	orrs	r3, r1
 8008ffe:	6513      	str	r3, [r2, #80]	@ 0x50
 8009000:	e003      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800900a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009016:	f04f 0b00 	mov.w	fp, #0
 800901a:	ea5a 030b 	orrs.w	r3, sl, fp
 800901e:	d04c      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800902a:	d030      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800902c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009030:	d829      	bhi.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009032:	2bc0      	cmp	r3, #192	@ 0xc0
 8009034:	d02d      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009036:	2bc0      	cmp	r3, #192	@ 0xc0
 8009038:	d825      	bhi.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800903a:	2b80      	cmp	r3, #128	@ 0x80
 800903c:	d018      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800903e:	2b80      	cmp	r3, #128	@ 0x80
 8009040:	d821      	bhi.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009042:	2b00      	cmp	r3, #0
 8009044:	d002      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009046:	2b40      	cmp	r3, #64	@ 0x40
 8009048:	d007      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800904a:	e01c      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800904c:	4b63      	ldr	r3, [pc, #396]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800904e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009050:	4a62      	ldr	r2, [pc, #392]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009056:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009058:	e01c      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800905a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800905e:	3308      	adds	r3, #8
 8009060:	2100      	movs	r1, #0
 8009062:	4618      	mov	r0, r3
 8009064:	f002 fab8 	bl	800b5d8 <RCCEx_PLL2_Config>
 8009068:	4603      	mov	r3, r0
 800906a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800906e:	e011      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009074:	3328      	adds	r3, #40	@ 0x28
 8009076:	2100      	movs	r1, #0
 8009078:	4618      	mov	r0, r3
 800907a:	f002 fb5f 	bl	800b73c <RCCEx_PLL3_Config>
 800907e:	4603      	mov	r3, r0
 8009080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009084:	e006      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800908c:	e002      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800908e:	bf00      	nop
 8009090:	e000      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10a      	bne.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800909c:	4b4f      	ldr	r3, [pc, #316]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800909e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090a0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80090a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090aa:	4a4c      	ldr	r2, [pc, #304]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090ac:	430b      	orrs	r3, r1
 80090ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80090b0:	e003      	b.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80090ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80090c6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80090ca:	2300      	movs	r3, #0
 80090cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80090d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80090d4:	460b      	mov	r3, r1
 80090d6:	4313      	orrs	r3, r2
 80090d8:	d053      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80090da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80090e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80090e6:	d035      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80090e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80090ec:	d82e      	bhi.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80090ee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80090f2:	d031      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80090f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80090f8:	d828      	bhi.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80090fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80090fe:	d01a      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009100:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009104:	d822      	bhi.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009106:	2b00      	cmp	r3, #0
 8009108:	d003      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800910a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800910e:	d007      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009110:	e01c      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009112:	4b32      	ldr	r3, [pc, #200]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009116:	4a31      	ldr	r2, [pc, #196]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800911c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800911e:	e01c      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009124:	3308      	adds	r3, #8
 8009126:	2100      	movs	r1, #0
 8009128:	4618      	mov	r0, r3
 800912a:	f002 fa55 	bl	800b5d8 <RCCEx_PLL2_Config>
 800912e:	4603      	mov	r3, r0
 8009130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009134:	e011      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800913a:	3328      	adds	r3, #40	@ 0x28
 800913c:	2100      	movs	r1, #0
 800913e:	4618      	mov	r0, r3
 8009140:	f002 fafc 	bl	800b73c <RCCEx_PLL3_Config>
 8009144:	4603      	mov	r3, r0
 8009146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800914a:	e006      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009152:	e002      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009154:	bf00      	nop
 8009156:	e000      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800915a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10b      	bne.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009162:	4b1e      	ldr	r3, [pc, #120]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009166:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800916a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800916e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009172:	4a1a      	ldr	r2, [pc, #104]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009174:	430b      	orrs	r3, r1
 8009176:	6593      	str	r3, [r2, #88]	@ 0x58
 8009178:	e003      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800917a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800917e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800918e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009192:	2300      	movs	r3, #0
 8009194:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009198:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800919c:	460b      	mov	r3, r1
 800919e:	4313      	orrs	r3, r2
 80091a0:	d056      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80091a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80091aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80091ae:	d038      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80091b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80091b4:	d831      	bhi.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80091ba:	d034      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80091bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80091c0:	d82b      	bhi.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091c6:	d01d      	beq.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80091c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091cc:	d825      	bhi.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d006      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80091d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091d6:	d00a      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80091d8:	e01f      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091da:	bf00      	nop
 80091dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091e0:	4ba2      	ldr	r3, [pc, #648]	@ (800946c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e4:	4aa1      	ldr	r2, [pc, #644]	@ (800946c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091ec:	e01c      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f2:	3308      	adds	r3, #8
 80091f4:	2100      	movs	r1, #0
 80091f6:	4618      	mov	r0, r3
 80091f8:	f002 f9ee 	bl	800b5d8 <RCCEx_PLL2_Config>
 80091fc:	4603      	mov	r3, r0
 80091fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009202:	e011      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009208:	3328      	adds	r3, #40	@ 0x28
 800920a:	2100      	movs	r1, #0
 800920c:	4618      	mov	r0, r3
 800920e:	f002 fa95 	bl	800b73c <RCCEx_PLL3_Config>
 8009212:	4603      	mov	r3, r0
 8009214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009218:	e006      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009220:	e002      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009222:	bf00      	nop
 8009224:	e000      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10b      	bne.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009230:	4b8e      	ldr	r3, [pc, #568]	@ (800946c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009234:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800923c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009240:	4a8a      	ldr	r2, [pc, #552]	@ (800946c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009242:	430b      	orrs	r3, r1
 8009244:	6593      	str	r3, [r2, #88]	@ 0x58
 8009246:	e003      	b.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800924c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800925c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009260:	2300      	movs	r3, #0
 8009262:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009266:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800926a:	460b      	mov	r3, r1
 800926c:	4313      	orrs	r3, r2
 800926e:	d03a      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009276:	2b30      	cmp	r3, #48	@ 0x30
 8009278:	d01f      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800927a:	2b30      	cmp	r3, #48	@ 0x30
 800927c:	d819      	bhi.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800927e:	2b20      	cmp	r3, #32
 8009280:	d00c      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009282:	2b20      	cmp	r3, #32
 8009284:	d815      	bhi.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009286:	2b00      	cmp	r3, #0
 8009288:	d019      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800928a:	2b10      	cmp	r3, #16
 800928c:	d111      	bne.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800928e:	4b77      	ldr	r3, [pc, #476]	@ (800946c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009292:	4a76      	ldr	r2, [pc, #472]	@ (800946c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009298:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800929a:	e011      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800929c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092a0:	3308      	adds	r3, #8
 80092a2:	2102      	movs	r1, #2
 80092a4:	4618      	mov	r0, r3
 80092a6:	f002 f997 	bl	800b5d8 <RCCEx_PLL2_Config>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80092b0:	e006      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092b8:	e002      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80092ba:	bf00      	nop
 80092bc:	e000      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80092be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10a      	bne.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80092c8:	4b68      	ldr	r3, [pc, #416]	@ (800946c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092cc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80092d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092d6:	4a65      	ldr	r2, [pc, #404]	@ (800946c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092d8:	430b      	orrs	r3, r1
 80092da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80092dc:	e003      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80092e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80092f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80092f6:	2300      	movs	r3, #0
 80092f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80092fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009300:	460b      	mov	r3, r1
 8009302:	4313      	orrs	r3, r2
 8009304:	d051      	beq.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800930a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800930c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009310:	d035      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009312:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009316:	d82e      	bhi.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009318:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800931c:	d031      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800931e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009322:	d828      	bhi.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009328:	d01a      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800932a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800932e:	d822      	bhi.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009330:	2b00      	cmp	r3, #0
 8009332:	d003      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009338:	d007      	beq.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800933a:	e01c      	b.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800933c:	4b4b      	ldr	r3, [pc, #300]	@ (800946c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800933e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009340:	4a4a      	ldr	r2, [pc, #296]	@ (800946c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009346:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009348:	e01c      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800934a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800934e:	3308      	adds	r3, #8
 8009350:	2100      	movs	r1, #0
 8009352:	4618      	mov	r0, r3
 8009354:	f002 f940 	bl	800b5d8 <RCCEx_PLL2_Config>
 8009358:	4603      	mov	r3, r0
 800935a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800935e:	e011      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009364:	3328      	adds	r3, #40	@ 0x28
 8009366:	2100      	movs	r1, #0
 8009368:	4618      	mov	r0, r3
 800936a:	f002 f9e7 	bl	800b73c <RCCEx_PLL3_Config>
 800936e:	4603      	mov	r3, r0
 8009370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009374:	e006      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800937c:	e002      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800937e:	bf00      	nop
 8009380:	e000      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009388:	2b00      	cmp	r3, #0
 800938a:	d10a      	bne.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800938c:	4b37      	ldr	r3, [pc, #220]	@ (800946c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800938e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009390:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800939a:	4a34      	ldr	r2, [pc, #208]	@ (800946c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800939c:	430b      	orrs	r3, r1
 800939e:	6513      	str	r3, [r2, #80]	@ 0x50
 80093a0:	e003      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80093aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80093b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80093ba:	2300      	movs	r3, #0
 80093bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80093c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80093c4:	460b      	mov	r3, r1
 80093c6:	4313      	orrs	r3, r2
 80093c8:	d056      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80093ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093d4:	d033      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80093d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093da:	d82c      	bhi.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093e0:	d02f      	beq.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80093e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093e6:	d826      	bhi.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80093ec:	d02b      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80093ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80093f2:	d820      	bhi.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093f8:	d012      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80093fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093fe:	d81a      	bhi.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009400:	2b00      	cmp	r3, #0
 8009402:	d022      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009408:	d115      	bne.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800940a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800940e:	3308      	adds	r3, #8
 8009410:	2101      	movs	r1, #1
 8009412:	4618      	mov	r0, r3
 8009414:	f002 f8e0 	bl	800b5d8 <RCCEx_PLL2_Config>
 8009418:	4603      	mov	r3, r0
 800941a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800941e:	e015      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009424:	3328      	adds	r3, #40	@ 0x28
 8009426:	2101      	movs	r1, #1
 8009428:	4618      	mov	r0, r3
 800942a:	f002 f987 	bl	800b73c <RCCEx_PLL3_Config>
 800942e:	4603      	mov	r3, r0
 8009430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009434:	e00a      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800943c:	e006      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800943e:	bf00      	nop
 8009440:	e004      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009442:	bf00      	nop
 8009444:	e002      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009446:	bf00      	nop
 8009448:	e000      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800944a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800944c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10d      	bne.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009454:	4b05      	ldr	r3, [pc, #20]	@ (800946c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009458:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800945c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009460:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009462:	4a02      	ldr	r2, [pc, #8]	@ (800946c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009464:	430b      	orrs	r3, r1
 8009466:	6513      	str	r3, [r2, #80]	@ 0x50
 8009468:	e006      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800946a:	bf00      	nop
 800946c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800947c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009480:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009484:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009488:	2300      	movs	r3, #0
 800948a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800948e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009492:	460b      	mov	r3, r1
 8009494:	4313      	orrs	r3, r2
 8009496:	d055      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800949c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094a4:	d033      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80094a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094aa:	d82c      	bhi.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094b0:	d02f      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80094b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094b6:	d826      	bhi.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80094bc:	d02b      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80094be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80094c2:	d820      	bhi.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094c8:	d012      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80094ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094ce:	d81a      	bhi.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d022      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80094d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094d8:	d115      	bne.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094de:	3308      	adds	r3, #8
 80094e0:	2101      	movs	r1, #1
 80094e2:	4618      	mov	r0, r3
 80094e4:	f002 f878 	bl	800b5d8 <RCCEx_PLL2_Config>
 80094e8:	4603      	mov	r3, r0
 80094ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80094ee:	e015      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f4:	3328      	adds	r3, #40	@ 0x28
 80094f6:	2101      	movs	r1, #1
 80094f8:	4618      	mov	r0, r3
 80094fa:	f002 f91f 	bl	800b73c <RCCEx_PLL3_Config>
 80094fe:	4603      	mov	r3, r0
 8009500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009504:	e00a      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800950c:	e006      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800950e:	bf00      	nop
 8009510:	e004      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009512:	bf00      	nop
 8009514:	e002      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009516:	bf00      	nop
 8009518:	e000      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800951a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800951c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10b      	bne.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009524:	4ba3      	ldr	r3, [pc, #652]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009528:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800952c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009530:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009534:	4a9f      	ldr	r2, [pc, #636]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009536:	430b      	orrs	r3, r1
 8009538:	6593      	str	r3, [r2, #88]	@ 0x58
 800953a:	e003      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800953c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009540:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009550:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009554:	2300      	movs	r3, #0
 8009556:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800955a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800955e:	460b      	mov	r3, r1
 8009560:	4313      	orrs	r3, r2
 8009562:	d037      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800956a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800956e:	d00e      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009574:	d816      	bhi.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009576:	2b00      	cmp	r3, #0
 8009578:	d018      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800957a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800957e:	d111      	bne.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009580:	4b8c      	ldr	r3, [pc, #560]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009584:	4a8b      	ldr	r2, [pc, #556]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800958a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800958c:	e00f      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800958e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009592:	3308      	adds	r3, #8
 8009594:	2101      	movs	r1, #1
 8009596:	4618      	mov	r0, r3
 8009598:	f002 f81e 	bl	800b5d8 <RCCEx_PLL2_Config>
 800959c:	4603      	mov	r3, r0
 800959e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80095a2:	e004      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095aa:	e000      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80095ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10a      	bne.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80095b6:	4b7f      	ldr	r3, [pc, #508]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80095be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095c4:	4a7b      	ldr	r2, [pc, #492]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095c6:	430b      	orrs	r3, r1
 80095c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80095ca:	e003      	b.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80095d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80095e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80095e4:	2300      	movs	r3, #0
 80095e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80095ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4313      	orrs	r3, r2
 80095f2:	d039      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80095f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	d81c      	bhi.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80095fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009604 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009604:	08009641 	.word	0x08009641
 8009608:	08009615 	.word	0x08009615
 800960c:	08009623 	.word	0x08009623
 8009610:	08009641 	.word	0x08009641
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009614:	4b67      	ldr	r3, [pc, #412]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009618:	4a66      	ldr	r2, [pc, #408]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800961a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800961e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009620:	e00f      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009626:	3308      	adds	r3, #8
 8009628:	2102      	movs	r1, #2
 800962a:	4618      	mov	r0, r3
 800962c:	f001 ffd4 	bl	800b5d8 <RCCEx_PLL2_Config>
 8009630:	4603      	mov	r3, r0
 8009632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009636:	e004      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800963e:	e000      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10a      	bne.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800964a:	4b5a      	ldr	r3, [pc, #360]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800964c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800964e:	f023 0103 	bic.w	r1, r3, #3
 8009652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009658:	4a56      	ldr	r2, [pc, #344]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800965a:	430b      	orrs	r3, r1
 800965c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800965e:	e003      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009664:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800966c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009670:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009674:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009678:	2300      	movs	r3, #0
 800967a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800967e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009682:	460b      	mov	r3, r1
 8009684:	4313      	orrs	r3, r2
 8009686:	f000 809f 	beq.w	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800968a:	4b4b      	ldr	r3, [pc, #300]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a4a      	ldr	r2, [pc, #296]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009694:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009696:	f7fa f8f7 	bl	8003888 <HAL_GetTick>
 800969a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800969e:	e00b      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096a0:	f7fa f8f2 	bl	8003888 <HAL_GetTick>
 80096a4:	4602      	mov	r2, r0
 80096a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	2b64      	cmp	r3, #100	@ 0x64
 80096ae:	d903      	bls.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80096b0:	2303      	movs	r3, #3
 80096b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096b6:	e005      	b.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096b8:	4b3f      	ldr	r3, [pc, #252]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d0ed      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80096c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d179      	bne.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80096cc:	4b39      	ldr	r3, [pc, #228]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80096d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096d8:	4053      	eors	r3, r2
 80096da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d015      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096e2:	4b34      	ldr	r3, [pc, #208]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80096ee:	4b31      	ldr	r3, [pc, #196]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096f2:	4a30      	ldr	r2, [pc, #192]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80096fa:	4b2e      	ldr	r3, [pc, #184]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096fe:	4a2d      	ldr	r2, [pc, #180]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009700:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009704:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009706:	4a2b      	ldr	r2, [pc, #172]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009708:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800970c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800970e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009712:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800971a:	d118      	bne.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800971c:	f7fa f8b4 	bl	8003888 <HAL_GetTick>
 8009720:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009724:	e00d      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009726:	f7fa f8af 	bl	8003888 <HAL_GetTick>
 800972a:	4602      	mov	r2, r0
 800972c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009730:	1ad2      	subs	r2, r2, r3
 8009732:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009736:	429a      	cmp	r2, r3
 8009738:	d903      	bls.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009740:	e005      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009742:	4b1c      	ldr	r3, [pc, #112]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009746:	f003 0302 	and.w	r3, r3, #2
 800974a:	2b00      	cmp	r3, #0
 800974c:	d0eb      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800974e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009752:	2b00      	cmp	r3, #0
 8009754:	d129      	bne.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800975a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800975e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009762:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009766:	d10e      	bne.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009768:	4b12      	ldr	r3, [pc, #72]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009774:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009778:	091a      	lsrs	r2, r3, #4
 800977a:	4b10      	ldr	r3, [pc, #64]	@ (80097bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800977c:	4013      	ands	r3, r2
 800977e:	4a0d      	ldr	r2, [pc, #52]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009780:	430b      	orrs	r3, r1
 8009782:	6113      	str	r3, [r2, #16]
 8009784:	e005      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009786:	4b0b      	ldr	r3, [pc, #44]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	4a0a      	ldr	r2, [pc, #40]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800978c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009790:	6113      	str	r3, [r2, #16]
 8009792:	4b08      	ldr	r3, [pc, #32]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009794:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800979a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800979e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097a2:	4a04      	ldr	r2, [pc, #16]	@ (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097a4:	430b      	orrs	r3, r1
 80097a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80097a8:	e00e      	b.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80097aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80097b2:	e009      	b.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80097b4:	58024400 	.word	0x58024400
 80097b8:	58024800 	.word	0x58024800
 80097bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80097c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	f002 0301 	and.w	r3, r2, #1
 80097d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097d8:	2300      	movs	r3, #0
 80097da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80097de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4313      	orrs	r3, r2
 80097e6:	f000 8089 	beq.w	80098fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80097ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097f0:	2b28      	cmp	r3, #40	@ 0x28
 80097f2:	d86b      	bhi.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80097f4:	a201      	add	r2, pc, #4	@ (adr r2, 80097fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80097f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fa:	bf00      	nop
 80097fc:	080098d5 	.word	0x080098d5
 8009800:	080098cd 	.word	0x080098cd
 8009804:	080098cd 	.word	0x080098cd
 8009808:	080098cd 	.word	0x080098cd
 800980c:	080098cd 	.word	0x080098cd
 8009810:	080098cd 	.word	0x080098cd
 8009814:	080098cd 	.word	0x080098cd
 8009818:	080098cd 	.word	0x080098cd
 800981c:	080098a1 	.word	0x080098a1
 8009820:	080098cd 	.word	0x080098cd
 8009824:	080098cd 	.word	0x080098cd
 8009828:	080098cd 	.word	0x080098cd
 800982c:	080098cd 	.word	0x080098cd
 8009830:	080098cd 	.word	0x080098cd
 8009834:	080098cd 	.word	0x080098cd
 8009838:	080098cd 	.word	0x080098cd
 800983c:	080098b7 	.word	0x080098b7
 8009840:	080098cd 	.word	0x080098cd
 8009844:	080098cd 	.word	0x080098cd
 8009848:	080098cd 	.word	0x080098cd
 800984c:	080098cd 	.word	0x080098cd
 8009850:	080098cd 	.word	0x080098cd
 8009854:	080098cd 	.word	0x080098cd
 8009858:	080098cd 	.word	0x080098cd
 800985c:	080098d5 	.word	0x080098d5
 8009860:	080098cd 	.word	0x080098cd
 8009864:	080098cd 	.word	0x080098cd
 8009868:	080098cd 	.word	0x080098cd
 800986c:	080098cd 	.word	0x080098cd
 8009870:	080098cd 	.word	0x080098cd
 8009874:	080098cd 	.word	0x080098cd
 8009878:	080098cd 	.word	0x080098cd
 800987c:	080098d5 	.word	0x080098d5
 8009880:	080098cd 	.word	0x080098cd
 8009884:	080098cd 	.word	0x080098cd
 8009888:	080098cd 	.word	0x080098cd
 800988c:	080098cd 	.word	0x080098cd
 8009890:	080098cd 	.word	0x080098cd
 8009894:	080098cd 	.word	0x080098cd
 8009898:	080098cd 	.word	0x080098cd
 800989c:	080098d5 	.word	0x080098d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a4:	3308      	adds	r3, #8
 80098a6:	2101      	movs	r1, #1
 80098a8:	4618      	mov	r0, r3
 80098aa:	f001 fe95 	bl	800b5d8 <RCCEx_PLL2_Config>
 80098ae:	4603      	mov	r3, r0
 80098b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80098b4:	e00f      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ba:	3328      	adds	r3, #40	@ 0x28
 80098bc:	2101      	movs	r1, #1
 80098be:	4618      	mov	r0, r3
 80098c0:	f001 ff3c 	bl	800b73c <RCCEx_PLL3_Config>
 80098c4:	4603      	mov	r3, r0
 80098c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80098ca:	e004      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098d2:	e000      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80098d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10a      	bne.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80098de:	4bbf      	ldr	r3, [pc, #764]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80098e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098ec:	4abb      	ldr	r2, [pc, #748]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098ee:	430b      	orrs	r3, r1
 80098f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80098f2:	e003      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80098fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009904:	f002 0302 	and.w	r3, r2, #2
 8009908:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800990c:	2300      	movs	r3, #0
 800990e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009912:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009916:	460b      	mov	r3, r1
 8009918:	4313      	orrs	r3, r2
 800991a:	d041      	beq.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800991c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009920:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009922:	2b05      	cmp	r3, #5
 8009924:	d824      	bhi.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009926:	a201      	add	r2, pc, #4	@ (adr r2, 800992c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992c:	08009979 	.word	0x08009979
 8009930:	08009945 	.word	0x08009945
 8009934:	0800995b 	.word	0x0800995b
 8009938:	08009979 	.word	0x08009979
 800993c:	08009979 	.word	0x08009979
 8009940:	08009979 	.word	0x08009979
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009948:	3308      	adds	r3, #8
 800994a:	2101      	movs	r1, #1
 800994c:	4618      	mov	r0, r3
 800994e:	f001 fe43 	bl	800b5d8 <RCCEx_PLL2_Config>
 8009952:	4603      	mov	r3, r0
 8009954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009958:	e00f      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800995a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800995e:	3328      	adds	r3, #40	@ 0x28
 8009960:	2101      	movs	r1, #1
 8009962:	4618      	mov	r0, r3
 8009964:	f001 feea 	bl	800b73c <RCCEx_PLL3_Config>
 8009968:	4603      	mov	r3, r0
 800996a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800996e:	e004      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009976:	e000      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800997a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10a      	bne.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009982:	4b96      	ldr	r3, [pc, #600]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009986:	f023 0107 	bic.w	r1, r3, #7
 800998a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800998e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009990:	4a92      	ldr	r2, [pc, #584]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009992:	430b      	orrs	r3, r1
 8009994:	6553      	str	r3, [r2, #84]	@ 0x54
 8009996:	e003      	b.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800999c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80099a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	f002 0304 	and.w	r3, r2, #4
 80099ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80099b0:	2300      	movs	r3, #0
 80099b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80099ba:	460b      	mov	r3, r1
 80099bc:	4313      	orrs	r3, r2
 80099be:	d044      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80099c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099c8:	2b05      	cmp	r3, #5
 80099ca:	d825      	bhi.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80099cc:	a201      	add	r2, pc, #4	@ (adr r2, 80099d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80099ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d2:	bf00      	nop
 80099d4:	08009a21 	.word	0x08009a21
 80099d8:	080099ed 	.word	0x080099ed
 80099dc:	08009a03 	.word	0x08009a03
 80099e0:	08009a21 	.word	0x08009a21
 80099e4:	08009a21 	.word	0x08009a21
 80099e8:	08009a21 	.word	0x08009a21
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099f0:	3308      	adds	r3, #8
 80099f2:	2101      	movs	r1, #1
 80099f4:	4618      	mov	r0, r3
 80099f6:	f001 fdef 	bl	800b5d8 <RCCEx_PLL2_Config>
 80099fa:	4603      	mov	r3, r0
 80099fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a00:	e00f      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a06:	3328      	adds	r3, #40	@ 0x28
 8009a08:	2101      	movs	r1, #1
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f001 fe96 	bl	800b73c <RCCEx_PLL3_Config>
 8009a10:	4603      	mov	r3, r0
 8009a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a16:	e004      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a1e:	e000      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10b      	bne.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a2a:	4b6c      	ldr	r3, [pc, #432]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a2e:	f023 0107 	bic.w	r1, r3, #7
 8009a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a3a:	4a68      	ldr	r2, [pc, #416]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a3c:	430b      	orrs	r3, r1
 8009a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a40:	e003      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	f002 0320 	and.w	r3, r2, #32
 8009a56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009a64:	460b      	mov	r3, r1
 8009a66:	4313      	orrs	r3, r2
 8009a68:	d055      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a76:	d033      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a7c:	d82c      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a82:	d02f      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a88:	d826      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a8e:	d02b      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009a90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a94:	d820      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a9a:	d012      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009a9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009aa0:	d81a      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d022      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009aa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009aaa:	d115      	bne.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f001 fd8f 	bl	800b5d8 <RCCEx_PLL2_Config>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ac0:	e015      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac6:	3328      	adds	r3, #40	@ 0x28
 8009ac8:	2102      	movs	r1, #2
 8009aca:	4618      	mov	r0, r3
 8009acc:	f001 fe36 	bl	800b73c <RCCEx_PLL3_Config>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ad6:	e00a      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ade:	e006      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ae0:	bf00      	nop
 8009ae2:	e004      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ae4:	bf00      	nop
 8009ae6:	e002      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ae8:	bf00      	nop
 8009aea:	e000      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10b      	bne.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009af6:	4b39      	ldr	r3, [pc, #228]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009afa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b06:	4a35      	ldr	r2, [pc, #212]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b08:	430b      	orrs	r3, r1
 8009b0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b0c:	e003      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b26:	2300      	movs	r3, #0
 8009b28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009b2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4313      	orrs	r3, r2
 8009b34:	d058      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b3e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009b42:	d033      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009b44:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009b48:	d82c      	bhi.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b4e:	d02f      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b54:	d826      	bhi.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b5a:	d02b      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009b5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b60:	d820      	bhi.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b66:	d012      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b6c:	d81a      	bhi.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d022      	beq.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b76:	d115      	bne.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	2100      	movs	r1, #0
 8009b80:	4618      	mov	r0, r3
 8009b82:	f001 fd29 	bl	800b5d8 <RCCEx_PLL2_Config>
 8009b86:	4603      	mov	r3, r0
 8009b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b8c:	e015      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b92:	3328      	adds	r3, #40	@ 0x28
 8009b94:	2102      	movs	r1, #2
 8009b96:	4618      	mov	r0, r3
 8009b98:	f001 fdd0 	bl	800b73c <RCCEx_PLL3_Config>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ba2:	e00a      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009baa:	e006      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bac:	bf00      	nop
 8009bae:	e004      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bb0:	bf00      	nop
 8009bb2:	e002      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bb4:	bf00      	nop
 8009bb6:	e000      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10e      	bne.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009bc2:	4b06      	ldr	r3, [pc, #24]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bc6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009bd2:	4a02      	ldr	r2, [pc, #8]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bd4:	430b      	orrs	r3, r1
 8009bd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bd8:	e006      	b.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009bda:	bf00      	nop
 8009bdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009be4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bfe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009c02:	460b      	mov	r3, r1
 8009c04:	4313      	orrs	r3, r2
 8009c06:	d055      	beq.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c10:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009c14:	d033      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009c16:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009c1a:	d82c      	bhi.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c20:	d02f      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009c22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c26:	d826      	bhi.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c28:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009c2c:	d02b      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009c2e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009c32:	d820      	bhi.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c38:	d012      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009c3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c3e:	d81a      	bhi.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d022      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c48:	d115      	bne.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c4e:	3308      	adds	r3, #8
 8009c50:	2100      	movs	r1, #0
 8009c52:	4618      	mov	r0, r3
 8009c54:	f001 fcc0 	bl	800b5d8 <RCCEx_PLL2_Config>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c5e:	e015      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c64:	3328      	adds	r3, #40	@ 0x28
 8009c66:	2102      	movs	r1, #2
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f001 fd67 	bl	800b73c <RCCEx_PLL3_Config>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c74:	e00a      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c7c:	e006      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c7e:	bf00      	nop
 8009c80:	e004      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c82:	bf00      	nop
 8009c84:	e002      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c86:	bf00      	nop
 8009c88:	e000      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10b      	bne.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009c94:	4ba1      	ldr	r3, [pc, #644]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c98:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ca0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009ca4:	4a9d      	ldr	r2, [pc, #628]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ca6:	430b      	orrs	r3, r1
 8009ca8:	6593      	str	r3, [r2, #88]	@ 0x58
 8009caa:	e003      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	f002 0308 	and.w	r3, r2, #8
 8009cc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009cca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	d01e      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ce0:	d10c      	bne.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce6:	3328      	adds	r3, #40	@ 0x28
 8009ce8:	2102      	movs	r1, #2
 8009cea:	4618      	mov	r0, r3
 8009cec:	f001 fd26 	bl	800b73c <RCCEx_PLL3_Config>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d002      	beq.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009cfc:	4b87      	ldr	r3, [pc, #540]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d00:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d0c:	4a83      	ldr	r2, [pc, #524]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d0e:	430b      	orrs	r3, r1
 8009d10:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	f002 0310 	and.w	r3, r2, #16
 8009d1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d22:	2300      	movs	r3, #0
 8009d24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009d28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	d01e      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d3e:	d10c      	bne.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d44:	3328      	adds	r3, #40	@ 0x28
 8009d46:	2102      	movs	r1, #2
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f001 fcf7 	bl	800b73c <RCCEx_PLL3_Config>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d5a:	4b70      	ldr	r3, [pc, #448]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d6a:	4a6c      	ldr	r2, [pc, #432]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d6c:	430b      	orrs	r3, r1
 8009d6e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009d7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d80:	2300      	movs	r3, #0
 8009d82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d86:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	d03e      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d9c:	d022      	beq.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009d9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009da2:	d81b      	bhi.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d003      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dac:	d00b      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009dae:	e015      	b.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db4:	3308      	adds	r3, #8
 8009db6:	2100      	movs	r1, #0
 8009db8:	4618      	mov	r0, r3
 8009dba:	f001 fc0d 	bl	800b5d8 <RCCEx_PLL2_Config>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009dc4:	e00f      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dca:	3328      	adds	r3, #40	@ 0x28
 8009dcc:	2102      	movs	r1, #2
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f001 fcb4 	bl	800b73c <RCCEx_PLL3_Config>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009dda:	e004      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009de2:	e000      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d10b      	bne.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009dee:	4b4b      	ldr	r3, [pc, #300]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009df2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009dfe:	4a47      	ldr	r2, [pc, #284]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e00:	430b      	orrs	r3, r1
 8009e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e04:	e003      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009e1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009e24:	460b      	mov	r3, r1
 8009e26:	4313      	orrs	r3, r2
 8009e28:	d03b      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e36:	d01f      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009e38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e3c:	d818      	bhi.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009e3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e42:	d003      	beq.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009e44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e48:	d007      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009e4a:	e011      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e4c:	4b33      	ldr	r3, [pc, #204]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e50:	4a32      	ldr	r2, [pc, #200]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e58:	e00f      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e5e:	3328      	adds	r3, #40	@ 0x28
 8009e60:	2101      	movs	r1, #1
 8009e62:	4618      	mov	r0, r3
 8009e64:	f001 fc6a 	bl	800b73c <RCCEx_PLL3_Config>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e6e:	e004      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e76:	e000      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10b      	bne.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e82:	4b26      	ldr	r3, [pc, #152]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e92:	4a22      	ldr	r2, [pc, #136]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e94:	430b      	orrs	r3, r1
 8009e96:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e98:	e003      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009eae:	673b      	str	r3, [r7, #112]	@ 0x70
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8009eb4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009eb8:	460b      	mov	r3, r1
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	d034      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d003      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ecc:	d007      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009ece:	e011      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ed0:	4b12      	ldr	r3, [pc, #72]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed4:	4a11      	ldr	r2, [pc, #68]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009eda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009edc:	e00e      	b.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee2:	3308      	adds	r3, #8
 8009ee4:	2102      	movs	r1, #2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 fb76 	bl	800b5d8 <RCCEx_PLL2_Config>
 8009eec:	4603      	mov	r3, r0
 8009eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009ef2:	e003      	b.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10d      	bne.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009f04:	4b05      	ldr	r3, [pc, #20]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f12:	4a02      	ldr	r2, [pc, #8]	@ (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f14:	430b      	orrs	r3, r1
 8009f16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f18:	e006      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009f1a:	bf00      	nop
 8009f1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009f34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f36:	2300      	movs	r3, #0
 8009f38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f3a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4313      	orrs	r3, r2
 8009f42:	d00c      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f48:	3328      	adds	r3, #40	@ 0x28
 8009f4a:	2102      	movs	r1, #2
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 fbf5 	bl	800b73c <RCCEx_PLL3_Config>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009f6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f70:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009f74:	460b      	mov	r3, r1
 8009f76:	4313      	orrs	r3, r2
 8009f78:	d038      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f86:	d018      	beq.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009f88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f8c:	d811      	bhi.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f92:	d014      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f98:	d80b      	bhi.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d011      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fa2:	d106      	bne.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fa4:	4bc3      	ldr	r3, [pc, #780]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa8:	4ac2      	ldr	r2, [pc, #776]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009fb0:	e008      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fb8:	e004      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009fba:	bf00      	nop
 8009fbc:	e002      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009fbe:	bf00      	nop
 8009fc0:	e000      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10b      	bne.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009fcc:	4bb9      	ldr	r3, [pc, #740]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fd0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fdc:	4ab5      	ldr	r2, [pc, #724]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fde:	430b      	orrs	r3, r1
 8009fe0:	6553      	str	r3, [r2, #84]	@ 0x54
 8009fe2:	e003      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fe8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009ff8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ffe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a002:	460b      	mov	r3, r1
 800a004:	4313      	orrs	r3, r2
 800a006:	d009      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a008:	4baa      	ldr	r3, [pc, #680]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a00a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a00c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a016:	4aa7      	ldr	r2, [pc, #668]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a018:	430b      	orrs	r3, r1
 800a01a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a028:	653b      	str	r3, [r7, #80]	@ 0x50
 800a02a:	2300      	movs	r3, #0
 800a02c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a02e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a032:	460b      	mov	r3, r1
 800a034:	4313      	orrs	r3, r2
 800a036:	d00a      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a038:	4b9e      	ldr	r3, [pc, #632]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a03a:	691b      	ldr	r3, [r3, #16]
 800a03c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a044:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a048:	4a9a      	ldr	r2, [pc, #616]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a04a:	430b      	orrs	r3, r1
 800a04c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a05a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a05c:	2300      	movs	r3, #0
 800a05e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a060:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a064:	460b      	mov	r3, r1
 800a066:	4313      	orrs	r3, r2
 800a068:	d009      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a06a:	4b92      	ldr	r3, [pc, #584]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a06c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a06e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a078:	4a8e      	ldr	r2, [pc, #568]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a07a:	430b      	orrs	r3, r1
 800a07c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a08a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a08c:	2300      	movs	r3, #0
 800a08e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a090:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a094:	460b      	mov	r3, r1
 800a096:	4313      	orrs	r3, r2
 800a098:	d00e      	beq.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a09a:	4b86      	ldr	r3, [pc, #536]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	4a85      	ldr	r2, [pc, #532]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0a0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a0a4:	6113      	str	r3, [r2, #16]
 800a0a6:	4b83      	ldr	r3, [pc, #524]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0a8:	6919      	ldr	r1, [r3, #16]
 800a0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a0b2:	4a80      	ldr	r2, [pc, #512]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0b4:	430b      	orrs	r3, r1
 800a0b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a0c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	d009      	beq.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a0d4:	4b77      	ldr	r3, [pc, #476]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0d8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0e2:	4a74      	ldr	r2, [pc, #464]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0e4:	430b      	orrs	r3, r1
 800a0e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a0f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a0fe:	460b      	mov	r3, r1
 800a100:	4313      	orrs	r3, r2
 800a102:	d00a      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a104:	4b6b      	ldr	r3, [pc, #428]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a108:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a114:	4a67      	ldr	r2, [pc, #412]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a116:	430b      	orrs	r3, r1
 800a118:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a122:	2100      	movs	r1, #0
 800a124:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a126:	f003 0301 	and.w	r3, r3, #1
 800a12a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a12c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a130:	460b      	mov	r3, r1
 800a132:	4313      	orrs	r3, r2
 800a134:	d011      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13a:	3308      	adds	r3, #8
 800a13c:	2100      	movs	r1, #0
 800a13e:	4618      	mov	r0, r3
 800a140:	f001 fa4a 	bl	800b5d8 <RCCEx_PLL2_Config>
 800a144:	4603      	mov	r3, r0
 800a146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a14a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d003      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a156:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	2100      	movs	r1, #0
 800a164:	6239      	str	r1, [r7, #32]
 800a166:	f003 0302 	and.w	r3, r3, #2
 800a16a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a16c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a170:	460b      	mov	r3, r1
 800a172:	4313      	orrs	r3, r2
 800a174:	d011      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a17a:	3308      	adds	r3, #8
 800a17c:	2101      	movs	r1, #1
 800a17e:	4618      	mov	r0, r3
 800a180:	f001 fa2a 	bl	800b5d8 <RCCEx_PLL2_Config>
 800a184:	4603      	mov	r3, r0
 800a186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a18a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	61b9      	str	r1, [r7, #24]
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	61fb      	str	r3, [r7, #28]
 800a1ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	d011      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	2102      	movs	r1, #2
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f001 fa0a 	bl	800b5d8 <RCCEx_PLL2_Config>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a1ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d003      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	6139      	str	r1, [r7, #16]
 800a1e6:	f003 0308 	and.w	r3, r3, #8
 800a1ea:	617b      	str	r3, [r7, #20]
 800a1ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	d011      	beq.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1fa:	3328      	adds	r3, #40	@ 0x28
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	4618      	mov	r0, r3
 800a200:	f001 fa9c 	bl	800b73c <RCCEx_PLL3_Config>
 800a204:	4603      	mov	r3, r0
 800a206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a20a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d003      	beq.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a216:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	2100      	movs	r1, #0
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	f003 0310 	and.w	r3, r3, #16
 800a22a:	60fb      	str	r3, [r7, #12]
 800a22c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a230:	460b      	mov	r3, r1
 800a232:	4313      	orrs	r3, r2
 800a234:	d011      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a23a:	3328      	adds	r3, #40	@ 0x28
 800a23c:	2101      	movs	r1, #1
 800a23e:	4618      	mov	r0, r3
 800a240:	f001 fa7c 	bl	800b73c <RCCEx_PLL3_Config>
 800a244:	4603      	mov	r3, r0
 800a246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a24a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a256:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a262:	2100      	movs	r1, #0
 800a264:	6039      	str	r1, [r7, #0]
 800a266:	f003 0320 	and.w	r3, r3, #32
 800a26a:	607b      	str	r3, [r7, #4]
 800a26c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a270:	460b      	mov	r3, r1
 800a272:	4313      	orrs	r3, r2
 800a274:	d011      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a27a:	3328      	adds	r3, #40	@ 0x28
 800a27c:	2102      	movs	r1, #2
 800a27e:	4618      	mov	r0, r3
 800a280:	f001 fa5c 	bl	800b73c <RCCEx_PLL3_Config>
 800a284:	4603      	mov	r3, r0
 800a286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a28a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d003      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a29a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	e000      	b.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2b4:	58024400 	.word	0x58024400

0800a2b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b090      	sub	sp, #64	@ 0x40
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a2c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2c6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a2ca:	430b      	orrs	r3, r1
 800a2cc:	f040 8094 	bne.w	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a2d0:	4b9e      	ldr	r3, [pc, #632]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2d4:	f003 0307 	and.w	r3, r3, #7
 800a2d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2dc:	2b04      	cmp	r3, #4
 800a2de:	f200 8087 	bhi.w	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a2e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e8:	0800a2fd 	.word	0x0800a2fd
 800a2ec:	0800a325 	.word	0x0800a325
 800a2f0:	0800a34d 	.word	0x0800a34d
 800a2f4:	0800a3e9 	.word	0x0800a3e9
 800a2f8:	0800a375 	.word	0x0800a375
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2fc:	4b93      	ldr	r3, [pc, #588]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a304:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a308:	d108      	bne.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a30a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a30e:	4618      	mov	r0, r3
 800a310:	f001 f810 	bl	800b334 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a318:	f000 bd45 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a31c:	2300      	movs	r3, #0
 800a31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a320:	f000 bd41 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a324:	4b89      	ldr	r3, [pc, #548]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a32c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a330:	d108      	bne.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a332:	f107 0318 	add.w	r3, r7, #24
 800a336:	4618      	mov	r0, r3
 800a338:	f000 fd54 	bl	800ade4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a340:	f000 bd31 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a344:	2300      	movs	r3, #0
 800a346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a348:	f000 bd2d 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a34c:	4b7f      	ldr	r3, [pc, #508]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a358:	d108      	bne.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a35a:	f107 030c 	add.w	r3, r7, #12
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 fe94 	bl	800b08c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a368:	f000 bd1d 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a370:	f000 bd19 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a374:	4b75      	ldr	r3, [pc, #468]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a378:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a37c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a37e:	4b73      	ldr	r3, [pc, #460]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f003 0304 	and.w	r3, r3, #4
 800a386:	2b04      	cmp	r3, #4
 800a388:	d10c      	bne.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a38a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d109      	bne.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a390:	4b6e      	ldr	r3, [pc, #440]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	08db      	lsrs	r3, r3, #3
 800a396:	f003 0303 	and.w	r3, r3, #3
 800a39a:	4a6d      	ldr	r2, [pc, #436]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a39c:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3a2:	e01f      	b.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3a4:	4b69      	ldr	r3, [pc, #420]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3b0:	d106      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3b8:	d102      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3ba:	4b66      	ldr	r3, [pc, #408]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a3bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3be:	e011      	b.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3c0:	4b62      	ldr	r3, [pc, #392]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3cc:	d106      	bne.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a3ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3d4:	d102      	bne.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3d6:	4b60      	ldr	r3, [pc, #384]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a3d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3da:	e003      	b.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3e0:	f000 bce1 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3e4:	f000 bcdf 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3e8:	4b5c      	ldr	r3, [pc, #368]	@ (800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3ec:	f000 bcdb 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3f4:	f000 bcd7 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a3f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3fc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a400:	430b      	orrs	r3, r1
 800a402:	f040 80ad 	bne.w	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a406:	4b51      	ldr	r3, [pc, #324]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a40a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a40e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a416:	d056      	beq.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a41e:	f200 8090 	bhi.w	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a424:	2bc0      	cmp	r3, #192	@ 0xc0
 800a426:	f000 8088 	beq.w	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a42e:	f200 8088 	bhi.w	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a434:	2b80      	cmp	r3, #128	@ 0x80
 800a436:	d032      	beq.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43a:	2b80      	cmp	r3, #128	@ 0x80
 800a43c:	f200 8081 	bhi.w	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a442:	2b00      	cmp	r3, #0
 800a444:	d003      	beq.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a448:	2b40      	cmp	r3, #64	@ 0x40
 800a44a:	d014      	beq.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a44c:	e079      	b.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a44e:	4b3f      	ldr	r3, [pc, #252]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a456:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a45a:	d108      	bne.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a45c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a460:	4618      	mov	r0, r3
 800a462:	f000 ff67 	bl	800b334 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46a:	f000 bc9c 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a472:	f000 bc98 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a476:	4b35      	ldr	r3, [pc, #212]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a47e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a482:	d108      	bne.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a484:	f107 0318 	add.w	r3, r7, #24
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 fcab 	bl	800ade4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a492:	f000 bc88 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a49a:	f000 bc84 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a49e:	4b2b      	ldr	r3, [pc, #172]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4aa:	d108      	bne.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4ac:	f107 030c 	add.w	r3, r7, #12
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f000 fdeb 	bl	800b08c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ba:	f000 bc74 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4c2:	f000 bc70 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4c6:	4b21      	ldr	r3, [pc, #132]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4d0:	4b1e      	ldr	r3, [pc, #120]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 0304 	and.w	r3, r3, #4
 800a4d8:	2b04      	cmp	r3, #4
 800a4da:	d10c      	bne.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d109      	bne.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4e2:	4b1a      	ldr	r3, [pc, #104]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	08db      	lsrs	r3, r3, #3
 800a4e8:	f003 0303 	and.w	r3, r3, #3
 800a4ec:	4a18      	ldr	r2, [pc, #96]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a4ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4f4:	e01f      	b.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4f6:	4b15      	ldr	r3, [pc, #84]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a502:	d106      	bne.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a506:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a50a:	d102      	bne.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a50c:	4b11      	ldr	r3, [pc, #68]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a510:	e011      	b.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a512:	4b0e      	ldr	r3, [pc, #56]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a51a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a51e:	d106      	bne.n	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a522:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a526:	d102      	bne.n	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a528:	4b0b      	ldr	r3, [pc, #44]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a52c:	e003      	b.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a532:	f000 bc38 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a536:	f000 bc36 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a53a:	4b08      	ldr	r3, [pc, #32]	@ (800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a53c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a53e:	f000 bc32 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a542:	2300      	movs	r3, #0
 800a544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a546:	f000 bc2e 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a54a:	bf00      	nop
 800a54c:	58024400 	.word	0x58024400
 800a550:	03d09000 	.word	0x03d09000
 800a554:	003d0900 	.word	0x003d0900
 800a558:	017d7840 	.word	0x017d7840
 800a55c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a560:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a564:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a568:	430b      	orrs	r3, r1
 800a56a:	f040 809c 	bne.w	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a56e:	4b9e      	ldr	r3, [pc, #632]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a572:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a576:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a57e:	d054      	beq.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a582:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a586:	f200 808b 	bhi.w	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a590:	f000 8083 	beq.w	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a596:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a59a:	f200 8081 	bhi.w	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5a4:	d02f      	beq.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5ac:	d878      	bhi.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d004      	beq.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5ba:	d012      	beq.n	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a5bc:	e070      	b.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5be:	4b8a      	ldr	r3, [pc, #552]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5ca:	d107      	bne.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f000 feaf 	bl	800b334 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5da:	e3e4      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5e0:	e3e1      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5e2:	4b81      	ldr	r3, [pc, #516]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5ee:	d107      	bne.n	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5f0:	f107 0318 	add.w	r3, r7, #24
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f000 fbf5 	bl	800ade4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5fe:	e3d2      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a600:	2300      	movs	r3, #0
 800a602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a604:	e3cf      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a606:	4b78      	ldr	r3, [pc, #480]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a60e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a612:	d107      	bne.n	800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a614:	f107 030c 	add.w	r3, r7, #12
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 fd37 	bl	800b08c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a622:	e3c0      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a624:	2300      	movs	r3, #0
 800a626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a628:	e3bd      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a62a:	4b6f      	ldr	r3, [pc, #444]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a62c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a62e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a632:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a634:	4b6c      	ldr	r3, [pc, #432]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 0304 	and.w	r3, r3, #4
 800a63c:	2b04      	cmp	r3, #4
 800a63e:	d10c      	bne.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a642:	2b00      	cmp	r3, #0
 800a644:	d109      	bne.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a646:	4b68      	ldr	r3, [pc, #416]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	08db      	lsrs	r3, r3, #3
 800a64c:	f003 0303 	and.w	r3, r3, #3
 800a650:	4a66      	ldr	r2, [pc, #408]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a652:	fa22 f303 	lsr.w	r3, r2, r3
 800a656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a658:	e01e      	b.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a65a:	4b63      	ldr	r3, [pc, #396]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a666:	d106      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a66a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a66e:	d102      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a670:	4b5f      	ldr	r3, [pc, #380]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a674:	e010      	b.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a676:	4b5c      	ldr	r3, [pc, #368]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a67e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a682:	d106      	bne.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a68a:	d102      	bne.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a68c:	4b59      	ldr	r3, [pc, #356]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a690:	e002      	b.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a692:	2300      	movs	r3, #0
 800a694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a696:	e386      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a698:	e385      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a69a:	4b57      	ldr	r3, [pc, #348]	@ (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a69e:	e382      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6a4:	e37f      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a6a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6aa:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a6ae:	430b      	orrs	r3, r1
 800a6b0:	f040 80a7 	bne.w	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a6b4:	4b4c      	ldr	r3, [pc, #304]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6b8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a6bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a6c4:	d055      	beq.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a6cc:	f200 8096 	bhi.w	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a6d6:	f000 8084 	beq.w	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a6e0:	f200 808c 	bhi.w	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6ea:	d030      	beq.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6f2:	f200 8083 	bhi.w	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d004      	beq.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a702:	d012      	beq.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a704:	e07a      	b.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a706:	4b38      	ldr	r3, [pc, #224]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a70e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a712:	d107      	bne.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a718:	4618      	mov	r0, r3
 800a71a:	f000 fe0b 	bl	800b334 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a722:	e340      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a724:	2300      	movs	r3, #0
 800a726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a728:	e33d      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a72a:	4b2f      	ldr	r3, [pc, #188]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a736:	d107      	bne.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a738:	f107 0318 	add.w	r3, r7, #24
 800a73c:	4618      	mov	r0, r3
 800a73e:	f000 fb51 	bl	800ade4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a746:	e32e      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a74c:	e32b      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a74e:	4b26      	ldr	r3, [pc, #152]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a75a:	d107      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a75c:	f107 030c 	add.w	r3, r7, #12
 800a760:	4618      	mov	r0, r3
 800a762:	f000 fc93 	bl	800b08c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a76a:	e31c      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a76c:	2300      	movs	r3, #0
 800a76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a770:	e319      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a772:	4b1d      	ldr	r3, [pc, #116]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a776:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a77a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a77c:	4b1a      	ldr	r3, [pc, #104]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 0304 	and.w	r3, r3, #4
 800a784:	2b04      	cmp	r3, #4
 800a786:	d10c      	bne.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d109      	bne.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a78e:	4b16      	ldr	r3, [pc, #88]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	08db      	lsrs	r3, r3, #3
 800a794:	f003 0303 	and.w	r3, r3, #3
 800a798:	4a14      	ldr	r2, [pc, #80]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a79a:	fa22 f303 	lsr.w	r3, r2, r3
 800a79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7a0:	e01e      	b.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7a2:	4b11      	ldr	r3, [pc, #68]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7ae:	d106      	bne.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7b6:	d102      	bne.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7b8:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7bc:	e010      	b.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7be:	4b0a      	ldr	r3, [pc, #40]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7ca:	d106      	bne.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a7cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7d2:	d102      	bne.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a7d4:	4b07      	ldr	r3, [pc, #28]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7d8:	e002      	b.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a7de:	e2e2      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7e0:	e2e1      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a7e2:	4b05      	ldr	r3, [pc, #20]	@ (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e6:	e2de      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7e8:	58024400 	.word	0x58024400
 800a7ec:	03d09000 	.word	0x03d09000
 800a7f0:	003d0900 	.word	0x003d0900
 800a7f4:	017d7840 	.word	0x017d7840
 800a7f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a800:	e2d1      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a802:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a806:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a80a:	430b      	orrs	r3, r1
 800a80c:	f040 809c 	bne.w	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a810:	4b93      	ldr	r3, [pc, #588]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a814:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a818:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a820:	d054      	beq.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a824:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a828:	f200 808b 	bhi.w	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a832:	f000 8083 	beq.w	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a838:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a83c:	f200 8081 	bhi.w	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a846:	d02f      	beq.n	800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a84a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a84e:	d878      	bhi.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a852:	2b00      	cmp	r3, #0
 800a854:	d004      	beq.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a85c:	d012      	beq.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a85e:	e070      	b.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a860:	4b7f      	ldr	r3, [pc, #508]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a868:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a86c:	d107      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a86e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a872:	4618      	mov	r0, r3
 800a874:	f000 fd5e 	bl	800b334 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a87c:	e293      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a87e:	2300      	movs	r3, #0
 800a880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a882:	e290      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a884:	4b76      	ldr	r3, [pc, #472]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a88c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a890:	d107      	bne.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a892:	f107 0318 	add.w	r3, r7, #24
 800a896:	4618      	mov	r0, r3
 800a898:	f000 faa4 	bl	800ade4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8a0:	e281      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a6:	e27e      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8a8:	4b6d      	ldr	r3, [pc, #436]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8b4:	d107      	bne.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8b6:	f107 030c 	add.w	r3, r7, #12
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 fbe6 	bl	800b08c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8c4:	e26f      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ca:	e26c      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8cc:	4b64      	ldr	r3, [pc, #400]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8d4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8d6:	4b62      	ldr	r3, [pc, #392]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 0304 	and.w	r3, r3, #4
 800a8de:	2b04      	cmp	r3, #4
 800a8e0:	d10c      	bne.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a8e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d109      	bne.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8e8:	4b5d      	ldr	r3, [pc, #372]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	08db      	lsrs	r3, r3, #3
 800a8ee:	f003 0303 	and.w	r3, r3, #3
 800a8f2:	4a5c      	ldr	r2, [pc, #368]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a8f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8fa:	e01e      	b.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8fc:	4b58      	ldr	r3, [pc, #352]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a908:	d106      	bne.n	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a90a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a90c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a910:	d102      	bne.n	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a912:	4b55      	ldr	r3, [pc, #340]	@ (800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a914:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a916:	e010      	b.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a918:	4b51      	ldr	r3, [pc, #324]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a924:	d106      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a92c:	d102      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a92e:	4b4f      	ldr	r3, [pc, #316]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a930:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a932:	e002      	b.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a938:	e235      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a93a:	e234      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a93c:	4b4c      	ldr	r3, [pc, #304]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a940:	e231      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a942:	2300      	movs	r3, #0
 800a944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a946:	e22e      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a94c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a950:	430b      	orrs	r3, r1
 800a952:	f040 808f 	bne.w	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a956:	4b42      	ldr	r3, [pc, #264]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a95a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a95e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a962:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a966:	d06b      	beq.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a96e:	d874      	bhi.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a972:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a976:	d056      	beq.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a97e:	d86c      	bhi.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a982:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a986:	d03b      	beq.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a98a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a98e:	d864      	bhi.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a992:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a996:	d021      	beq.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a99a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a99e:	d85c      	bhi.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9ac:	d004      	beq.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a9ae:	e054      	b.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a9b0:	f7fe fa4c 	bl	8008e4c <HAL_RCC_GetPCLK1Freq>
 800a9b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9b6:	e1f6      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9b8:	4b29      	ldr	r3, [pc, #164]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9c4:	d107      	bne.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9c6:	f107 0318 	add.w	r3, r7, #24
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 fa0a 	bl	800ade4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9d4:	e1e7      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9da:	e1e4      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9dc:	4b20      	ldr	r3, [pc, #128]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9e8:	d107      	bne.n	800a9fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9ea:	f107 030c 	add.w	r3, r7, #12
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fb4c 	bl	800b08c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9f8:	e1d5      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9fe:	e1d2      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa00:	4b17      	ldr	r3, [pc, #92]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f003 0304 	and.w	r3, r3, #4
 800aa08:	2b04      	cmp	r3, #4
 800aa0a:	d109      	bne.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa0c:	4b14      	ldr	r3, [pc, #80]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	08db      	lsrs	r3, r3, #3
 800aa12:	f003 0303 	and.w	r3, r3, #3
 800aa16:	4a13      	ldr	r2, [pc, #76]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aa18:	fa22 f303 	lsr.w	r3, r2, r3
 800aa1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa1e:	e1c2      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa24:	e1bf      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa26:	4b0e      	ldr	r3, [pc, #56]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa32:	d102      	bne.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800aa34:	4b0c      	ldr	r3, [pc, #48]	@ (800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aa36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa38:	e1b5      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa3e:	e1b2      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa40:	4b07      	ldr	r3, [pc, #28]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa4c:	d102      	bne.n	800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800aa4e:	4b07      	ldr	r3, [pc, #28]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aa50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa52:	e1a8      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa54:	2300      	movs	r3, #0
 800aa56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa58:	e1a5      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa5e:	e1a2      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa60:	58024400 	.word	0x58024400
 800aa64:	03d09000 	.word	0x03d09000
 800aa68:	003d0900 	.word	0x003d0900
 800aa6c:	017d7840 	.word	0x017d7840
 800aa70:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aa74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa78:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800aa7c:	430b      	orrs	r3, r1
 800aa7e:	d173      	bne.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aa80:	4b9c      	ldr	r3, [pc, #624]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aa88:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa90:	d02f      	beq.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aa92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa98:	d863      	bhi.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800aa9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d004      	beq.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aaa6:	d012      	beq.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800aaa8:	e05b      	b.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aaaa:	4b92      	ldr	r3, [pc, #584]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aab2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aab6:	d107      	bne.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aab8:	f107 0318 	add.w	r3, r7, #24
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 f991 	bl	800ade4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aac6:	e16e      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aacc:	e16b      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aace:	4b89      	ldr	r3, [pc, #548]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aad6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aada:	d107      	bne.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aadc:	f107 030c 	add.w	r3, r7, #12
 800aae0:	4618      	mov	r0, r3
 800aae2:	f000 fad3 	bl	800b08c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaea:	e15c      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaf0:	e159      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aaf2:	4b80      	ldr	r3, [pc, #512]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aaf6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aafa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aafc:	4b7d      	ldr	r3, [pc, #500]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0304 	and.w	r3, r3, #4
 800ab04:	2b04      	cmp	r3, #4
 800ab06:	d10c      	bne.n	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ab08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d109      	bne.n	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab0e:	4b79      	ldr	r3, [pc, #484]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	08db      	lsrs	r3, r3, #3
 800ab14:	f003 0303 	and.w	r3, r3, #3
 800ab18:	4a77      	ldr	r2, [pc, #476]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ab1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab20:	e01e      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab22:	4b74      	ldr	r3, [pc, #464]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab2e:	d106      	bne.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ab30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab36:	d102      	bne.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab38:	4b70      	ldr	r3, [pc, #448]	@ (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ab3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab3c:	e010      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab3e:	4b6d      	ldr	r3, [pc, #436]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab4a:	d106      	bne.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ab4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab52:	d102      	bne.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab54:	4b6a      	ldr	r3, [pc, #424]	@ (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ab56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab58:	e002      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab5e:	e122      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab60:	e121      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab62:	2300      	movs	r3, #0
 800ab64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab66:	e11e      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ab68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab6c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ab70:	430b      	orrs	r3, r1
 800ab72:	d133      	bne.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ab74:	4b5f      	ldr	r3, [pc, #380]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab7c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d004      	beq.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ab84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab8a:	d012      	beq.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ab8c:	e023      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab8e:	4b59      	ldr	r3, [pc, #356]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab9a:	d107      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 fbc7 	bl	800b334 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abaa:	e0fc      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb0:	e0f9      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abb2:	4b50      	ldr	r3, [pc, #320]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abbe:	d107      	bne.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abc0:	f107 0318 	add.w	r3, r7, #24
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 f90d 	bl	800ade4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800abca:	6a3b      	ldr	r3, [r7, #32]
 800abcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abce:	e0ea      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd4:	e0e7      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abda:	e0e4      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800abdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abe0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800abe4:	430b      	orrs	r3, r1
 800abe6:	f040 808d 	bne.w	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800abea:	4b42      	ldr	r3, [pc, #264]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800abf2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800abf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abfa:	d06b      	beq.n	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800abfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac02:	d874      	bhi.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac0a:	d056      	beq.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ac0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac12:	d86c      	bhi.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac1a:	d03b      	beq.n	800ac94 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac22:	d864      	bhi.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac2a:	d021      	beq.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ac2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac32:	d85c      	bhi.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d004      	beq.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ac3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac40:	d004      	beq.n	800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ac42:	e054      	b.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ac44:	f000 f8b8 	bl	800adb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac48:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac4a:	e0ac      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac4c:	4b29      	ldr	r3, [pc, #164]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac58:	d107      	bne.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac5a:	f107 0318 	add.w	r3, r7, #24
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 f8c0 	bl	800ade4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac68:	e09d      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac6e:	e09a      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac70:	4b20      	ldr	r3, [pc, #128]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac7c:	d107      	bne.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac7e:	f107 030c 	add.w	r3, r7, #12
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 fa02 	bl	800b08c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac8c:	e08b      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac92:	e088      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac94:	4b17      	ldr	r3, [pc, #92]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 0304 	and.w	r3, r3, #4
 800ac9c:	2b04      	cmp	r3, #4
 800ac9e:	d109      	bne.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aca0:	4b14      	ldr	r3, [pc, #80]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	08db      	lsrs	r3, r3, #3
 800aca6:	f003 0303 	and.w	r3, r3, #3
 800acaa:	4a13      	ldr	r2, [pc, #76]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800acac:	fa22 f303 	lsr.w	r3, r2, r3
 800acb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acb2:	e078      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acb8:	e075      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800acba:	4b0e      	ldr	r3, [pc, #56]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acc6:	d102      	bne.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800acc8:	4b0c      	ldr	r3, [pc, #48]	@ (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800acca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800accc:	e06b      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acce:	2300      	movs	r3, #0
 800acd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acd2:	e068      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800acd4:	4b07      	ldr	r3, [pc, #28]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ace0:	d102      	bne.n	800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ace2:	4b07      	ldr	r3, [pc, #28]	@ (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ace4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ace6:	e05e      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ace8:	2300      	movs	r3, #0
 800acea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acec:	e05b      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acf2:	e058      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800acf4:	58024400 	.word	0x58024400
 800acf8:	03d09000 	.word	0x03d09000
 800acfc:	003d0900 	.word	0x003d0900
 800ad00:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ad04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad08:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ad0c:	430b      	orrs	r3, r1
 800ad0e:	d148      	bne.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ad10:	4b27      	ldr	r3, [pc, #156]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad20:	d02a      	beq.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ad22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad28:	d838      	bhi.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ad2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d004      	beq.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ad30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad36:	d00d      	beq.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ad38:	e030      	b.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad3a:	4b1d      	ldr	r3, [pc, #116]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad46:	d102      	bne.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ad48:	4b1a      	ldr	r3, [pc, #104]	@ (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ad4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad4c:	e02b      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad52:	e028      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad54:	4b16      	ldr	r3, [pc, #88]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad60:	d107      	bne.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 fae4 	bl	800b334 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad70:	e019      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad72:	2300      	movs	r3, #0
 800ad74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad76:	e016      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad78:	4b0d      	ldr	r3, [pc, #52]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad84:	d107      	bne.n	800ad96 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad86:	f107 0318 	add.w	r3, r7, #24
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 f82a 	bl	800ade4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad94:	e007      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad96:	2300      	movs	r3, #0
 800ad98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad9a:	e004      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ada0:	e001      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ada6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3740      	adds	r7, #64	@ 0x40
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	58024400 	.word	0x58024400
 800adb4:	017d7840 	.word	0x017d7840

0800adb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800adbc:	f7fe f816 	bl	8008dec <HAL_RCC_GetHCLKFreq>
 800adc0:	4602      	mov	r2, r0
 800adc2:	4b06      	ldr	r3, [pc, #24]	@ (800addc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	091b      	lsrs	r3, r3, #4
 800adc8:	f003 0307 	and.w	r3, r3, #7
 800adcc:	4904      	ldr	r1, [pc, #16]	@ (800ade0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800adce:	5ccb      	ldrb	r3, [r1, r3]
 800add0:	f003 031f 	and.w	r3, r3, #31
 800add4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800add8:	4618      	mov	r0, r3
 800adda:	bd80      	pop	{r7, pc}
 800addc:	58024400 	.word	0x58024400
 800ade0:	0800f0c0 	.word	0x0800f0c0

0800ade4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b089      	sub	sp, #36	@ 0x24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adec:	4ba1      	ldr	r3, [pc, #644]	@ (800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf0:	f003 0303 	and.w	r3, r3, #3
 800adf4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800adf6:	4b9f      	ldr	r3, [pc, #636]	@ (800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adfa:	0b1b      	lsrs	r3, r3, #12
 800adfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ae02:	4b9c      	ldr	r3, [pc, #624]	@ (800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae06:	091b      	lsrs	r3, r3, #4
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ae0e:	4b99      	ldr	r3, [pc, #612]	@ (800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae12:	08db      	lsrs	r3, r3, #3
 800ae14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	fb02 f303 	mul.w	r3, r2, r3
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f000 8111 	beq.w	800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	f000 8083 	beq.w	800af40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	f200 80a1 	bhi.w	800af84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d003      	beq.n	800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d056      	beq.n	800aefc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ae4e:	e099      	b.n	800af84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae50:	4b88      	ldr	r3, [pc, #544]	@ (800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 0320 	and.w	r3, r3, #32
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d02d      	beq.n	800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae5c:	4b85      	ldr	r3, [pc, #532]	@ (800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	08db      	lsrs	r3, r3, #3
 800ae62:	f003 0303 	and.w	r3, r3, #3
 800ae66:	4a84      	ldr	r2, [pc, #528]	@ (800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ae68:	fa22 f303 	lsr.w	r3, r2, r3
 800ae6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	ee07 3a90 	vmov	s15, r3
 800ae74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae86:	4b7b      	ldr	r3, [pc, #492]	@ (800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae8e:	ee07 3a90 	vmov	s15, r3
 800ae92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aeb6:	e087      	b.n	800afc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	ee07 3a90 	vmov	s15, r3
 800aebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b080 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeca:	4b6a      	ldr	r3, [pc, #424]	@ (800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aed2:	ee07 3a90 	vmov	s15, r3
 800aed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeda:	ed97 6a03 	vldr	s12, [r7, #12]
 800aede:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aefa:	e065      	b.n	800afc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	ee07 3a90 	vmov	s15, r3
 800af02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af0e:	4b59      	ldr	r3, [pc, #356]	@ (800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af16:	ee07 3a90 	vmov	s15, r3
 800af1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af3e:	e043      	b.n	800afc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	ee07 3a90 	vmov	s15, r3
 800af46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b088 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800af4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af52:	4b48      	ldr	r3, [pc, #288]	@ (800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af62:	ed97 6a03 	vldr	s12, [r7, #12]
 800af66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af82:	e021      	b.n	800afc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	ee07 3a90 	vmov	s15, r3
 800af8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af96:	4b37      	ldr	r3, [pc, #220]	@ (800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af9e:	ee07 3a90 	vmov	s15, r3
 800afa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afaa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afc6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800afc8:	4b2a      	ldr	r3, [pc, #168]	@ (800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afcc:	0a5b      	lsrs	r3, r3, #9
 800afce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afd2:	ee07 3a90 	vmov	s15, r3
 800afd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afe2:	edd7 6a07 	vldr	s13, [r7, #28]
 800afe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afee:	ee17 2a90 	vmov	r2, s15
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aff6:	4b1f      	ldr	r3, [pc, #124]	@ (800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800affa:	0c1b      	lsrs	r3, r3, #16
 800affc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b000:	ee07 3a90 	vmov	s15, r3
 800b004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b008:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b00c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b010:	edd7 6a07 	vldr	s13, [r7, #28]
 800b014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b01c:	ee17 2a90 	vmov	r2, s15
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b024:	4b13      	ldr	r3, [pc, #76]	@ (800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b028:	0e1b      	lsrs	r3, r3, #24
 800b02a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b02e:	ee07 3a90 	vmov	s15, r3
 800b032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b036:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b03a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b03e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b04a:	ee17 2a90 	vmov	r2, s15
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b052:	e008      	b.n	800b066 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	609a      	str	r2, [r3, #8]
}
 800b066:	bf00      	nop
 800b068:	3724      	adds	r7, #36	@ 0x24
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	58024400 	.word	0x58024400
 800b078:	03d09000 	.word	0x03d09000
 800b07c:	46000000 	.word	0x46000000
 800b080:	4c742400 	.word	0x4c742400
 800b084:	4a742400 	.word	0x4a742400
 800b088:	4bbebc20 	.word	0x4bbebc20

0800b08c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b089      	sub	sp, #36	@ 0x24
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b094:	4ba1      	ldr	r3, [pc, #644]	@ (800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b098:	f003 0303 	and.w	r3, r3, #3
 800b09c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b09e:	4b9f      	ldr	r3, [pc, #636]	@ (800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0a2:	0d1b      	lsrs	r3, r3, #20
 800b0a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b0aa:	4b9c      	ldr	r3, [pc, #624]	@ (800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ae:	0a1b      	lsrs	r3, r3, #8
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b0b6:	4b99      	ldr	r3, [pc, #612]	@ (800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0ba:	08db      	lsrs	r3, r3, #3
 800b0bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	fb02 f303 	mul.w	r3, r2, r3
 800b0c6:	ee07 3a90 	vmov	s15, r3
 800b0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f000 8111 	beq.w	800b2fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	f000 8083 	beq.w	800b1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	f200 80a1 	bhi.w	800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d003      	beq.n	800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d056      	beq.n	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b0f6:	e099      	b.n	800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0f8:	4b88      	ldr	r3, [pc, #544]	@ (800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f003 0320 	and.w	r3, r3, #32
 800b100:	2b00      	cmp	r3, #0
 800b102:	d02d      	beq.n	800b160 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b104:	4b85      	ldr	r3, [pc, #532]	@ (800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	08db      	lsrs	r3, r3, #3
 800b10a:	f003 0303 	and.w	r3, r3, #3
 800b10e:	4a84      	ldr	r2, [pc, #528]	@ (800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b110:	fa22 f303 	lsr.w	r3, r2, r3
 800b114:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	ee07 3a90 	vmov	s15, r3
 800b11c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	ee07 3a90 	vmov	s15, r3
 800b126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b12e:	4b7b      	ldr	r3, [pc, #492]	@ (800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b136:	ee07 3a90 	vmov	s15, r3
 800b13a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b13e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b142:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b14a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b14e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b15a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b15e:	e087      	b.n	800b270 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	ee07 3a90 	vmov	s15, r3
 800b166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b16a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b328 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b16e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b172:	4b6a      	ldr	r3, [pc, #424]	@ (800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b17a:	ee07 3a90 	vmov	s15, r3
 800b17e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b182:	ed97 6a03 	vldr	s12, [r7, #12]
 800b186:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b18a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b18e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b19a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b19e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1a2:	e065      	b.n	800b270 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	ee07 3a90 	vmov	s15, r3
 800b1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b1b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1b6:	4b59      	ldr	r3, [pc, #356]	@ (800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1be:	ee07 3a90 	vmov	s15, r3
 800b1c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1e6:	e043      	b.n	800b270 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	ee07 3a90 	vmov	s15, r3
 800b1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b330 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b1f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1fa:	4b48      	ldr	r3, [pc, #288]	@ (800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b202:	ee07 3a90 	vmov	s15, r3
 800b206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b20a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b20e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b21a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b21e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b222:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b22a:	e021      	b.n	800b270 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	ee07 3a90 	vmov	s15, r3
 800b232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b236:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b23a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b23e:	4b37      	ldr	r3, [pc, #220]	@ (800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b246:	ee07 3a90 	vmov	s15, r3
 800b24a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b24e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b252:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b25a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b25e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b26a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b26e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b270:	4b2a      	ldr	r3, [pc, #168]	@ (800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b274:	0a5b      	lsrs	r3, r3, #9
 800b276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b27a:	ee07 3a90 	vmov	s15, r3
 800b27e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b282:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b286:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b28a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b28e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b296:	ee17 2a90 	vmov	r2, s15
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b29e:	4b1f      	ldr	r3, [pc, #124]	@ (800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2a2:	0c1b      	lsrs	r3, r3, #16
 800b2a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2a8:	ee07 3a90 	vmov	s15, r3
 800b2ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2c4:	ee17 2a90 	vmov	r2, s15
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b2cc:	4b13      	ldr	r3, [pc, #76]	@ (800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2d0:	0e1b      	lsrs	r3, r3, #24
 800b2d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2d6:	ee07 3a90 	vmov	s15, r3
 800b2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2f2:	ee17 2a90 	vmov	r2, s15
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b2fa:	e008      	b.n	800b30e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	609a      	str	r2, [r3, #8]
}
 800b30e:	bf00      	nop
 800b310:	3724      	adds	r7, #36	@ 0x24
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	58024400 	.word	0x58024400
 800b320:	03d09000 	.word	0x03d09000
 800b324:	46000000 	.word	0x46000000
 800b328:	4c742400 	.word	0x4c742400
 800b32c:	4a742400 	.word	0x4a742400
 800b330:	4bbebc20 	.word	0x4bbebc20

0800b334 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b334:	b480      	push	{r7}
 800b336:	b089      	sub	sp, #36	@ 0x24
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b33c:	4ba0      	ldr	r3, [pc, #640]	@ (800b5c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b33e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b340:	f003 0303 	and.w	r3, r3, #3
 800b344:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b346:	4b9e      	ldr	r3, [pc, #632]	@ (800b5c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b34a:	091b      	lsrs	r3, r3, #4
 800b34c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b350:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b352:	4b9b      	ldr	r3, [pc, #620]	@ (800b5c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b356:	f003 0301 	and.w	r3, r3, #1
 800b35a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b35c:	4b98      	ldr	r3, [pc, #608]	@ (800b5c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b35e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b360:	08db      	lsrs	r3, r3, #3
 800b362:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	fb02 f303 	mul.w	r3, r2, r3
 800b36c:	ee07 3a90 	vmov	s15, r3
 800b370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b374:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f000 8111 	beq.w	800b5a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	2b02      	cmp	r3, #2
 800b384:	f000 8083 	beq.w	800b48e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	f200 80a1 	bhi.w	800b4d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d056      	beq.n	800b44a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b39c:	e099      	b.n	800b4d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b39e:	4b88      	ldr	r3, [pc, #544]	@ (800b5c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f003 0320 	and.w	r3, r3, #32
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d02d      	beq.n	800b406 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3aa:	4b85      	ldr	r3, [pc, #532]	@ (800b5c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	08db      	lsrs	r3, r3, #3
 800b3b0:	f003 0303 	and.w	r3, r3, #3
 800b3b4:	4a83      	ldr	r2, [pc, #524]	@ (800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b3b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	ee07 3a90 	vmov	s15, r3
 800b3cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3d4:	4b7a      	ldr	r3, [pc, #488]	@ (800b5c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3dc:	ee07 3a90 	vmov	s15, r3
 800b3e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3e8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b400:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b404:	e087      	b.n	800b516 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	ee07 3a90 	vmov	s15, r3
 800b40c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b410:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b5cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b418:	4b69      	ldr	r3, [pc, #420]	@ (800b5c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b41a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b41c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b420:	ee07 3a90 	vmov	s15, r3
 800b424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b428:	ed97 6a03 	vldr	s12, [r7, #12]
 800b42c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b438:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b43c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b440:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b444:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b448:	e065      	b.n	800b516 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	ee07 3a90 	vmov	s15, r3
 800b450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b454:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b45c:	4b58      	ldr	r3, [pc, #352]	@ (800b5c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b45e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b464:	ee07 3a90 	vmov	s15, r3
 800b468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b46c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b470:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b47c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b484:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b488:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b48c:	e043      	b.n	800b516 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	ee07 3a90 	vmov	s15, r3
 800b494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b498:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b5d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b49c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4a0:	4b47      	ldr	r3, [pc, #284]	@ (800b5c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4a8:	ee07 3a90 	vmov	s15, r3
 800b4ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4b4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4d0:	e021      	b.n	800b516 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	ee07 3a90 	vmov	s15, r3
 800b4d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4dc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b5cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b4e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4e4:	4b36      	ldr	r3, [pc, #216]	@ (800b5c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ec:	ee07 3a90 	vmov	s15, r3
 800b4f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4f8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b504:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b50c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b510:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b514:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b516:	4b2a      	ldr	r3, [pc, #168]	@ (800b5c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b51a:	0a5b      	lsrs	r3, r3, #9
 800b51c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b520:	ee07 3a90 	vmov	s15, r3
 800b524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b528:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b52c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b530:	edd7 6a07 	vldr	s13, [r7, #28]
 800b534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b53c:	ee17 2a90 	vmov	r2, s15
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b544:	4b1e      	ldr	r3, [pc, #120]	@ (800b5c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b548:	0c1b      	lsrs	r3, r3, #16
 800b54a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b54e:	ee07 3a90 	vmov	s15, r3
 800b552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b556:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b55a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b55e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b56a:	ee17 2a90 	vmov	r2, s15
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b572:	4b13      	ldr	r3, [pc, #76]	@ (800b5c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b576:	0e1b      	lsrs	r3, r3, #24
 800b578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b57c:	ee07 3a90 	vmov	s15, r3
 800b580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b584:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b588:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b58c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b598:	ee17 2a90 	vmov	r2, s15
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b5a0:	e008      	b.n	800b5b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	609a      	str	r2, [r3, #8]
}
 800b5b4:	bf00      	nop
 800b5b6:	3724      	adds	r7, #36	@ 0x24
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	58024400 	.word	0x58024400
 800b5c4:	03d09000 	.word	0x03d09000
 800b5c8:	46000000 	.word	0x46000000
 800b5cc:	4c742400 	.word	0x4c742400
 800b5d0:	4a742400 	.word	0x4a742400
 800b5d4:	4bbebc20 	.word	0x4bbebc20

0800b5d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b5e6:	4b53      	ldr	r3, [pc, #332]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b5e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ea:	f003 0303 	and.w	r3, r3, #3
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	d101      	bne.n	800b5f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e099      	b.n	800b72a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b5f6:	4b4f      	ldr	r3, [pc, #316]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a4e      	ldr	r2, [pc, #312]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b5fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b600:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b602:	f7f8 f941 	bl	8003888 <HAL_GetTick>
 800b606:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b608:	e008      	b.n	800b61c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b60a:	f7f8 f93d 	bl	8003888 <HAL_GetTick>
 800b60e:	4602      	mov	r2, r0
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	2b02      	cmp	r3, #2
 800b616:	d901      	bls.n	800b61c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b618:	2303      	movs	r3, #3
 800b61a:	e086      	b.n	800b72a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b61c:	4b45      	ldr	r3, [pc, #276]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1f0      	bne.n	800b60a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b628:	4b42      	ldr	r3, [pc, #264]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b62c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	031b      	lsls	r3, r3, #12
 800b636:	493f      	ldr	r1, [pc, #252]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b638:	4313      	orrs	r3, r2
 800b63a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	3b01      	subs	r3, #1
 800b642:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	3b01      	subs	r3, #1
 800b64c:	025b      	lsls	r3, r3, #9
 800b64e:	b29b      	uxth	r3, r3
 800b650:	431a      	orrs	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	3b01      	subs	r3, #1
 800b658:	041b      	lsls	r3, r3, #16
 800b65a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b65e:	431a      	orrs	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	3b01      	subs	r3, #1
 800b666:	061b      	lsls	r3, r3, #24
 800b668:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b66c:	4931      	ldr	r1, [pc, #196]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b66e:	4313      	orrs	r3, r2
 800b670:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b672:	4b30      	ldr	r3, [pc, #192]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b676:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	695b      	ldr	r3, [r3, #20]
 800b67e:	492d      	ldr	r1, [pc, #180]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b680:	4313      	orrs	r3, r2
 800b682:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b684:	4b2b      	ldr	r3, [pc, #172]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b688:	f023 0220 	bic.w	r2, r3, #32
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	699b      	ldr	r3, [r3, #24]
 800b690:	4928      	ldr	r1, [pc, #160]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b692:	4313      	orrs	r3, r2
 800b694:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b696:	4b27      	ldr	r3, [pc, #156]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b69a:	4a26      	ldr	r2, [pc, #152]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b69c:	f023 0310 	bic.w	r3, r3, #16
 800b6a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b6a2:	4b24      	ldr	r3, [pc, #144]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b6a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6a6:	4b24      	ldr	r3, [pc, #144]	@ (800b738 <RCCEx_PLL2_Config+0x160>)
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	69d2      	ldr	r2, [r2, #28]
 800b6ae:	00d2      	lsls	r2, r2, #3
 800b6b0:	4920      	ldr	r1, [pc, #128]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b6b6:	4b1f      	ldr	r3, [pc, #124]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b6bc:	f043 0310 	orr.w	r3, r3, #16
 800b6c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d106      	bne.n	800b6d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b6c8:	4b1a      	ldr	r3, [pc, #104]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b6ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6cc:	4a19      	ldr	r2, [pc, #100]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b6ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b6d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6d4:	e00f      	b.n	800b6f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d106      	bne.n	800b6ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b6dc:	4b15      	ldr	r3, [pc, #84]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b6de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6e0:	4a14      	ldr	r2, [pc, #80]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b6e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6e8:	e005      	b.n	800b6f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b6ea:	4b12      	ldr	r3, [pc, #72]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ee:	4a11      	ldr	r2, [pc, #68]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b6f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b6f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b6f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a0e      	ldr	r2, [pc, #56]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b6fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b702:	f7f8 f8c1 	bl	8003888 <HAL_GetTick>
 800b706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b708:	e008      	b.n	800b71c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b70a:	f7f8 f8bd 	bl	8003888 <HAL_GetTick>
 800b70e:	4602      	mov	r2, r0
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	1ad3      	subs	r3, r2, r3
 800b714:	2b02      	cmp	r3, #2
 800b716:	d901      	bls.n	800b71c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b718:	2303      	movs	r3, #3
 800b71a:	e006      	b.n	800b72a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b71c:	4b05      	ldr	r3, [pc, #20]	@ (800b734 <RCCEx_PLL2_Config+0x15c>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b724:	2b00      	cmp	r3, #0
 800b726:	d0f0      	beq.n	800b70a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b728:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	58024400 	.word	0x58024400
 800b738:	ffff0007 	.word	0xffff0007

0800b73c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b746:	2300      	movs	r3, #0
 800b748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b74a:	4b53      	ldr	r3, [pc, #332]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b74c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b74e:	f003 0303 	and.w	r3, r3, #3
 800b752:	2b03      	cmp	r3, #3
 800b754:	d101      	bne.n	800b75a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b756:	2301      	movs	r3, #1
 800b758:	e099      	b.n	800b88e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b75a:	4b4f      	ldr	r3, [pc, #316]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a4e      	ldr	r2, [pc, #312]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b760:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b764:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b766:	f7f8 f88f 	bl	8003888 <HAL_GetTick>
 800b76a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b76c:	e008      	b.n	800b780 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b76e:	f7f8 f88b 	bl	8003888 <HAL_GetTick>
 800b772:	4602      	mov	r2, r0
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	1ad3      	subs	r3, r2, r3
 800b778:	2b02      	cmp	r3, #2
 800b77a:	d901      	bls.n	800b780 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b77c:	2303      	movs	r3, #3
 800b77e:	e086      	b.n	800b88e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b780:	4b45      	ldr	r3, [pc, #276]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1f0      	bne.n	800b76e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b78c:	4b42      	ldr	r3, [pc, #264]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b78e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b790:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	051b      	lsls	r3, r3, #20
 800b79a:	493f      	ldr	r1, [pc, #252]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b79c:	4313      	orrs	r3, r2
 800b79e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	025b      	lsls	r3, r3, #9
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	431a      	orrs	r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	041b      	lsls	r3, r3, #16
 800b7be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b7c2:	431a      	orrs	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	691b      	ldr	r3, [r3, #16]
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	061b      	lsls	r3, r3, #24
 800b7cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b7d0:	4931      	ldr	r1, [pc, #196]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b7d6:	4b30      	ldr	r3, [pc, #192]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b7d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	492d      	ldr	r1, [pc, #180]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b7e8:	4b2b      	ldr	r3, [pc, #172]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b7ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	699b      	ldr	r3, [r3, #24]
 800b7f4:	4928      	ldr	r1, [pc, #160]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b7fa:	4b27      	ldr	r3, [pc, #156]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7fe:	4a26      	ldr	r2, [pc, #152]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b804:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b806:	4b24      	ldr	r3, [pc, #144]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b808:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b80a:	4b24      	ldr	r3, [pc, #144]	@ (800b89c <RCCEx_PLL3_Config+0x160>)
 800b80c:	4013      	ands	r3, r2
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	69d2      	ldr	r2, [r2, #28]
 800b812:	00d2      	lsls	r2, r2, #3
 800b814:	4920      	ldr	r1, [pc, #128]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b816:	4313      	orrs	r3, r2
 800b818:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b81a:	4b1f      	ldr	r3, [pc, #124]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b81c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b81e:	4a1e      	ldr	r2, [pc, #120]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b824:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d106      	bne.n	800b83a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b82c:	4b1a      	ldr	r3, [pc, #104]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b82e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b830:	4a19      	ldr	r2, [pc, #100]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b832:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b836:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b838:	e00f      	b.n	800b85a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d106      	bne.n	800b84e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b840:	4b15      	ldr	r3, [pc, #84]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b844:	4a14      	ldr	r2, [pc, #80]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b846:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b84a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b84c:	e005      	b.n	800b85a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b84e:	4b12      	ldr	r3, [pc, #72]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b852:	4a11      	ldr	r2, [pc, #68]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b854:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b858:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b85a:	4b0f      	ldr	r3, [pc, #60]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a0e      	ldr	r2, [pc, #56]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b866:	f7f8 f80f 	bl	8003888 <HAL_GetTick>
 800b86a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b86c:	e008      	b.n	800b880 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b86e:	f7f8 f80b 	bl	8003888 <HAL_GetTick>
 800b872:	4602      	mov	r2, r0
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d901      	bls.n	800b880 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b87c:	2303      	movs	r3, #3
 800b87e:	e006      	b.n	800b88e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b880:	4b05      	ldr	r3, [pc, #20]	@ (800b898 <RCCEx_PLL3_Config+0x15c>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d0f0      	beq.n	800b86e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	58024400 	.word	0x58024400
 800b89c:	ffff0007 	.word	0xffff0007

0800b8a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d101      	bne.n	800b8b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e049      	b.n	800b946 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d106      	bne.n	800b8cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7f7 fbfa 	bl	80030c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	3304      	adds	r3, #4
 800b8dc:	4619      	mov	r1, r3
 800b8de:	4610      	mov	r0, r2
 800b8e0:	f000 fed0 	bl	800c684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2201      	movs	r2, #1
 800b908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2201      	movs	r2, #1
 800b918:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2201      	movs	r2, #1
 800b928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2201      	movs	r2, #1
 800b938:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2201      	movs	r2, #1
 800b940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
	...

0800b950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	2b01      	cmp	r3, #1
 800b962:	d001      	beq.n	800b968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	e054      	b.n	800ba12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2202      	movs	r2, #2
 800b96c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68da      	ldr	r2, [r3, #12]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f042 0201 	orr.w	r2, r2, #1
 800b97e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a26      	ldr	r2, [pc, #152]	@ (800ba20 <HAL_TIM_Base_Start_IT+0xd0>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d022      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0x80>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b992:	d01d      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0x80>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a22      	ldr	r2, [pc, #136]	@ (800ba24 <HAL_TIM_Base_Start_IT+0xd4>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d018      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0x80>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a21      	ldr	r2, [pc, #132]	@ (800ba28 <HAL_TIM_Base_Start_IT+0xd8>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d013      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0x80>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a1f      	ldr	r2, [pc, #124]	@ (800ba2c <HAL_TIM_Base_Start_IT+0xdc>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d00e      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0x80>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a1e      	ldr	r2, [pc, #120]	@ (800ba30 <HAL_TIM_Base_Start_IT+0xe0>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d009      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0x80>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a1c      	ldr	r2, [pc, #112]	@ (800ba34 <HAL_TIM_Base_Start_IT+0xe4>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d004      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0x80>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a1b      	ldr	r2, [pc, #108]	@ (800ba38 <HAL_TIM_Base_Start_IT+0xe8>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d115      	bne.n	800b9fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	689a      	ldr	r2, [r3, #8]
 800b9d6:	4b19      	ldr	r3, [pc, #100]	@ (800ba3c <HAL_TIM_Base_Start_IT+0xec>)
 800b9d8:	4013      	ands	r3, r2
 800b9da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2b06      	cmp	r3, #6
 800b9e0:	d015      	beq.n	800ba0e <HAL_TIM_Base_Start_IT+0xbe>
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9e8:	d011      	beq.n	800ba0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f042 0201 	orr.w	r2, r2, #1
 800b9f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9fa:	e008      	b.n	800ba0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f042 0201 	orr.w	r2, r2, #1
 800ba0a:	601a      	str	r2, [r3, #0]
 800ba0c:	e000      	b.n	800ba10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	40010000 	.word	0x40010000
 800ba24:	40000400 	.word	0x40000400
 800ba28:	40000800 	.word	0x40000800
 800ba2c:	40000c00 	.word	0x40000c00
 800ba30:	40010400 	.word	0x40010400
 800ba34:	40001800 	.word	0x40001800
 800ba38:	40014000 	.word	0x40014000
 800ba3c:	00010007 	.word	0x00010007

0800ba40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d101      	bne.n	800ba52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e049      	b.n	800bae6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d106      	bne.n	800ba6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f841 	bl	800baee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2202      	movs	r2, #2
 800ba70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4610      	mov	r0, r2
 800ba80:	f000 fe00 	bl	800c684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2201      	movs	r2, #1
 800bab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800baee:	b480      	push	{r7}
 800baf0:	b083      	sub	sp, #12
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800baf6:	bf00      	nop
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
	...

0800bb04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d109      	bne.n	800bb28 <HAL_TIM_PWM_Start+0x24>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	bf14      	ite	ne
 800bb20:	2301      	movne	r3, #1
 800bb22:	2300      	moveq	r3, #0
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	e03c      	b.n	800bba2 <HAL_TIM_PWM_Start+0x9e>
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	2b04      	cmp	r3, #4
 800bb2c:	d109      	bne.n	800bb42 <HAL_TIM_PWM_Start+0x3e>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	bf14      	ite	ne
 800bb3a:	2301      	movne	r3, #1
 800bb3c:	2300      	moveq	r3, #0
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	e02f      	b.n	800bba2 <HAL_TIM_PWM_Start+0x9e>
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2b08      	cmp	r3, #8
 800bb46:	d109      	bne.n	800bb5c <HAL_TIM_PWM_Start+0x58>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	bf14      	ite	ne
 800bb54:	2301      	movne	r3, #1
 800bb56:	2300      	moveq	r3, #0
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	e022      	b.n	800bba2 <HAL_TIM_PWM_Start+0x9e>
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	2b0c      	cmp	r3, #12
 800bb60:	d109      	bne.n	800bb76 <HAL_TIM_PWM_Start+0x72>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	bf14      	ite	ne
 800bb6e:	2301      	movne	r3, #1
 800bb70:	2300      	moveq	r3, #0
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	e015      	b.n	800bba2 <HAL_TIM_PWM_Start+0x9e>
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	2b10      	cmp	r3, #16
 800bb7a:	d109      	bne.n	800bb90 <HAL_TIM_PWM_Start+0x8c>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	bf14      	ite	ne
 800bb88:	2301      	movne	r3, #1
 800bb8a:	2300      	moveq	r3, #0
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	e008      	b.n	800bba2 <HAL_TIM_PWM_Start+0x9e>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	bf14      	ite	ne
 800bb9c:	2301      	movne	r3, #1
 800bb9e:	2300      	moveq	r3, #0
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d001      	beq.n	800bbaa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e0a1      	b.n	800bcee <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d104      	bne.n	800bbba <HAL_TIM_PWM_Start+0xb6>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2202      	movs	r2, #2
 800bbb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bbb8:	e023      	b.n	800bc02 <HAL_TIM_PWM_Start+0xfe>
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	2b04      	cmp	r3, #4
 800bbbe:	d104      	bne.n	800bbca <HAL_TIM_PWM_Start+0xc6>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bbc8:	e01b      	b.n	800bc02 <HAL_TIM_PWM_Start+0xfe>
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	2b08      	cmp	r3, #8
 800bbce:	d104      	bne.n	800bbda <HAL_TIM_PWM_Start+0xd6>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2202      	movs	r2, #2
 800bbd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bbd8:	e013      	b.n	800bc02 <HAL_TIM_PWM_Start+0xfe>
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	2b0c      	cmp	r3, #12
 800bbde:	d104      	bne.n	800bbea <HAL_TIM_PWM_Start+0xe6>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2202      	movs	r2, #2
 800bbe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bbe8:	e00b      	b.n	800bc02 <HAL_TIM_PWM_Start+0xfe>
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	2b10      	cmp	r3, #16
 800bbee:	d104      	bne.n	800bbfa <HAL_TIM_PWM_Start+0xf6>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bbf8:	e003      	b.n	800bc02 <HAL_TIM_PWM_Start+0xfe>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2202      	movs	r2, #2
 800bbfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2201      	movs	r2, #1
 800bc08:	6839      	ldr	r1, [r7, #0]
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f001 fa38 	bl	800d080 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4a38      	ldr	r2, [pc, #224]	@ (800bcf8 <HAL_TIM_PWM_Start+0x1f4>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d013      	beq.n	800bc42 <HAL_TIM_PWM_Start+0x13e>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a37      	ldr	r2, [pc, #220]	@ (800bcfc <HAL_TIM_PWM_Start+0x1f8>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d00e      	beq.n	800bc42 <HAL_TIM_PWM_Start+0x13e>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a35      	ldr	r2, [pc, #212]	@ (800bd00 <HAL_TIM_PWM_Start+0x1fc>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d009      	beq.n	800bc42 <HAL_TIM_PWM_Start+0x13e>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a34      	ldr	r2, [pc, #208]	@ (800bd04 <HAL_TIM_PWM_Start+0x200>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d004      	beq.n	800bc42 <HAL_TIM_PWM_Start+0x13e>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a32      	ldr	r2, [pc, #200]	@ (800bd08 <HAL_TIM_PWM_Start+0x204>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d101      	bne.n	800bc46 <HAL_TIM_PWM_Start+0x142>
 800bc42:	2301      	movs	r3, #1
 800bc44:	e000      	b.n	800bc48 <HAL_TIM_PWM_Start+0x144>
 800bc46:	2300      	movs	r3, #0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d007      	beq.n	800bc5c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bc5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a25      	ldr	r2, [pc, #148]	@ (800bcf8 <HAL_TIM_PWM_Start+0x1f4>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d022      	beq.n	800bcac <HAL_TIM_PWM_Start+0x1a8>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc6e:	d01d      	beq.n	800bcac <HAL_TIM_PWM_Start+0x1a8>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a25      	ldr	r2, [pc, #148]	@ (800bd0c <HAL_TIM_PWM_Start+0x208>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d018      	beq.n	800bcac <HAL_TIM_PWM_Start+0x1a8>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a24      	ldr	r2, [pc, #144]	@ (800bd10 <HAL_TIM_PWM_Start+0x20c>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d013      	beq.n	800bcac <HAL_TIM_PWM_Start+0x1a8>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a22      	ldr	r2, [pc, #136]	@ (800bd14 <HAL_TIM_PWM_Start+0x210>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d00e      	beq.n	800bcac <HAL_TIM_PWM_Start+0x1a8>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a1a      	ldr	r2, [pc, #104]	@ (800bcfc <HAL_TIM_PWM_Start+0x1f8>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d009      	beq.n	800bcac <HAL_TIM_PWM_Start+0x1a8>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a1e      	ldr	r2, [pc, #120]	@ (800bd18 <HAL_TIM_PWM_Start+0x214>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d004      	beq.n	800bcac <HAL_TIM_PWM_Start+0x1a8>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a16      	ldr	r2, [pc, #88]	@ (800bd00 <HAL_TIM_PWM_Start+0x1fc>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d115      	bne.n	800bcd8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	689a      	ldr	r2, [r3, #8]
 800bcb2:	4b1a      	ldr	r3, [pc, #104]	@ (800bd1c <HAL_TIM_PWM_Start+0x218>)
 800bcb4:	4013      	ands	r3, r2
 800bcb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b06      	cmp	r3, #6
 800bcbc:	d015      	beq.n	800bcea <HAL_TIM_PWM_Start+0x1e6>
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcc4:	d011      	beq.n	800bcea <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f042 0201 	orr.w	r2, r2, #1
 800bcd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcd6:	e008      	b.n	800bcea <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f042 0201 	orr.w	r2, r2, #1
 800bce6:	601a      	str	r2, [r3, #0]
 800bce8:	e000      	b.n	800bcec <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	40010000 	.word	0x40010000
 800bcfc:	40010400 	.word	0x40010400
 800bd00:	40014000 	.word	0x40014000
 800bd04:	40014400 	.word	0x40014400
 800bd08:	40014800 	.word	0x40014800
 800bd0c:	40000400 	.word	0x40000400
 800bd10:	40000800 	.word	0x40000800
 800bd14:	40000c00 	.word	0x40000c00
 800bd18:	40001800 	.word	0x40001800
 800bd1c:	00010007 	.word	0x00010007

0800bd20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b086      	sub	sp, #24
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d101      	bne.n	800bd34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e08f      	b.n	800be54 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d106      	bne.n	800bd4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f7f7 fa3d 	bl	80031c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2202      	movs	r2, #2
 800bd52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	6899      	ldr	r1, [r3, #8]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	4b3e      	ldr	r3, [pc, #248]	@ (800be5c <HAL_TIM_Encoder_Init+0x13c>)
 800bd62:	400b      	ands	r3, r1
 800bd64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	3304      	adds	r3, #4
 800bd6e:	4619      	mov	r1, r3
 800bd70:	4610      	mov	r0, r2
 800bd72:	f000 fc87 	bl	800c684 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	699b      	ldr	r3, [r3, #24]
 800bd84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	6a1b      	ldr	r3, [r3, #32]
 800bd8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	697a      	ldr	r2, [r7, #20]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	4b31      	ldr	r3, [pc, #196]	@ (800be60 <HAL_TIM_Encoder_Init+0x140>)
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	689a      	ldr	r2, [r3, #8]
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	699b      	ldr	r3, [r3, #24]
 800bda8:	021b      	lsls	r3, r3, #8
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	693a      	ldr	r2, [r7, #16]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bdb2:	693a      	ldr	r2, [r7, #16]
 800bdb4:	4b2b      	ldr	r3, [pc, #172]	@ (800be64 <HAL_TIM_Encoder_Init+0x144>)
 800bdb6:	4013      	ands	r3, r2
 800bdb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bdba:	693a      	ldr	r2, [r7, #16]
 800bdbc:	4b2a      	ldr	r3, [pc, #168]	@ (800be68 <HAL_TIM_Encoder_Init+0x148>)
 800bdbe:	4013      	ands	r3, r2
 800bdc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	68da      	ldr	r2, [r3, #12]
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	69db      	ldr	r3, [r3, #28]
 800bdca:	021b      	lsls	r3, r3, #8
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	693a      	ldr	r2, [r7, #16]
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	691b      	ldr	r3, [r3, #16]
 800bdd8:	011a      	lsls	r2, r3, #4
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	6a1b      	ldr	r3, [r3, #32]
 800bdde:	031b      	lsls	r3, r3, #12
 800bde0:	4313      	orrs	r3, r2
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	4313      	orrs	r3, r2
 800bde6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800bdee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800bdf6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	695b      	ldr	r3, [r3, #20]
 800be00:	011b      	lsls	r3, r3, #4
 800be02:	4313      	orrs	r3, r2
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	4313      	orrs	r3, r2
 800be08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	697a      	ldr	r2, [r7, #20]
 800be10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	693a      	ldr	r2, [r7, #16]
 800be18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2201      	movs	r2, #1
 800be26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2201      	movs	r2, #1
 800be3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2201      	movs	r2, #1
 800be4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800be52:	2300      	movs	r3, #0
}
 800be54:	4618      	mov	r0, r3
 800be56:	3718      	adds	r7, #24
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	fffebff8 	.word	0xfffebff8
 800be60:	fffffcfc 	.word	0xfffffcfc
 800be64:	fffff3f3 	.word	0xfffff3f3
 800be68:	ffff0f0f 	.word	0xffff0f0f

0800be6c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800be7c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800be84:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be8c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be94:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d110      	bne.n	800bebe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800be9c:	7bfb      	ldrb	r3, [r7, #15]
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d102      	bne.n	800bea8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bea2:	7b7b      	ldrb	r3, [r7, #13]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d001      	beq.n	800beac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	e069      	b.n	800bf80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2202      	movs	r2, #2
 800beb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2202      	movs	r2, #2
 800beb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bebc:	e031      	b.n	800bf22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	2b04      	cmp	r3, #4
 800bec2:	d110      	bne.n	800bee6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bec4:	7bbb      	ldrb	r3, [r7, #14]
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d102      	bne.n	800bed0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800beca:	7b3b      	ldrb	r3, [r7, #12]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d001      	beq.n	800bed4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bed0:	2301      	movs	r3, #1
 800bed2:	e055      	b.n	800bf80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2202      	movs	r2, #2
 800bed8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2202      	movs	r2, #2
 800bee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bee4:	e01d      	b.n	800bf22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bee6:	7bfb      	ldrb	r3, [r7, #15]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d108      	bne.n	800befe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800beec:	7bbb      	ldrb	r3, [r7, #14]
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d105      	bne.n	800befe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bef2:	7b7b      	ldrb	r3, [r7, #13]
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d102      	bne.n	800befe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bef8:	7b3b      	ldrb	r3, [r7, #12]
 800befa:	2b01      	cmp	r3, #1
 800befc:	d001      	beq.n	800bf02 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800befe:	2301      	movs	r3, #1
 800bf00:	e03e      	b.n	800bf80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2202      	movs	r2, #2
 800bf06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2202      	movs	r2, #2
 800bf0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2202      	movs	r2, #2
 800bf16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2202      	movs	r2, #2
 800bf1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d003      	beq.n	800bf30 <HAL_TIM_Encoder_Start+0xc4>
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	2b04      	cmp	r3, #4
 800bf2c:	d008      	beq.n	800bf40 <HAL_TIM_Encoder_Start+0xd4>
 800bf2e:	e00f      	b.n	800bf50 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2201      	movs	r2, #1
 800bf36:	2100      	movs	r1, #0
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f001 f8a1 	bl	800d080 <TIM_CCxChannelCmd>
      break;
 800bf3e:	e016      	b.n	800bf6e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2201      	movs	r2, #1
 800bf46:	2104      	movs	r1, #4
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f001 f899 	bl	800d080 <TIM_CCxChannelCmd>
      break;
 800bf4e:	e00e      	b.n	800bf6e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2201      	movs	r2, #1
 800bf56:	2100      	movs	r1, #0
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f001 f891 	bl	800d080 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2201      	movs	r2, #1
 800bf64:	2104      	movs	r1, #4
 800bf66:	4618      	mov	r0, r3
 800bf68:	f001 f88a 	bl	800d080 <TIM_CCxChannelCmd>
      break;
 800bf6c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f042 0201 	orr.w	r2, r2, #1
 800bf7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	f003 0302 	and.w	r3, r3, #2
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d020      	beq.n	800bfec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f003 0302 	and.w	r3, r3, #2
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d01b      	beq.n	800bfec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f06f 0202 	mvn.w	r2, #2
 800bfbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	699b      	ldr	r3, [r3, #24]
 800bfca:	f003 0303 	and.w	r3, r3, #3
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d003      	beq.n	800bfda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 fb38 	bl	800c648 <HAL_TIM_IC_CaptureCallback>
 800bfd8:	e005      	b.n	800bfe6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fb2a 	bl	800c634 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 fb3b 	bl	800c65c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	f003 0304 	and.w	r3, r3, #4
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d020      	beq.n	800c038 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f003 0304 	and.w	r3, r3, #4
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d01b      	beq.n	800c038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f06f 0204 	mvn.w	r2, #4
 800c008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2202      	movs	r2, #2
 800c00e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	699b      	ldr	r3, [r3, #24]
 800c016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d003      	beq.n	800c026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fb12 	bl	800c648 <HAL_TIM_IC_CaptureCallback>
 800c024:	e005      	b.n	800c032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fb04 	bl	800c634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 fb15 	bl	800c65c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	f003 0308 	and.w	r3, r3, #8
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d020      	beq.n	800c084 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f003 0308 	and.w	r3, r3, #8
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d01b      	beq.n	800c084 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f06f 0208 	mvn.w	r2, #8
 800c054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2204      	movs	r2, #4
 800c05a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	69db      	ldr	r3, [r3, #28]
 800c062:	f003 0303 	and.w	r3, r3, #3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d003      	beq.n	800c072 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 faec 	bl	800c648 <HAL_TIM_IC_CaptureCallback>
 800c070:	e005      	b.n	800c07e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fade 	bl	800c634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 faef 	bl	800c65c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	f003 0310 	and.w	r3, r3, #16
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d020      	beq.n	800c0d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f003 0310 	and.w	r3, r3, #16
 800c094:	2b00      	cmp	r3, #0
 800c096:	d01b      	beq.n	800c0d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f06f 0210 	mvn.w	r2, #16
 800c0a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2208      	movs	r2, #8
 800c0a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	69db      	ldr	r3, [r3, #28]
 800c0ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d003      	beq.n	800c0be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fac6 	bl	800c648 <HAL_TIM_IC_CaptureCallback>
 800c0bc:	e005      	b.n	800c0ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 fab8 	bl	800c634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fac9 	bl	800c65c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	f003 0301 	and.w	r3, r3, #1
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00c      	beq.n	800c0f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f003 0301 	and.w	r3, r3, #1
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d007      	beq.n	800c0f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f06f 0201 	mvn.w	r2, #1
 800c0ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f7f5 f9da 	bl	80014a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d104      	bne.n	800c108 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00c      	beq.n	800c122 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d007      	beq.n	800c122 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c11a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f001 f9ad 	bl	800d47c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00c      	beq.n	800c146 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c132:	2b00      	cmp	r3, #0
 800c134:	d007      	beq.n	800c146 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c13e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f001 f9a5 	bl	800d490 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00c      	beq.n	800c16a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c156:	2b00      	cmp	r3, #0
 800c158:	d007      	beq.n	800c16a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 fa83 	bl	800c670 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	f003 0320 	and.w	r3, r3, #32
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00c      	beq.n	800c18e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f003 0320 	and.w	r3, r3, #32
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d007      	beq.n	800c18e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f06f 0220 	mvn.w	r2, #32
 800c186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f001 f96d 	bl	800d468 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c18e:	bf00      	nop
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
	...

0800c198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b086      	sub	sp, #24
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d101      	bne.n	800c1b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c1b2:	2302      	movs	r3, #2
 800c1b4:	e0ff      	b.n	800c3b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2b14      	cmp	r3, #20
 800c1c2:	f200 80f0 	bhi.w	800c3a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1cc:	0800c221 	.word	0x0800c221
 800c1d0:	0800c3a7 	.word	0x0800c3a7
 800c1d4:	0800c3a7 	.word	0x0800c3a7
 800c1d8:	0800c3a7 	.word	0x0800c3a7
 800c1dc:	0800c261 	.word	0x0800c261
 800c1e0:	0800c3a7 	.word	0x0800c3a7
 800c1e4:	0800c3a7 	.word	0x0800c3a7
 800c1e8:	0800c3a7 	.word	0x0800c3a7
 800c1ec:	0800c2a3 	.word	0x0800c2a3
 800c1f0:	0800c3a7 	.word	0x0800c3a7
 800c1f4:	0800c3a7 	.word	0x0800c3a7
 800c1f8:	0800c3a7 	.word	0x0800c3a7
 800c1fc:	0800c2e3 	.word	0x0800c2e3
 800c200:	0800c3a7 	.word	0x0800c3a7
 800c204:	0800c3a7 	.word	0x0800c3a7
 800c208:	0800c3a7 	.word	0x0800c3a7
 800c20c:	0800c325 	.word	0x0800c325
 800c210:	0800c3a7 	.word	0x0800c3a7
 800c214:	0800c3a7 	.word	0x0800c3a7
 800c218:	0800c3a7 	.word	0x0800c3a7
 800c21c:	0800c365 	.word	0x0800c365
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68b9      	ldr	r1, [r7, #8]
 800c226:	4618      	mov	r0, r3
 800c228:	f000 facc 	bl	800c7c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	699a      	ldr	r2, [r3, #24]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f042 0208 	orr.w	r2, r2, #8
 800c23a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	699a      	ldr	r2, [r3, #24]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f022 0204 	bic.w	r2, r2, #4
 800c24a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	6999      	ldr	r1, [r3, #24]
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	691a      	ldr	r2, [r3, #16]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	430a      	orrs	r2, r1
 800c25c:	619a      	str	r2, [r3, #24]
      break;
 800c25e:	e0a5      	b.n	800c3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68b9      	ldr	r1, [r7, #8]
 800c266:	4618      	mov	r0, r3
 800c268:	f000 fb3c 	bl	800c8e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	699a      	ldr	r2, [r3, #24]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c27a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	699a      	ldr	r2, [r3, #24]
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c28a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	6999      	ldr	r1, [r3, #24]
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	691b      	ldr	r3, [r3, #16]
 800c296:	021a      	lsls	r2, r3, #8
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	430a      	orrs	r2, r1
 800c29e:	619a      	str	r2, [r3, #24]
      break;
 800c2a0:	e084      	b.n	800c3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	68b9      	ldr	r1, [r7, #8]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f000 fba5 	bl	800c9f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	69da      	ldr	r2, [r3, #28]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f042 0208 	orr.w	r2, r2, #8
 800c2bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	69da      	ldr	r2, [r3, #28]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f022 0204 	bic.w	r2, r2, #4
 800c2cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	69d9      	ldr	r1, [r3, #28]
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	691a      	ldr	r2, [r3, #16]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	430a      	orrs	r2, r1
 800c2de:	61da      	str	r2, [r3, #28]
      break;
 800c2e0:	e064      	b.n	800c3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68b9      	ldr	r1, [r7, #8]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 fc0d 	bl	800cb08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	69da      	ldr	r2, [r3, #28]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c2fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	69da      	ldr	r2, [r3, #28]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c30c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	69d9      	ldr	r1, [r3, #28]
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	021a      	lsls	r2, r3, #8
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	430a      	orrs	r2, r1
 800c320:	61da      	str	r2, [r3, #28]
      break;
 800c322:	e043      	b.n	800c3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	68b9      	ldr	r1, [r7, #8]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f000 fc56 	bl	800cbdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f042 0208 	orr.w	r2, r2, #8
 800c33e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f022 0204 	bic.w	r2, r2, #4
 800c34e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	691a      	ldr	r2, [r3, #16]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	430a      	orrs	r2, r1
 800c360:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c362:	e023      	b.n	800c3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	68b9      	ldr	r1, [r7, #8]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 fc9a 	bl	800cca4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c37e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c38e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	021a      	lsls	r2, r3, #8
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	430a      	orrs	r2, r1
 800c3a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c3a4:	e002      	b.n	800c3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	75fb      	strb	r3, [r7, #23]
      break;
 800c3aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c3b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3718      	adds	r7, #24
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop

0800c3c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d101      	bne.n	800c3dc <HAL_TIM_ConfigClockSource+0x1c>
 800c3d8:	2302      	movs	r3, #2
 800c3da:	e0dc      	b.n	800c596 <HAL_TIM_ConfigClockSource+0x1d6>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c3f4:	68ba      	ldr	r2, [r7, #8]
 800c3f6:	4b6a      	ldr	r3, [pc, #424]	@ (800c5a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c3f8:	4013      	ands	r3, r2
 800c3fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c402:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a64      	ldr	r2, [pc, #400]	@ (800c5a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c412:	4293      	cmp	r3, r2
 800c414:	f000 80a9 	beq.w	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c418:	4a62      	ldr	r2, [pc, #392]	@ (800c5a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	f200 80ae 	bhi.w	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c420:	4a61      	ldr	r2, [pc, #388]	@ (800c5a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c422:	4293      	cmp	r3, r2
 800c424:	f000 80a1 	beq.w	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c428:	4a5f      	ldr	r2, [pc, #380]	@ (800c5a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	f200 80a6 	bhi.w	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c430:	4a5e      	ldr	r2, [pc, #376]	@ (800c5ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800c432:	4293      	cmp	r3, r2
 800c434:	f000 8099 	beq.w	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c438:	4a5c      	ldr	r2, [pc, #368]	@ (800c5ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	f200 809e 	bhi.w	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c440:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c444:	f000 8091 	beq.w	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c448:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c44c:	f200 8096 	bhi.w	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c450:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c454:	f000 8089 	beq.w	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c458:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c45c:	f200 808e 	bhi.w	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c464:	d03e      	beq.n	800c4e4 <HAL_TIM_ConfigClockSource+0x124>
 800c466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c46a:	f200 8087 	bhi.w	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c46e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c472:	f000 8086 	beq.w	800c582 <HAL_TIM_ConfigClockSource+0x1c2>
 800c476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c47a:	d87f      	bhi.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c47c:	2b70      	cmp	r3, #112	@ 0x70
 800c47e:	d01a      	beq.n	800c4b6 <HAL_TIM_ConfigClockSource+0xf6>
 800c480:	2b70      	cmp	r3, #112	@ 0x70
 800c482:	d87b      	bhi.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c484:	2b60      	cmp	r3, #96	@ 0x60
 800c486:	d050      	beq.n	800c52a <HAL_TIM_ConfigClockSource+0x16a>
 800c488:	2b60      	cmp	r3, #96	@ 0x60
 800c48a:	d877      	bhi.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c48c:	2b50      	cmp	r3, #80	@ 0x50
 800c48e:	d03c      	beq.n	800c50a <HAL_TIM_ConfigClockSource+0x14a>
 800c490:	2b50      	cmp	r3, #80	@ 0x50
 800c492:	d873      	bhi.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c494:	2b40      	cmp	r3, #64	@ 0x40
 800c496:	d058      	beq.n	800c54a <HAL_TIM_ConfigClockSource+0x18a>
 800c498:	2b40      	cmp	r3, #64	@ 0x40
 800c49a:	d86f      	bhi.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c49c:	2b30      	cmp	r3, #48	@ 0x30
 800c49e:	d064      	beq.n	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c4a0:	2b30      	cmp	r3, #48	@ 0x30
 800c4a2:	d86b      	bhi.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c4a4:	2b20      	cmp	r3, #32
 800c4a6:	d060      	beq.n	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c4a8:	2b20      	cmp	r3, #32
 800c4aa:	d867      	bhi.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d05c      	beq.n	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c4b0:	2b10      	cmp	r3, #16
 800c4b2:	d05a      	beq.n	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c4b4:	e062      	b.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c4c6:	f000 fdbb 	bl	800d040 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c4d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	609a      	str	r2, [r3, #8]
      break;
 800c4e2:	e04f      	b.n	800c584 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c4f4:	f000 fda4 	bl	800d040 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	689a      	ldr	r2, [r3, #8]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c506:	609a      	str	r2, [r3, #8]
      break;
 800c508:	e03c      	b.n	800c584 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c516:	461a      	mov	r2, r3
 800c518:	f000 fd14 	bl	800cf44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2150      	movs	r1, #80	@ 0x50
 800c522:	4618      	mov	r0, r3
 800c524:	f000 fd6e 	bl	800d004 <TIM_ITRx_SetConfig>
      break;
 800c528:	e02c      	b.n	800c584 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c536:	461a      	mov	r2, r3
 800c538:	f000 fd33 	bl	800cfa2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2160      	movs	r1, #96	@ 0x60
 800c542:	4618      	mov	r0, r3
 800c544:	f000 fd5e 	bl	800d004 <TIM_ITRx_SetConfig>
      break;
 800c548:	e01c      	b.n	800c584 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c556:	461a      	mov	r2, r3
 800c558:	f000 fcf4 	bl	800cf44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2140      	movs	r1, #64	@ 0x40
 800c562:	4618      	mov	r0, r3
 800c564:	f000 fd4e 	bl	800d004 <TIM_ITRx_SetConfig>
      break;
 800c568:	e00c      	b.n	800c584 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4619      	mov	r1, r3
 800c574:	4610      	mov	r0, r2
 800c576:	f000 fd45 	bl	800d004 <TIM_ITRx_SetConfig>
      break;
 800c57a:	e003      	b.n	800c584 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	73fb      	strb	r3, [r7, #15]
      break;
 800c580:	e000      	b.n	800c584 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c594:	7bfb      	ldrb	r3, [r7, #15]
}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	ffceff88 	.word	0xffceff88
 800c5a4:	00100040 	.word	0x00100040
 800c5a8:	00100030 	.word	0x00100030
 800c5ac:	00100020 	.word	0x00100020

0800c5b0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d101      	bne.n	800c5c8 <HAL_TIM_SlaveConfigSynchro+0x18>
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	e031      	b.n	800c62c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2202      	movs	r2, #2
 800c5d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 fbc8 	bl	800cd70 <TIM_SlaveTimer_SetConfig>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d009      	beq.n	800c5fa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e018      	b.n	800c62c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	68da      	ldr	r2, [r3, #12]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c608:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	68da      	ldr	r2, [r3, #12]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c618:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2201      	movs	r2, #1
 800c61e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2200      	movs	r2, #0
 800c626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3708      	adds	r7, #8
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c63c:	bf00      	nop
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c650:	bf00      	nop
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c664:	bf00      	nop
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c678:	bf00      	nop
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a43      	ldr	r2, [pc, #268]	@ (800c7a4 <TIM_Base_SetConfig+0x120>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d013      	beq.n	800c6c4 <TIM_Base_SetConfig+0x40>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6a2:	d00f      	beq.n	800c6c4 <TIM_Base_SetConfig+0x40>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a40      	ldr	r2, [pc, #256]	@ (800c7a8 <TIM_Base_SetConfig+0x124>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d00b      	beq.n	800c6c4 <TIM_Base_SetConfig+0x40>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4a3f      	ldr	r2, [pc, #252]	@ (800c7ac <TIM_Base_SetConfig+0x128>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d007      	beq.n	800c6c4 <TIM_Base_SetConfig+0x40>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4a3e      	ldr	r2, [pc, #248]	@ (800c7b0 <TIM_Base_SetConfig+0x12c>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d003      	beq.n	800c6c4 <TIM_Base_SetConfig+0x40>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a3d      	ldr	r2, [pc, #244]	@ (800c7b4 <TIM_Base_SetConfig+0x130>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d108      	bne.n	800c6d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a32      	ldr	r2, [pc, #200]	@ (800c7a4 <TIM_Base_SetConfig+0x120>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d01f      	beq.n	800c71e <TIM_Base_SetConfig+0x9a>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6e4:	d01b      	beq.n	800c71e <TIM_Base_SetConfig+0x9a>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a2f      	ldr	r2, [pc, #188]	@ (800c7a8 <TIM_Base_SetConfig+0x124>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d017      	beq.n	800c71e <TIM_Base_SetConfig+0x9a>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a2e      	ldr	r2, [pc, #184]	@ (800c7ac <TIM_Base_SetConfig+0x128>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d013      	beq.n	800c71e <TIM_Base_SetConfig+0x9a>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a2d      	ldr	r2, [pc, #180]	@ (800c7b0 <TIM_Base_SetConfig+0x12c>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d00f      	beq.n	800c71e <TIM_Base_SetConfig+0x9a>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a2c      	ldr	r2, [pc, #176]	@ (800c7b4 <TIM_Base_SetConfig+0x130>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d00b      	beq.n	800c71e <TIM_Base_SetConfig+0x9a>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a2b      	ldr	r2, [pc, #172]	@ (800c7b8 <TIM_Base_SetConfig+0x134>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d007      	beq.n	800c71e <TIM_Base_SetConfig+0x9a>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a2a      	ldr	r2, [pc, #168]	@ (800c7bc <TIM_Base_SetConfig+0x138>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d003      	beq.n	800c71e <TIM_Base_SetConfig+0x9a>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a29      	ldr	r2, [pc, #164]	@ (800c7c0 <TIM_Base_SetConfig+0x13c>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d108      	bne.n	800c730 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	4313      	orrs	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	695b      	ldr	r3, [r3, #20]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	689a      	ldr	r2, [r3, #8]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4a14      	ldr	r2, [pc, #80]	@ (800c7a4 <TIM_Base_SetConfig+0x120>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d00f      	beq.n	800c776 <TIM_Base_SetConfig+0xf2>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	4a16      	ldr	r2, [pc, #88]	@ (800c7b4 <TIM_Base_SetConfig+0x130>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d00b      	beq.n	800c776 <TIM_Base_SetConfig+0xf2>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4a15      	ldr	r2, [pc, #84]	@ (800c7b8 <TIM_Base_SetConfig+0x134>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d007      	beq.n	800c776 <TIM_Base_SetConfig+0xf2>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	4a14      	ldr	r2, [pc, #80]	@ (800c7bc <TIM_Base_SetConfig+0x138>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d003      	beq.n	800c776 <TIM_Base_SetConfig+0xf2>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4a13      	ldr	r2, [pc, #76]	@ (800c7c0 <TIM_Base_SetConfig+0x13c>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d103      	bne.n	800c77e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	691a      	ldr	r2, [r3, #16]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f043 0204 	orr.w	r2, r3, #4
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2201      	movs	r2, #1
 800c78e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	601a      	str	r2, [r3, #0]
}
 800c796:	bf00      	nop
 800c798:	3714      	adds	r7, #20
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	40010000 	.word	0x40010000
 800c7a8:	40000400 	.word	0x40000400
 800c7ac:	40000800 	.word	0x40000800
 800c7b0:	40000c00 	.word	0x40000c00
 800c7b4:	40010400 	.word	0x40010400
 800c7b8:	40014000 	.word	0x40014000
 800c7bc:	40014400 	.word	0x40014400
 800c7c0:	40014800 	.word	0x40014800

0800c7c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b087      	sub	sp, #28
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a1b      	ldr	r3, [r3, #32]
 800c7d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6a1b      	ldr	r3, [r3, #32]
 800c7d8:	f023 0201 	bic.w	r2, r3, #1
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	699b      	ldr	r3, [r3, #24]
 800c7ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	4b37      	ldr	r3, [pc, #220]	@ (800c8cc <TIM_OC1_SetConfig+0x108>)
 800c7f0:	4013      	ands	r3, r2
 800c7f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f023 0303 	bic.w	r3, r3, #3
 800c7fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68fa      	ldr	r2, [r7, #12]
 800c802:	4313      	orrs	r3, r2
 800c804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	f023 0302 	bic.w	r3, r3, #2
 800c80c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	697a      	ldr	r2, [r7, #20]
 800c814:	4313      	orrs	r3, r2
 800c816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4a2d      	ldr	r2, [pc, #180]	@ (800c8d0 <TIM_OC1_SetConfig+0x10c>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d00f      	beq.n	800c840 <TIM_OC1_SetConfig+0x7c>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	4a2c      	ldr	r2, [pc, #176]	@ (800c8d4 <TIM_OC1_SetConfig+0x110>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d00b      	beq.n	800c840 <TIM_OC1_SetConfig+0x7c>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a2b      	ldr	r2, [pc, #172]	@ (800c8d8 <TIM_OC1_SetConfig+0x114>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d007      	beq.n	800c840 <TIM_OC1_SetConfig+0x7c>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	4a2a      	ldr	r2, [pc, #168]	@ (800c8dc <TIM_OC1_SetConfig+0x118>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d003      	beq.n	800c840 <TIM_OC1_SetConfig+0x7c>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4a29      	ldr	r2, [pc, #164]	@ (800c8e0 <TIM_OC1_SetConfig+0x11c>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d10c      	bne.n	800c85a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	f023 0308 	bic.w	r3, r3, #8
 800c846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	68db      	ldr	r3, [r3, #12]
 800c84c:	697a      	ldr	r2, [r7, #20]
 800c84e:	4313      	orrs	r3, r2
 800c850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	f023 0304 	bic.w	r3, r3, #4
 800c858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4a1c      	ldr	r2, [pc, #112]	@ (800c8d0 <TIM_OC1_SetConfig+0x10c>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d00f      	beq.n	800c882 <TIM_OC1_SetConfig+0xbe>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4a1b      	ldr	r2, [pc, #108]	@ (800c8d4 <TIM_OC1_SetConfig+0x110>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d00b      	beq.n	800c882 <TIM_OC1_SetConfig+0xbe>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4a1a      	ldr	r2, [pc, #104]	@ (800c8d8 <TIM_OC1_SetConfig+0x114>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d007      	beq.n	800c882 <TIM_OC1_SetConfig+0xbe>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4a19      	ldr	r2, [pc, #100]	@ (800c8dc <TIM_OC1_SetConfig+0x118>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d003      	beq.n	800c882 <TIM_OC1_SetConfig+0xbe>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4a18      	ldr	r2, [pc, #96]	@ (800c8e0 <TIM_OC1_SetConfig+0x11c>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d111      	bne.n	800c8a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	695b      	ldr	r3, [r3, #20]
 800c896:	693a      	ldr	r2, [r7, #16]
 800c898:	4313      	orrs	r3, r2
 800c89a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	699b      	ldr	r3, [r3, #24]
 800c8a0:	693a      	ldr	r2, [r7, #16]
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	693a      	ldr	r2, [r7, #16]
 800c8aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	685a      	ldr	r2, [r3, #4]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	697a      	ldr	r2, [r7, #20]
 800c8be:	621a      	str	r2, [r3, #32]
}
 800c8c0:	bf00      	nop
 800c8c2:	371c      	adds	r7, #28
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	fffeff8f 	.word	0xfffeff8f
 800c8d0:	40010000 	.word	0x40010000
 800c8d4:	40010400 	.word	0x40010400
 800c8d8:	40014000 	.word	0x40014000
 800c8dc:	40014400 	.word	0x40014400
 800c8e0:	40014800 	.word	0x40014800

0800c8e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b087      	sub	sp, #28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6a1b      	ldr	r3, [r3, #32]
 800c8f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6a1b      	ldr	r3, [r3, #32]
 800c8f8:	f023 0210 	bic.w	r2, r3, #16
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	699b      	ldr	r3, [r3, #24]
 800c90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	4b34      	ldr	r3, [pc, #208]	@ (800c9e0 <TIM_OC2_SetConfig+0xfc>)
 800c910:	4013      	ands	r3, r2
 800c912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c91a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	021b      	lsls	r3, r3, #8
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	4313      	orrs	r3, r2
 800c926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	f023 0320 	bic.w	r3, r3, #32
 800c92e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	011b      	lsls	r3, r3, #4
 800c936:	697a      	ldr	r2, [r7, #20]
 800c938:	4313      	orrs	r3, r2
 800c93a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	4a29      	ldr	r2, [pc, #164]	@ (800c9e4 <TIM_OC2_SetConfig+0x100>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d003      	beq.n	800c94c <TIM_OC2_SetConfig+0x68>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4a28      	ldr	r2, [pc, #160]	@ (800c9e8 <TIM_OC2_SetConfig+0x104>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d10d      	bne.n	800c968 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	011b      	lsls	r3, r3, #4
 800c95a:	697a      	ldr	r2, [r7, #20]
 800c95c:	4313      	orrs	r3, r2
 800c95e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c966:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a1e      	ldr	r2, [pc, #120]	@ (800c9e4 <TIM_OC2_SetConfig+0x100>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d00f      	beq.n	800c990 <TIM_OC2_SetConfig+0xac>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4a1d      	ldr	r2, [pc, #116]	@ (800c9e8 <TIM_OC2_SetConfig+0x104>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d00b      	beq.n	800c990 <TIM_OC2_SetConfig+0xac>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	4a1c      	ldr	r2, [pc, #112]	@ (800c9ec <TIM_OC2_SetConfig+0x108>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d007      	beq.n	800c990 <TIM_OC2_SetConfig+0xac>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	4a1b      	ldr	r2, [pc, #108]	@ (800c9f0 <TIM_OC2_SetConfig+0x10c>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d003      	beq.n	800c990 <TIM_OC2_SetConfig+0xac>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	4a1a      	ldr	r2, [pc, #104]	@ (800c9f4 <TIM_OC2_SetConfig+0x110>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d113      	bne.n	800c9b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c996:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c99e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	695b      	ldr	r3, [r3, #20]
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	699b      	ldr	r3, [r3, #24]
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	693a      	ldr	r2, [r7, #16]
 800c9bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	685a      	ldr	r2, [r3, #4]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	697a      	ldr	r2, [r7, #20]
 800c9d0:	621a      	str	r2, [r3, #32]
}
 800c9d2:	bf00      	nop
 800c9d4:	371c      	adds	r7, #28
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	feff8fff 	.word	0xfeff8fff
 800c9e4:	40010000 	.word	0x40010000
 800c9e8:	40010400 	.word	0x40010400
 800c9ec:	40014000 	.word	0x40014000
 800c9f0:	40014400 	.word	0x40014400
 800c9f4:	40014800 	.word	0x40014800

0800c9f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b087      	sub	sp, #28
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a1b      	ldr	r3, [r3, #32]
 800ca06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6a1b      	ldr	r3, [r3, #32]
 800ca0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	69db      	ldr	r3, [r3, #28]
 800ca1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	4b33      	ldr	r3, [pc, #204]	@ (800caf0 <TIM_OC3_SetConfig+0xf8>)
 800ca24:	4013      	ands	r3, r2
 800ca26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f023 0303 	bic.w	r3, r3, #3
 800ca2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	4313      	orrs	r3, r2
 800ca38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ca40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	021b      	lsls	r3, r3, #8
 800ca48:	697a      	ldr	r2, [r7, #20]
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	4a28      	ldr	r2, [pc, #160]	@ (800caf4 <TIM_OC3_SetConfig+0xfc>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d003      	beq.n	800ca5e <TIM_OC3_SetConfig+0x66>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	4a27      	ldr	r2, [pc, #156]	@ (800caf8 <TIM_OC3_SetConfig+0x100>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d10d      	bne.n	800ca7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ca64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	021b      	lsls	r3, r3, #8
 800ca6c:	697a      	ldr	r2, [r7, #20]
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ca78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4a1d      	ldr	r2, [pc, #116]	@ (800caf4 <TIM_OC3_SetConfig+0xfc>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d00f      	beq.n	800caa2 <TIM_OC3_SetConfig+0xaa>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	4a1c      	ldr	r2, [pc, #112]	@ (800caf8 <TIM_OC3_SetConfig+0x100>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d00b      	beq.n	800caa2 <TIM_OC3_SetConfig+0xaa>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	4a1b      	ldr	r2, [pc, #108]	@ (800cafc <TIM_OC3_SetConfig+0x104>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d007      	beq.n	800caa2 <TIM_OC3_SetConfig+0xaa>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	4a1a      	ldr	r2, [pc, #104]	@ (800cb00 <TIM_OC3_SetConfig+0x108>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d003      	beq.n	800caa2 <TIM_OC3_SetConfig+0xaa>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	4a19      	ldr	r2, [pc, #100]	@ (800cb04 <TIM_OC3_SetConfig+0x10c>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d113      	bne.n	800caca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800caa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	695b      	ldr	r3, [r3, #20]
 800cab6:	011b      	lsls	r3, r3, #4
 800cab8:	693a      	ldr	r2, [r7, #16]
 800caba:	4313      	orrs	r3, r2
 800cabc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	699b      	ldr	r3, [r3, #24]
 800cac2:	011b      	lsls	r3, r3, #4
 800cac4:	693a      	ldr	r2, [r7, #16]
 800cac6:	4313      	orrs	r3, r2
 800cac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	693a      	ldr	r2, [r7, #16]
 800cace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	685a      	ldr	r2, [r3, #4]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	697a      	ldr	r2, [r7, #20]
 800cae2:	621a      	str	r2, [r3, #32]
}
 800cae4:	bf00      	nop
 800cae6:	371c      	adds	r7, #28
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr
 800caf0:	fffeff8f 	.word	0xfffeff8f
 800caf4:	40010000 	.word	0x40010000
 800caf8:	40010400 	.word	0x40010400
 800cafc:	40014000 	.word	0x40014000
 800cb00:	40014400 	.word	0x40014400
 800cb04:	40014800 	.word	0x40014800

0800cb08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b087      	sub	sp, #28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6a1b      	ldr	r3, [r3, #32]
 800cb16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6a1b      	ldr	r3, [r3, #32]
 800cb1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	69db      	ldr	r3, [r3, #28]
 800cb2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	4b24      	ldr	r3, [pc, #144]	@ (800cbc4 <TIM_OC4_SetConfig+0xbc>)
 800cb34:	4013      	ands	r3, r2
 800cb36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	021b      	lsls	r3, r3, #8
 800cb46:	68fa      	ldr	r2, [r7, #12]
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cb52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	031b      	lsls	r3, r3, #12
 800cb5a:	693a      	ldr	r2, [r7, #16]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4a19      	ldr	r2, [pc, #100]	@ (800cbc8 <TIM_OC4_SetConfig+0xc0>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d00f      	beq.n	800cb88 <TIM_OC4_SetConfig+0x80>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4a18      	ldr	r2, [pc, #96]	@ (800cbcc <TIM_OC4_SetConfig+0xc4>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d00b      	beq.n	800cb88 <TIM_OC4_SetConfig+0x80>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4a17      	ldr	r2, [pc, #92]	@ (800cbd0 <TIM_OC4_SetConfig+0xc8>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d007      	beq.n	800cb88 <TIM_OC4_SetConfig+0x80>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a16      	ldr	r2, [pc, #88]	@ (800cbd4 <TIM_OC4_SetConfig+0xcc>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d003      	beq.n	800cb88 <TIM_OC4_SetConfig+0x80>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4a15      	ldr	r2, [pc, #84]	@ (800cbd8 <TIM_OC4_SetConfig+0xd0>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d109      	bne.n	800cb9c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	695b      	ldr	r3, [r3, #20]
 800cb94:	019b      	lsls	r3, r3, #6
 800cb96:	697a      	ldr	r2, [r7, #20]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	697a      	ldr	r2, [r7, #20]
 800cba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	685a      	ldr	r2, [r3, #4]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	693a      	ldr	r2, [r7, #16]
 800cbb4:	621a      	str	r2, [r3, #32]
}
 800cbb6:	bf00      	nop
 800cbb8:	371c      	adds	r7, #28
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop
 800cbc4:	feff8fff 	.word	0xfeff8fff
 800cbc8:	40010000 	.word	0x40010000
 800cbcc:	40010400 	.word	0x40010400
 800cbd0:	40014000 	.word	0x40014000
 800cbd4:	40014400 	.word	0x40014400
 800cbd8:	40014800 	.word	0x40014800

0800cbdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b087      	sub	sp, #28
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a1b      	ldr	r3, [r3, #32]
 800cbea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a1b      	ldr	r3, [r3, #32]
 800cbf0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cc04:	68fa      	ldr	r2, [r7, #12]
 800cc06:	4b21      	ldr	r3, [pc, #132]	@ (800cc8c <TIM_OC5_SetConfig+0xb0>)
 800cc08:	4013      	ands	r3, r2
 800cc0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	4313      	orrs	r3, r2
 800cc14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cc1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	041b      	lsls	r3, r3, #16
 800cc24:	693a      	ldr	r2, [r7, #16]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4a18      	ldr	r2, [pc, #96]	@ (800cc90 <TIM_OC5_SetConfig+0xb4>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d00f      	beq.n	800cc52 <TIM_OC5_SetConfig+0x76>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4a17      	ldr	r2, [pc, #92]	@ (800cc94 <TIM_OC5_SetConfig+0xb8>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d00b      	beq.n	800cc52 <TIM_OC5_SetConfig+0x76>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4a16      	ldr	r2, [pc, #88]	@ (800cc98 <TIM_OC5_SetConfig+0xbc>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d007      	beq.n	800cc52 <TIM_OC5_SetConfig+0x76>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	4a15      	ldr	r2, [pc, #84]	@ (800cc9c <TIM_OC5_SetConfig+0xc0>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d003      	beq.n	800cc52 <TIM_OC5_SetConfig+0x76>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4a14      	ldr	r2, [pc, #80]	@ (800cca0 <TIM_OC5_SetConfig+0xc4>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d109      	bne.n	800cc66 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cc58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	695b      	ldr	r3, [r3, #20]
 800cc5e:	021b      	lsls	r3, r3, #8
 800cc60:	697a      	ldr	r2, [r7, #20]
 800cc62:	4313      	orrs	r3, r2
 800cc64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	697a      	ldr	r2, [r7, #20]
 800cc6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	685a      	ldr	r2, [r3, #4]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	693a      	ldr	r2, [r7, #16]
 800cc7e:	621a      	str	r2, [r3, #32]
}
 800cc80:	bf00      	nop
 800cc82:	371c      	adds	r7, #28
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr
 800cc8c:	fffeff8f 	.word	0xfffeff8f
 800cc90:	40010000 	.word	0x40010000
 800cc94:	40010400 	.word	0x40010400
 800cc98:	40014000 	.word	0x40014000
 800cc9c:	40014400 	.word	0x40014400
 800cca0:	40014800 	.word	0x40014800

0800cca4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b087      	sub	sp, #28
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a1b      	ldr	r3, [r3, #32]
 800ccb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a1b      	ldr	r3, [r3, #32]
 800ccb8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	4b22      	ldr	r3, [pc, #136]	@ (800cd58 <TIM_OC6_SetConfig+0xb4>)
 800ccd0:	4013      	ands	r3, r2
 800ccd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	021b      	lsls	r3, r3, #8
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	051b      	lsls	r3, r3, #20
 800ccee:	693a      	ldr	r2, [r7, #16]
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	4a19      	ldr	r2, [pc, #100]	@ (800cd5c <TIM_OC6_SetConfig+0xb8>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d00f      	beq.n	800cd1c <TIM_OC6_SetConfig+0x78>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	4a18      	ldr	r2, [pc, #96]	@ (800cd60 <TIM_OC6_SetConfig+0xbc>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d00b      	beq.n	800cd1c <TIM_OC6_SetConfig+0x78>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	4a17      	ldr	r2, [pc, #92]	@ (800cd64 <TIM_OC6_SetConfig+0xc0>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d007      	beq.n	800cd1c <TIM_OC6_SetConfig+0x78>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	4a16      	ldr	r2, [pc, #88]	@ (800cd68 <TIM_OC6_SetConfig+0xc4>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d003      	beq.n	800cd1c <TIM_OC6_SetConfig+0x78>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	4a15      	ldr	r2, [pc, #84]	@ (800cd6c <TIM_OC6_SetConfig+0xc8>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d109      	bne.n	800cd30 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cd22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	695b      	ldr	r3, [r3, #20]
 800cd28:	029b      	lsls	r3, r3, #10
 800cd2a:	697a      	ldr	r2, [r7, #20]
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	697a      	ldr	r2, [r7, #20]
 800cd34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	685a      	ldr	r2, [r3, #4]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	693a      	ldr	r2, [r7, #16]
 800cd48:	621a      	str	r2, [r3, #32]
}
 800cd4a:	bf00      	nop
 800cd4c:	371c      	adds	r7, #28
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	feff8fff 	.word	0xfeff8fff
 800cd5c:	40010000 	.word	0x40010000
 800cd60:	40010400 	.word	0x40010400
 800cd64:	40014000 	.word	0x40014000
 800cd68:	40014400 	.word	0x40014400
 800cd6c:	40014800 	.word	0x40014800

0800cd70 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b086      	sub	sp, #24
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd86:	693a      	ldr	r2, [r7, #16]
 800cd88:	4b65      	ldr	r3, [pc, #404]	@ (800cf20 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800cd8a:	4013      	ands	r3, r2
 800cd8c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	693a      	ldr	r2, [r7, #16]
 800cd94:	4313      	orrs	r3, r2
 800cd96:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800cd98:	693a      	ldr	r2, [r7, #16]
 800cd9a:	4b62      	ldr	r3, [pc, #392]	@ (800cf24 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800cd9c:	4013      	ands	r3, r2
 800cd9e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	693a      	ldr	r2, [r7, #16]
 800cda6:	4313      	orrs	r3, r2
 800cda8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	693a      	ldr	r2, [r7, #16]
 800cdb0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	4a5c      	ldr	r2, [pc, #368]	@ (800cf28 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	f000 80ab 	beq.w	800cf14 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cdbe:	4a5a      	ldr	r2, [pc, #360]	@ (800cf28 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	f200 80a4 	bhi.w	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800cdc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cdca:	f000 80a3 	beq.w	800cf14 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cdce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cdd2:	f200 809c 	bhi.w	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800cdd6:	4a55      	ldr	r2, [pc, #340]	@ (800cf2c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	f000 809b 	beq.w	800cf14 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cdde:	4a53      	ldr	r2, [pc, #332]	@ (800cf2c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	f200 8094 	bhi.w	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800cde6:	4a52      	ldr	r2, [pc, #328]	@ (800cf30 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	f000 8093 	beq.w	800cf14 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cdee:	4a50      	ldr	r2, [pc, #320]	@ (800cf30 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	f200 808c 	bhi.w	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800cdf6:	4a4f      	ldr	r2, [pc, #316]	@ (800cf34 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	f000 808b 	beq.w	800cf14 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cdfe:	4a4d      	ldr	r2, [pc, #308]	@ (800cf34 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	f200 8084 	bhi.w	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800ce06:	4a4c      	ldr	r2, [pc, #304]	@ (800cf38 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	f000 8083 	beq.w	800cf14 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ce0e:	4a4a      	ldr	r2, [pc, #296]	@ (800cf38 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d87c      	bhi.n	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800ce14:	4a49      	ldr	r2, [pc, #292]	@ (800cf3c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d07c      	beq.n	800cf14 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ce1a:	4a48      	ldr	r2, [pc, #288]	@ (800cf3c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d876      	bhi.n	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800ce20:	4a47      	ldr	r2, [pc, #284]	@ (800cf40 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d076      	beq.n	800cf14 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ce26:	4a46      	ldr	r2, [pc, #280]	@ (800cf40 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d870      	bhi.n	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800ce2c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ce30:	d070      	beq.n	800cf14 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ce32:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ce36:	d86a      	bhi.n	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800ce38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ce3c:	d06a      	beq.n	800cf14 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ce3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ce42:	d864      	bhi.n	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800ce44:	2b70      	cmp	r3, #112	@ 0x70
 800ce46:	d01a      	beq.n	800ce7e <TIM_SlaveTimer_SetConfig+0x10e>
 800ce48:	2b70      	cmp	r3, #112	@ 0x70
 800ce4a:	d860      	bhi.n	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800ce4c:	2b60      	cmp	r3, #96	@ 0x60
 800ce4e:	d054      	beq.n	800cefa <TIM_SlaveTimer_SetConfig+0x18a>
 800ce50:	2b60      	cmp	r3, #96	@ 0x60
 800ce52:	d85c      	bhi.n	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800ce54:	2b50      	cmp	r3, #80	@ 0x50
 800ce56:	d046      	beq.n	800cee6 <TIM_SlaveTimer_SetConfig+0x176>
 800ce58:	2b50      	cmp	r3, #80	@ 0x50
 800ce5a:	d858      	bhi.n	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800ce5c:	2b40      	cmp	r3, #64	@ 0x40
 800ce5e:	d019      	beq.n	800ce94 <TIM_SlaveTimer_SetConfig+0x124>
 800ce60:	2b40      	cmp	r3, #64	@ 0x40
 800ce62:	d854      	bhi.n	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800ce64:	2b30      	cmp	r3, #48	@ 0x30
 800ce66:	d055      	beq.n	800cf14 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ce68:	2b30      	cmp	r3, #48	@ 0x30
 800ce6a:	d850      	bhi.n	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800ce6c:	2b20      	cmp	r3, #32
 800ce6e:	d051      	beq.n	800cf14 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ce70:	2b20      	cmp	r3, #32
 800ce72:	d84c      	bhi.n	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d04d      	beq.n	800cf14 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ce78:	2b10      	cmp	r3, #16
 800ce7a:	d04b      	beq.n	800cf14 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ce7c:	e047      	b.n	800cf0e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800ce8e:	f000 f8d7 	bl	800d040 <TIM_ETR_SetConfig>
      break;
 800ce92:	e040      	b.n	800cf16 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	2b05      	cmp	r3, #5
 800ce9a:	d101      	bne.n	800cea0 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e03b      	b.n	800cf18 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	6a1b      	ldr	r3, [r3, #32]
 800cea6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	6a1a      	ldr	r2, [r3, #32]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f022 0201 	bic.w	r2, r2, #1
 800ceb6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	699b      	ldr	r3, [r3, #24]
 800cebe:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cec6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	691b      	ldr	r3, [r3, #16]
 800cecc:	011b      	lsls	r3, r3, #4
 800cece:	68ba      	ldr	r2, [r7, #8]
 800ced0:	4313      	orrs	r3, r2
 800ced2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	68fa      	ldr	r2, [r7, #12]
 800cee2:	621a      	str	r2, [r3, #32]
      break;
 800cee4:	e017      	b.n	800cf16 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cef2:	461a      	mov	r2, r3
 800cef4:	f000 f826 	bl	800cf44 <TIM_TI1_ConfigInputStage>
      break;
 800cef8:	e00d      	b.n	800cf16 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf06:	461a      	mov	r2, r3
 800cf08:	f000 f84b 	bl	800cfa2 <TIM_TI2_ConfigInputStage>
      break;
 800cf0c:	e003      	b.n	800cf16 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	75fb      	strb	r3, [r7, #23]
      break;
 800cf12:	e000      	b.n	800cf16 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800cf14:	bf00      	nop
  }

  return status;
 800cf16:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3718      	adds	r7, #24
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	ffcfff8f 	.word	0xffcfff8f
 800cf24:	fffefff8 	.word	0xfffefff8
 800cf28:	00200010 	.word	0x00200010
 800cf2c:	00100070 	.word	0x00100070
 800cf30:	00100060 	.word	0x00100060
 800cf34:	00100050 	.word	0x00100050
 800cf38:	00100040 	.word	0x00100040
 800cf3c:	00100030 	.word	0x00100030
 800cf40:	00100020 	.word	0x00100020

0800cf44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b087      	sub	sp, #28
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	6a1b      	ldr	r3, [r3, #32]
 800cf54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6a1b      	ldr	r3, [r3, #32]
 800cf5a:	f023 0201 	bic.w	r2, r3, #1
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	699b      	ldr	r3, [r3, #24]
 800cf66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cf6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	011b      	lsls	r3, r3, #4
 800cf74:	693a      	ldr	r2, [r7, #16]
 800cf76:	4313      	orrs	r3, r2
 800cf78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	f023 030a 	bic.w	r3, r3, #10
 800cf80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cf82:	697a      	ldr	r2, [r7, #20]
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	4313      	orrs	r3, r2
 800cf88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	693a      	ldr	r2, [r7, #16]
 800cf8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	697a      	ldr	r2, [r7, #20]
 800cf94:	621a      	str	r2, [r3, #32]
}
 800cf96:	bf00      	nop
 800cf98:	371c      	adds	r7, #28
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr

0800cfa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfa2:	b480      	push	{r7}
 800cfa4:	b087      	sub	sp, #28
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	60f8      	str	r0, [r7, #12]
 800cfaa:	60b9      	str	r1, [r7, #8]
 800cfac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	6a1b      	ldr	r3, [r3, #32]
 800cfb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	6a1b      	ldr	r3, [r3, #32]
 800cfb8:	f023 0210 	bic.w	r2, r3, #16
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	699b      	ldr	r3, [r3, #24]
 800cfc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cfcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	031b      	lsls	r3, r3, #12
 800cfd2:	693a      	ldr	r2, [r7, #16]
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cfde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	011b      	lsls	r3, r3, #4
 800cfe4:	697a      	ldr	r2, [r7, #20]
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	693a      	ldr	r2, [r7, #16]
 800cfee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	697a      	ldr	r2, [r7, #20]
 800cff4:	621a      	str	r2, [r3, #32]
}
 800cff6:	bf00      	nop
 800cff8:	371c      	adds	r7, #28
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr
	...

0800d004 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d004:	b480      	push	{r7}
 800d006:	b085      	sub	sp, #20
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	4b09      	ldr	r3, [pc, #36]	@ (800d03c <TIM_ITRx_SetConfig+0x38>)
 800d018:	4013      	ands	r3, r2
 800d01a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d01c:	683a      	ldr	r2, [r7, #0]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	4313      	orrs	r3, r2
 800d022:	f043 0307 	orr.w	r3, r3, #7
 800d026:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	609a      	str	r2, [r3, #8]
}
 800d02e:	bf00      	nop
 800d030:	3714      	adds	r7, #20
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	ffcfff8f 	.word	0xffcfff8f

0800d040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d040:	b480      	push	{r7}
 800d042:	b087      	sub	sp, #28
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
 800d04c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d05a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	021a      	lsls	r2, r3, #8
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	431a      	orrs	r2, r3
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	4313      	orrs	r3, r2
 800d068:	697a      	ldr	r2, [r7, #20]
 800d06a:	4313      	orrs	r3, r2
 800d06c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	697a      	ldr	r2, [r7, #20]
 800d072:	609a      	str	r2, [r3, #8]
}
 800d074:	bf00      	nop
 800d076:	371c      	adds	r7, #28
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d080:	b480      	push	{r7}
 800d082:	b087      	sub	sp, #28
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	f003 031f 	and.w	r3, r3, #31
 800d092:	2201      	movs	r2, #1
 800d094:	fa02 f303 	lsl.w	r3, r2, r3
 800d098:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6a1a      	ldr	r2, [r3, #32]
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	43db      	mvns	r3, r3
 800d0a2:	401a      	ands	r2, r3
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6a1a      	ldr	r2, [r3, #32]
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	f003 031f 	and.w	r3, r3, #31
 800d0b2:	6879      	ldr	r1, [r7, #4]
 800d0b4:	fa01 f303 	lsl.w	r3, r1, r3
 800d0b8:	431a      	orrs	r2, r3
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	621a      	str	r2, [r3, #32]
}
 800d0be:	bf00      	nop
 800d0c0:	371c      	adds	r7, #28
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
	...

0800d0cc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d109      	bne.n	800d0f0 <HAL_TIMEx_PWMN_Start+0x24>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	bf14      	ite	ne
 800d0e8:	2301      	movne	r3, #1
 800d0ea:	2300      	moveq	r3, #0
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	e022      	b.n	800d136 <HAL_TIMEx_PWMN_Start+0x6a>
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	2b04      	cmp	r3, #4
 800d0f4:	d109      	bne.n	800d10a <HAL_TIMEx_PWMN_Start+0x3e>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	bf14      	ite	ne
 800d102:	2301      	movne	r3, #1
 800d104:	2300      	moveq	r3, #0
 800d106:	b2db      	uxtb	r3, r3
 800d108:	e015      	b.n	800d136 <HAL_TIMEx_PWMN_Start+0x6a>
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	2b08      	cmp	r3, #8
 800d10e:	d109      	bne.n	800d124 <HAL_TIMEx_PWMN_Start+0x58>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d116:	b2db      	uxtb	r3, r3
 800d118:	2b01      	cmp	r3, #1
 800d11a:	bf14      	ite	ne
 800d11c:	2301      	movne	r3, #1
 800d11e:	2300      	moveq	r3, #0
 800d120:	b2db      	uxtb	r3, r3
 800d122:	e008      	b.n	800d136 <HAL_TIMEx_PWMN_Start+0x6a>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	bf14      	ite	ne
 800d130:	2301      	movne	r3, #1
 800d132:	2300      	moveq	r3, #0
 800d134:	b2db      	uxtb	r3, r3
 800d136:	2b00      	cmp	r3, #0
 800d138:	d001      	beq.n	800d13e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800d13a:	2301      	movs	r3, #1
 800d13c:	e073      	b.n	800d226 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d104      	bne.n	800d14e <HAL_TIMEx_PWMN_Start+0x82>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2202      	movs	r2, #2
 800d148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d14c:	e013      	b.n	800d176 <HAL_TIMEx_PWMN_Start+0xaa>
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	2b04      	cmp	r3, #4
 800d152:	d104      	bne.n	800d15e <HAL_TIMEx_PWMN_Start+0x92>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2202      	movs	r2, #2
 800d158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d15c:	e00b      	b.n	800d176 <HAL_TIMEx_PWMN_Start+0xaa>
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	2b08      	cmp	r3, #8
 800d162:	d104      	bne.n	800d16e <HAL_TIMEx_PWMN_Start+0xa2>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2202      	movs	r2, #2
 800d168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d16c:	e003      	b.n	800d176 <HAL_TIMEx_PWMN_Start+0xaa>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2202      	movs	r2, #2
 800d172:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2204      	movs	r2, #4
 800d17c:	6839      	ldr	r1, [r7, #0]
 800d17e:	4618      	mov	r0, r3
 800d180:	f000 f990 	bl	800d4a4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d192:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a25      	ldr	r2, [pc, #148]	@ (800d230 <HAL_TIMEx_PWMN_Start+0x164>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d022      	beq.n	800d1e4 <HAL_TIMEx_PWMN_Start+0x118>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1a6:	d01d      	beq.n	800d1e4 <HAL_TIMEx_PWMN_Start+0x118>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a21      	ldr	r2, [pc, #132]	@ (800d234 <HAL_TIMEx_PWMN_Start+0x168>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d018      	beq.n	800d1e4 <HAL_TIMEx_PWMN_Start+0x118>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a20      	ldr	r2, [pc, #128]	@ (800d238 <HAL_TIMEx_PWMN_Start+0x16c>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d013      	beq.n	800d1e4 <HAL_TIMEx_PWMN_Start+0x118>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a1e      	ldr	r2, [pc, #120]	@ (800d23c <HAL_TIMEx_PWMN_Start+0x170>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d00e      	beq.n	800d1e4 <HAL_TIMEx_PWMN_Start+0x118>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a1d      	ldr	r2, [pc, #116]	@ (800d240 <HAL_TIMEx_PWMN_Start+0x174>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d009      	beq.n	800d1e4 <HAL_TIMEx_PWMN_Start+0x118>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a1b      	ldr	r2, [pc, #108]	@ (800d244 <HAL_TIMEx_PWMN_Start+0x178>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d004      	beq.n	800d1e4 <HAL_TIMEx_PWMN_Start+0x118>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4a1a      	ldr	r2, [pc, #104]	@ (800d248 <HAL_TIMEx_PWMN_Start+0x17c>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d115      	bne.n	800d210 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	689a      	ldr	r2, [r3, #8]
 800d1ea:	4b18      	ldr	r3, [pc, #96]	@ (800d24c <HAL_TIMEx_PWMN_Start+0x180>)
 800d1ec:	4013      	ands	r3, r2
 800d1ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2b06      	cmp	r3, #6
 800d1f4:	d015      	beq.n	800d222 <HAL_TIMEx_PWMN_Start+0x156>
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1fc:	d011      	beq.n	800d222 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f042 0201 	orr.w	r2, r2, #1
 800d20c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d20e:	e008      	b.n	800d222 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f042 0201 	orr.w	r2, r2, #1
 800d21e:	601a      	str	r2, [r3, #0]
 800d220:	e000      	b.n	800d224 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d222:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d224:	2300      	movs	r3, #0
}
 800d226:	4618      	mov	r0, r3
 800d228:	3710      	adds	r7, #16
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	40010000 	.word	0x40010000
 800d234:	40000400 	.word	0x40000400
 800d238:	40000800 	.word	0x40000800
 800d23c:	40000c00 	.word	0x40000c00
 800d240:	40010400 	.word	0x40010400
 800d244:	40001800 	.word	0x40001800
 800d248:	40014000 	.word	0x40014000
 800d24c:	00010007 	.word	0x00010007

0800d250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d250:	b480      	push	{r7}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d260:	2b01      	cmp	r3, #1
 800d262:	d101      	bne.n	800d268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d264:	2302      	movs	r3, #2
 800d266:	e06d      	b.n	800d344 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2201      	movs	r2, #1
 800d26c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2202      	movs	r2, #2
 800d274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4a30      	ldr	r2, [pc, #192]	@ (800d350 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d004      	beq.n	800d29c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4a2f      	ldr	r2, [pc, #188]	@ (800d354 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d108      	bne.n	800d2ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d2a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	68fa      	ldr	r2, [r7, #12]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a20      	ldr	r2, [pc, #128]	@ (800d350 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d022      	beq.n	800d318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2da:	d01d      	beq.n	800d318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a1d      	ldr	r2, [pc, #116]	@ (800d358 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d018      	beq.n	800d318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a1c      	ldr	r2, [pc, #112]	@ (800d35c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d013      	beq.n	800d318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4a1a      	ldr	r2, [pc, #104]	@ (800d360 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d00e      	beq.n	800d318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4a15      	ldr	r2, [pc, #84]	@ (800d354 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d009      	beq.n	800d318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4a16      	ldr	r2, [pc, #88]	@ (800d364 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d004      	beq.n	800d318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4a15      	ldr	r2, [pc, #84]	@ (800d368 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d10c      	bne.n	800d332 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d31e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	689b      	ldr	r3, [r3, #8]
 800d324:	68ba      	ldr	r2, [r7, #8]
 800d326:	4313      	orrs	r3, r2
 800d328:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2201      	movs	r2, #1
 800d336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2200      	movs	r2, #0
 800d33e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d342:	2300      	movs	r3, #0
}
 800d344:	4618      	mov	r0, r3
 800d346:	3714      	adds	r7, #20
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	40010000 	.word	0x40010000
 800d354:	40010400 	.word	0x40010400
 800d358:	40000400 	.word	0x40000400
 800d35c:	40000800 	.word	0x40000800
 800d360:	40000c00 	.word	0x40000c00
 800d364:	40001800 	.word	0x40001800
 800d368:	40014000 	.word	0x40014000

0800d36c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d376:	2300      	movs	r3, #0
 800d378:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d380:	2b01      	cmp	r3, #1
 800d382:	d101      	bne.n	800d388 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d384:	2302      	movs	r3, #2
 800d386:	e065      	b.n	800d454 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	4313      	orrs	r3, r2
 800d39c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	689b      	ldr	r3, [r3, #8]
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	691b      	ldr	r3, [r3, #16]
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	695b      	ldr	r3, [r3, #20]
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	699b      	ldr	r3, [r3, #24]
 800d3fc:	041b      	lsls	r3, r3, #16
 800d3fe:	4313      	orrs	r3, r2
 800d400:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a16      	ldr	r2, [pc, #88]	@ (800d460 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d004      	beq.n	800d416 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4a14      	ldr	r2, [pc, #80]	@ (800d464 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d115      	bne.n	800d442 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d420:	051b      	lsls	r3, r3, #20
 800d422:	4313      	orrs	r3, r2
 800d424:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	69db      	ldr	r3, [r3, #28]
 800d430:	4313      	orrs	r3, r2
 800d432:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	6a1b      	ldr	r3, [r3, #32]
 800d43e:	4313      	orrs	r3, r2
 800d440:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	40010000 	.word	0x40010000
 800d464:	40010400 	.word	0x40010400

0800d468 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d470:	bf00      	nop
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d484:	bf00      	nop
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d498:	bf00      	nop
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b087      	sub	sp, #28
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	f003 030f 	and.w	r3, r3, #15
 800d4b6:	2204      	movs	r2, #4
 800d4b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6a1a      	ldr	r2, [r3, #32]
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	43db      	mvns	r3, r3
 800d4c6:	401a      	ands	r2, r3
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6a1a      	ldr	r2, [r3, #32]
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	f003 030f 	and.w	r3, r3, #15
 800d4d6:	6879      	ldr	r1, [r7, #4]
 800d4d8:	fa01 f303 	lsl.w	r3, r1, r3
 800d4dc:	431a      	orrs	r2, r3
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	621a      	str	r2, [r3, #32]
}
 800d4e2:	bf00      	nop
 800d4e4:	371c      	adds	r7, #28
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr

0800d4ee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b082      	sub	sp, #8
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d101      	bne.n	800d500 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	e042      	b.n	800d586 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d506:	2b00      	cmp	r3, #0
 800d508:	d106      	bne.n	800d518 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2200      	movs	r2, #0
 800d50e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 f83b 	bl	800d58e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2224      	movs	r2, #36	@ 0x24
 800d51c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f022 0201 	bic.w	r2, r2, #1
 800d52e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 fd9b 	bl	800e074 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 f830 	bl	800d5a4 <UART_SetConfig>
 800d544:	4603      	mov	r3, r0
 800d546:	2b01      	cmp	r3, #1
 800d548:	d101      	bne.n	800d54e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d54a:	2301      	movs	r3, #1
 800d54c:	e01b      	b.n	800d586 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	685a      	ldr	r2, [r3, #4]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d55c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	689a      	ldr	r2, [r3, #8]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d56c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f042 0201 	orr.w	r2, r2, #1
 800d57c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 fe1a 	bl	800e1b8 <UART_CheckIdleState>
 800d584:	4603      	mov	r3, r0
}
 800d586:	4618      	mov	r0, r3
 800d588:	3708      	adds	r7, #8
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}

0800d58e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800d58e:	b480      	push	{r7}
 800d590:	b083      	sub	sp, #12
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800d596:	bf00      	nop
 800d598:	370c      	adds	r7, #12
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
	...

0800d5a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d5a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d5a8:	b092      	sub	sp, #72	@ 0x48
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	689a      	ldr	r2, [r3, #8]
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	691b      	ldr	r3, [r3, #16]
 800d5bc:	431a      	orrs	r2, r3
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	695b      	ldr	r3, [r3, #20]
 800d5c2:	431a      	orrs	r2, r3
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	69db      	ldr	r3, [r3, #28]
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	4bbe      	ldr	r3, [pc, #760]	@ (800d8cc <UART_SetConfig+0x328>)
 800d5d4:	4013      	ands	r3, r2
 800d5d6:	697a      	ldr	r2, [r7, #20]
 800d5d8:	6812      	ldr	r2, [r2, #0]
 800d5da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d5dc:	430b      	orrs	r3, r1
 800d5de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	68da      	ldr	r2, [r3, #12]
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	430a      	orrs	r2, r1
 800d5f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	699b      	ldr	r3, [r3, #24]
 800d5fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4ab3      	ldr	r2, [pc, #716]	@ (800d8d0 <UART_SetConfig+0x32c>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d004      	beq.n	800d610 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	6a1b      	ldr	r3, [r3, #32]
 800d60a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d60c:	4313      	orrs	r3, r2
 800d60e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	689a      	ldr	r2, [r3, #8]
 800d616:	4baf      	ldr	r3, [pc, #700]	@ (800d8d4 <UART_SetConfig+0x330>)
 800d618:	4013      	ands	r3, r2
 800d61a:	697a      	ldr	r2, [r7, #20]
 800d61c:	6812      	ldr	r2, [r2, #0]
 800d61e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d620:	430b      	orrs	r3, r1
 800d622:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d62a:	f023 010f 	bic.w	r1, r3, #15
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	430a      	orrs	r2, r1
 800d638:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4aa6      	ldr	r2, [pc, #664]	@ (800d8d8 <UART_SetConfig+0x334>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d177      	bne.n	800d734 <UART_SetConfig+0x190>
 800d644:	4ba5      	ldr	r3, [pc, #660]	@ (800d8dc <UART_SetConfig+0x338>)
 800d646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d648:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d64c:	2b28      	cmp	r3, #40	@ 0x28
 800d64e:	d86d      	bhi.n	800d72c <UART_SetConfig+0x188>
 800d650:	a201      	add	r2, pc, #4	@ (adr r2, 800d658 <UART_SetConfig+0xb4>)
 800d652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d656:	bf00      	nop
 800d658:	0800d6fd 	.word	0x0800d6fd
 800d65c:	0800d72d 	.word	0x0800d72d
 800d660:	0800d72d 	.word	0x0800d72d
 800d664:	0800d72d 	.word	0x0800d72d
 800d668:	0800d72d 	.word	0x0800d72d
 800d66c:	0800d72d 	.word	0x0800d72d
 800d670:	0800d72d 	.word	0x0800d72d
 800d674:	0800d72d 	.word	0x0800d72d
 800d678:	0800d705 	.word	0x0800d705
 800d67c:	0800d72d 	.word	0x0800d72d
 800d680:	0800d72d 	.word	0x0800d72d
 800d684:	0800d72d 	.word	0x0800d72d
 800d688:	0800d72d 	.word	0x0800d72d
 800d68c:	0800d72d 	.word	0x0800d72d
 800d690:	0800d72d 	.word	0x0800d72d
 800d694:	0800d72d 	.word	0x0800d72d
 800d698:	0800d70d 	.word	0x0800d70d
 800d69c:	0800d72d 	.word	0x0800d72d
 800d6a0:	0800d72d 	.word	0x0800d72d
 800d6a4:	0800d72d 	.word	0x0800d72d
 800d6a8:	0800d72d 	.word	0x0800d72d
 800d6ac:	0800d72d 	.word	0x0800d72d
 800d6b0:	0800d72d 	.word	0x0800d72d
 800d6b4:	0800d72d 	.word	0x0800d72d
 800d6b8:	0800d715 	.word	0x0800d715
 800d6bc:	0800d72d 	.word	0x0800d72d
 800d6c0:	0800d72d 	.word	0x0800d72d
 800d6c4:	0800d72d 	.word	0x0800d72d
 800d6c8:	0800d72d 	.word	0x0800d72d
 800d6cc:	0800d72d 	.word	0x0800d72d
 800d6d0:	0800d72d 	.word	0x0800d72d
 800d6d4:	0800d72d 	.word	0x0800d72d
 800d6d8:	0800d71d 	.word	0x0800d71d
 800d6dc:	0800d72d 	.word	0x0800d72d
 800d6e0:	0800d72d 	.word	0x0800d72d
 800d6e4:	0800d72d 	.word	0x0800d72d
 800d6e8:	0800d72d 	.word	0x0800d72d
 800d6ec:	0800d72d 	.word	0x0800d72d
 800d6f0:	0800d72d 	.word	0x0800d72d
 800d6f4:	0800d72d 	.word	0x0800d72d
 800d6f8:	0800d725 	.word	0x0800d725
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d702:	e222      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d704:	2304      	movs	r3, #4
 800d706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d70a:	e21e      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d70c:	2308      	movs	r3, #8
 800d70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d712:	e21a      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d714:	2310      	movs	r3, #16
 800d716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d71a:	e216      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d71c:	2320      	movs	r3, #32
 800d71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d722:	e212      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d724:	2340      	movs	r3, #64	@ 0x40
 800d726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d72a:	e20e      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d72c:	2380      	movs	r3, #128	@ 0x80
 800d72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d732:	e20a      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a69      	ldr	r2, [pc, #420]	@ (800d8e0 <UART_SetConfig+0x33c>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d130      	bne.n	800d7a0 <UART_SetConfig+0x1fc>
 800d73e:	4b67      	ldr	r3, [pc, #412]	@ (800d8dc <UART_SetConfig+0x338>)
 800d740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d742:	f003 0307 	and.w	r3, r3, #7
 800d746:	2b05      	cmp	r3, #5
 800d748:	d826      	bhi.n	800d798 <UART_SetConfig+0x1f4>
 800d74a:	a201      	add	r2, pc, #4	@ (adr r2, 800d750 <UART_SetConfig+0x1ac>)
 800d74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d750:	0800d769 	.word	0x0800d769
 800d754:	0800d771 	.word	0x0800d771
 800d758:	0800d779 	.word	0x0800d779
 800d75c:	0800d781 	.word	0x0800d781
 800d760:	0800d789 	.word	0x0800d789
 800d764:	0800d791 	.word	0x0800d791
 800d768:	2300      	movs	r3, #0
 800d76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d76e:	e1ec      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d770:	2304      	movs	r3, #4
 800d772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d776:	e1e8      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d778:	2308      	movs	r3, #8
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d77e:	e1e4      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d780:	2310      	movs	r3, #16
 800d782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d786:	e1e0      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d788:	2320      	movs	r3, #32
 800d78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d78e:	e1dc      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d790:	2340      	movs	r3, #64	@ 0x40
 800d792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d796:	e1d8      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d798:	2380      	movs	r3, #128	@ 0x80
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d79e:	e1d4      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a4f      	ldr	r2, [pc, #316]	@ (800d8e4 <UART_SetConfig+0x340>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d130      	bne.n	800d80c <UART_SetConfig+0x268>
 800d7aa:	4b4c      	ldr	r3, [pc, #304]	@ (800d8dc <UART_SetConfig+0x338>)
 800d7ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7ae:	f003 0307 	and.w	r3, r3, #7
 800d7b2:	2b05      	cmp	r3, #5
 800d7b4:	d826      	bhi.n	800d804 <UART_SetConfig+0x260>
 800d7b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d7bc <UART_SetConfig+0x218>)
 800d7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7bc:	0800d7d5 	.word	0x0800d7d5
 800d7c0:	0800d7dd 	.word	0x0800d7dd
 800d7c4:	0800d7e5 	.word	0x0800d7e5
 800d7c8:	0800d7ed 	.word	0x0800d7ed
 800d7cc:	0800d7f5 	.word	0x0800d7f5
 800d7d0:	0800d7fd 	.word	0x0800d7fd
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7da:	e1b6      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d7dc:	2304      	movs	r3, #4
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7e2:	e1b2      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d7e4:	2308      	movs	r3, #8
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ea:	e1ae      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d7ec:	2310      	movs	r3, #16
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7f2:	e1aa      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d7f4:	2320      	movs	r3, #32
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7fa:	e1a6      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d7fc:	2340      	movs	r3, #64	@ 0x40
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d802:	e1a2      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d804:	2380      	movs	r3, #128	@ 0x80
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d80a:	e19e      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a35      	ldr	r2, [pc, #212]	@ (800d8e8 <UART_SetConfig+0x344>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d130      	bne.n	800d878 <UART_SetConfig+0x2d4>
 800d816:	4b31      	ldr	r3, [pc, #196]	@ (800d8dc <UART_SetConfig+0x338>)
 800d818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d81a:	f003 0307 	and.w	r3, r3, #7
 800d81e:	2b05      	cmp	r3, #5
 800d820:	d826      	bhi.n	800d870 <UART_SetConfig+0x2cc>
 800d822:	a201      	add	r2, pc, #4	@ (adr r2, 800d828 <UART_SetConfig+0x284>)
 800d824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d828:	0800d841 	.word	0x0800d841
 800d82c:	0800d849 	.word	0x0800d849
 800d830:	0800d851 	.word	0x0800d851
 800d834:	0800d859 	.word	0x0800d859
 800d838:	0800d861 	.word	0x0800d861
 800d83c:	0800d869 	.word	0x0800d869
 800d840:	2300      	movs	r3, #0
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d846:	e180      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d848:	2304      	movs	r3, #4
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d84e:	e17c      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d850:	2308      	movs	r3, #8
 800d852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d856:	e178      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d858:	2310      	movs	r3, #16
 800d85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d85e:	e174      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d860:	2320      	movs	r3, #32
 800d862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d866:	e170      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d868:	2340      	movs	r3, #64	@ 0x40
 800d86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d86e:	e16c      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d870:	2380      	movs	r3, #128	@ 0x80
 800d872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d876:	e168      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a1b      	ldr	r2, [pc, #108]	@ (800d8ec <UART_SetConfig+0x348>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d142      	bne.n	800d908 <UART_SetConfig+0x364>
 800d882:	4b16      	ldr	r3, [pc, #88]	@ (800d8dc <UART_SetConfig+0x338>)
 800d884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d886:	f003 0307 	and.w	r3, r3, #7
 800d88a:	2b05      	cmp	r3, #5
 800d88c:	d838      	bhi.n	800d900 <UART_SetConfig+0x35c>
 800d88e:	a201      	add	r2, pc, #4	@ (adr r2, 800d894 <UART_SetConfig+0x2f0>)
 800d890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d894:	0800d8ad 	.word	0x0800d8ad
 800d898:	0800d8b5 	.word	0x0800d8b5
 800d89c:	0800d8bd 	.word	0x0800d8bd
 800d8a0:	0800d8c5 	.word	0x0800d8c5
 800d8a4:	0800d8f1 	.word	0x0800d8f1
 800d8a8:	0800d8f9 	.word	0x0800d8f9
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8b2:	e14a      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d8b4:	2304      	movs	r3, #4
 800d8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ba:	e146      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d8bc:	2308      	movs	r3, #8
 800d8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8c2:	e142      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d8c4:	2310      	movs	r3, #16
 800d8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ca:	e13e      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d8cc:	cfff69f3 	.word	0xcfff69f3
 800d8d0:	58000c00 	.word	0x58000c00
 800d8d4:	11fff4ff 	.word	0x11fff4ff
 800d8d8:	40011000 	.word	0x40011000
 800d8dc:	58024400 	.word	0x58024400
 800d8e0:	40004400 	.word	0x40004400
 800d8e4:	40004800 	.word	0x40004800
 800d8e8:	40004c00 	.word	0x40004c00
 800d8ec:	40005000 	.word	0x40005000
 800d8f0:	2320      	movs	r3, #32
 800d8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8f6:	e128      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d8f8:	2340      	movs	r3, #64	@ 0x40
 800d8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8fe:	e124      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d900:	2380      	movs	r3, #128	@ 0x80
 800d902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d906:	e120      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	4acb      	ldr	r2, [pc, #812]	@ (800dc3c <UART_SetConfig+0x698>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d176      	bne.n	800da00 <UART_SetConfig+0x45c>
 800d912:	4bcb      	ldr	r3, [pc, #812]	@ (800dc40 <UART_SetConfig+0x69c>)
 800d914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d916:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d91a:	2b28      	cmp	r3, #40	@ 0x28
 800d91c:	d86c      	bhi.n	800d9f8 <UART_SetConfig+0x454>
 800d91e:	a201      	add	r2, pc, #4	@ (adr r2, 800d924 <UART_SetConfig+0x380>)
 800d920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d924:	0800d9c9 	.word	0x0800d9c9
 800d928:	0800d9f9 	.word	0x0800d9f9
 800d92c:	0800d9f9 	.word	0x0800d9f9
 800d930:	0800d9f9 	.word	0x0800d9f9
 800d934:	0800d9f9 	.word	0x0800d9f9
 800d938:	0800d9f9 	.word	0x0800d9f9
 800d93c:	0800d9f9 	.word	0x0800d9f9
 800d940:	0800d9f9 	.word	0x0800d9f9
 800d944:	0800d9d1 	.word	0x0800d9d1
 800d948:	0800d9f9 	.word	0x0800d9f9
 800d94c:	0800d9f9 	.word	0x0800d9f9
 800d950:	0800d9f9 	.word	0x0800d9f9
 800d954:	0800d9f9 	.word	0x0800d9f9
 800d958:	0800d9f9 	.word	0x0800d9f9
 800d95c:	0800d9f9 	.word	0x0800d9f9
 800d960:	0800d9f9 	.word	0x0800d9f9
 800d964:	0800d9d9 	.word	0x0800d9d9
 800d968:	0800d9f9 	.word	0x0800d9f9
 800d96c:	0800d9f9 	.word	0x0800d9f9
 800d970:	0800d9f9 	.word	0x0800d9f9
 800d974:	0800d9f9 	.word	0x0800d9f9
 800d978:	0800d9f9 	.word	0x0800d9f9
 800d97c:	0800d9f9 	.word	0x0800d9f9
 800d980:	0800d9f9 	.word	0x0800d9f9
 800d984:	0800d9e1 	.word	0x0800d9e1
 800d988:	0800d9f9 	.word	0x0800d9f9
 800d98c:	0800d9f9 	.word	0x0800d9f9
 800d990:	0800d9f9 	.word	0x0800d9f9
 800d994:	0800d9f9 	.word	0x0800d9f9
 800d998:	0800d9f9 	.word	0x0800d9f9
 800d99c:	0800d9f9 	.word	0x0800d9f9
 800d9a0:	0800d9f9 	.word	0x0800d9f9
 800d9a4:	0800d9e9 	.word	0x0800d9e9
 800d9a8:	0800d9f9 	.word	0x0800d9f9
 800d9ac:	0800d9f9 	.word	0x0800d9f9
 800d9b0:	0800d9f9 	.word	0x0800d9f9
 800d9b4:	0800d9f9 	.word	0x0800d9f9
 800d9b8:	0800d9f9 	.word	0x0800d9f9
 800d9bc:	0800d9f9 	.word	0x0800d9f9
 800d9c0:	0800d9f9 	.word	0x0800d9f9
 800d9c4:	0800d9f1 	.word	0x0800d9f1
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ce:	e0bc      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d9d0:	2304      	movs	r3, #4
 800d9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9d6:	e0b8      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d9d8:	2308      	movs	r3, #8
 800d9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9de:	e0b4      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d9e0:	2310      	movs	r3, #16
 800d9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9e6:	e0b0      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d9e8:	2320      	movs	r3, #32
 800d9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ee:	e0ac      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d9f0:	2340      	movs	r3, #64	@ 0x40
 800d9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9f6:	e0a8      	b.n	800db4a <UART_SetConfig+0x5a6>
 800d9f8:	2380      	movs	r3, #128	@ 0x80
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9fe:	e0a4      	b.n	800db4a <UART_SetConfig+0x5a6>
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a8f      	ldr	r2, [pc, #572]	@ (800dc44 <UART_SetConfig+0x6a0>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d130      	bne.n	800da6c <UART_SetConfig+0x4c8>
 800da0a:	4b8d      	ldr	r3, [pc, #564]	@ (800dc40 <UART_SetConfig+0x69c>)
 800da0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da0e:	f003 0307 	and.w	r3, r3, #7
 800da12:	2b05      	cmp	r3, #5
 800da14:	d826      	bhi.n	800da64 <UART_SetConfig+0x4c0>
 800da16:	a201      	add	r2, pc, #4	@ (adr r2, 800da1c <UART_SetConfig+0x478>)
 800da18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da1c:	0800da35 	.word	0x0800da35
 800da20:	0800da3d 	.word	0x0800da3d
 800da24:	0800da45 	.word	0x0800da45
 800da28:	0800da4d 	.word	0x0800da4d
 800da2c:	0800da55 	.word	0x0800da55
 800da30:	0800da5d 	.word	0x0800da5d
 800da34:	2300      	movs	r3, #0
 800da36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da3a:	e086      	b.n	800db4a <UART_SetConfig+0x5a6>
 800da3c:	2304      	movs	r3, #4
 800da3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da42:	e082      	b.n	800db4a <UART_SetConfig+0x5a6>
 800da44:	2308      	movs	r3, #8
 800da46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da4a:	e07e      	b.n	800db4a <UART_SetConfig+0x5a6>
 800da4c:	2310      	movs	r3, #16
 800da4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da52:	e07a      	b.n	800db4a <UART_SetConfig+0x5a6>
 800da54:	2320      	movs	r3, #32
 800da56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da5a:	e076      	b.n	800db4a <UART_SetConfig+0x5a6>
 800da5c:	2340      	movs	r3, #64	@ 0x40
 800da5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da62:	e072      	b.n	800db4a <UART_SetConfig+0x5a6>
 800da64:	2380      	movs	r3, #128	@ 0x80
 800da66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da6a:	e06e      	b.n	800db4a <UART_SetConfig+0x5a6>
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a75      	ldr	r2, [pc, #468]	@ (800dc48 <UART_SetConfig+0x6a4>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d130      	bne.n	800dad8 <UART_SetConfig+0x534>
 800da76:	4b72      	ldr	r3, [pc, #456]	@ (800dc40 <UART_SetConfig+0x69c>)
 800da78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da7a:	f003 0307 	and.w	r3, r3, #7
 800da7e:	2b05      	cmp	r3, #5
 800da80:	d826      	bhi.n	800dad0 <UART_SetConfig+0x52c>
 800da82:	a201      	add	r2, pc, #4	@ (adr r2, 800da88 <UART_SetConfig+0x4e4>)
 800da84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da88:	0800daa1 	.word	0x0800daa1
 800da8c:	0800daa9 	.word	0x0800daa9
 800da90:	0800dab1 	.word	0x0800dab1
 800da94:	0800dab9 	.word	0x0800dab9
 800da98:	0800dac1 	.word	0x0800dac1
 800da9c:	0800dac9 	.word	0x0800dac9
 800daa0:	2300      	movs	r3, #0
 800daa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daa6:	e050      	b.n	800db4a <UART_SetConfig+0x5a6>
 800daa8:	2304      	movs	r3, #4
 800daaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daae:	e04c      	b.n	800db4a <UART_SetConfig+0x5a6>
 800dab0:	2308      	movs	r3, #8
 800dab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dab6:	e048      	b.n	800db4a <UART_SetConfig+0x5a6>
 800dab8:	2310      	movs	r3, #16
 800daba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dabe:	e044      	b.n	800db4a <UART_SetConfig+0x5a6>
 800dac0:	2320      	movs	r3, #32
 800dac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dac6:	e040      	b.n	800db4a <UART_SetConfig+0x5a6>
 800dac8:	2340      	movs	r3, #64	@ 0x40
 800daca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dace:	e03c      	b.n	800db4a <UART_SetConfig+0x5a6>
 800dad0:	2380      	movs	r3, #128	@ 0x80
 800dad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dad6:	e038      	b.n	800db4a <UART_SetConfig+0x5a6>
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a5b      	ldr	r2, [pc, #364]	@ (800dc4c <UART_SetConfig+0x6a8>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d130      	bne.n	800db44 <UART_SetConfig+0x5a0>
 800dae2:	4b57      	ldr	r3, [pc, #348]	@ (800dc40 <UART_SetConfig+0x69c>)
 800dae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dae6:	f003 0307 	and.w	r3, r3, #7
 800daea:	2b05      	cmp	r3, #5
 800daec:	d826      	bhi.n	800db3c <UART_SetConfig+0x598>
 800daee:	a201      	add	r2, pc, #4	@ (adr r2, 800daf4 <UART_SetConfig+0x550>)
 800daf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf4:	0800db0d 	.word	0x0800db0d
 800daf8:	0800db15 	.word	0x0800db15
 800dafc:	0800db1d 	.word	0x0800db1d
 800db00:	0800db25 	.word	0x0800db25
 800db04:	0800db2d 	.word	0x0800db2d
 800db08:	0800db35 	.word	0x0800db35
 800db0c:	2302      	movs	r3, #2
 800db0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db12:	e01a      	b.n	800db4a <UART_SetConfig+0x5a6>
 800db14:	2304      	movs	r3, #4
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db1a:	e016      	b.n	800db4a <UART_SetConfig+0x5a6>
 800db1c:	2308      	movs	r3, #8
 800db1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db22:	e012      	b.n	800db4a <UART_SetConfig+0x5a6>
 800db24:	2310      	movs	r3, #16
 800db26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db2a:	e00e      	b.n	800db4a <UART_SetConfig+0x5a6>
 800db2c:	2320      	movs	r3, #32
 800db2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db32:	e00a      	b.n	800db4a <UART_SetConfig+0x5a6>
 800db34:	2340      	movs	r3, #64	@ 0x40
 800db36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db3a:	e006      	b.n	800db4a <UART_SetConfig+0x5a6>
 800db3c:	2380      	movs	r3, #128	@ 0x80
 800db3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db42:	e002      	b.n	800db4a <UART_SetConfig+0x5a6>
 800db44:	2380      	movs	r3, #128	@ 0x80
 800db46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a3f      	ldr	r2, [pc, #252]	@ (800dc4c <UART_SetConfig+0x6a8>)
 800db50:	4293      	cmp	r3, r2
 800db52:	f040 80f8 	bne.w	800dd46 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800db56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800db5a:	2b20      	cmp	r3, #32
 800db5c:	dc46      	bgt.n	800dbec <UART_SetConfig+0x648>
 800db5e:	2b02      	cmp	r3, #2
 800db60:	f2c0 8082 	blt.w	800dc68 <UART_SetConfig+0x6c4>
 800db64:	3b02      	subs	r3, #2
 800db66:	2b1e      	cmp	r3, #30
 800db68:	d87e      	bhi.n	800dc68 <UART_SetConfig+0x6c4>
 800db6a:	a201      	add	r2, pc, #4	@ (adr r2, 800db70 <UART_SetConfig+0x5cc>)
 800db6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db70:	0800dbf3 	.word	0x0800dbf3
 800db74:	0800dc69 	.word	0x0800dc69
 800db78:	0800dbfb 	.word	0x0800dbfb
 800db7c:	0800dc69 	.word	0x0800dc69
 800db80:	0800dc69 	.word	0x0800dc69
 800db84:	0800dc69 	.word	0x0800dc69
 800db88:	0800dc0b 	.word	0x0800dc0b
 800db8c:	0800dc69 	.word	0x0800dc69
 800db90:	0800dc69 	.word	0x0800dc69
 800db94:	0800dc69 	.word	0x0800dc69
 800db98:	0800dc69 	.word	0x0800dc69
 800db9c:	0800dc69 	.word	0x0800dc69
 800dba0:	0800dc69 	.word	0x0800dc69
 800dba4:	0800dc69 	.word	0x0800dc69
 800dba8:	0800dc1b 	.word	0x0800dc1b
 800dbac:	0800dc69 	.word	0x0800dc69
 800dbb0:	0800dc69 	.word	0x0800dc69
 800dbb4:	0800dc69 	.word	0x0800dc69
 800dbb8:	0800dc69 	.word	0x0800dc69
 800dbbc:	0800dc69 	.word	0x0800dc69
 800dbc0:	0800dc69 	.word	0x0800dc69
 800dbc4:	0800dc69 	.word	0x0800dc69
 800dbc8:	0800dc69 	.word	0x0800dc69
 800dbcc:	0800dc69 	.word	0x0800dc69
 800dbd0:	0800dc69 	.word	0x0800dc69
 800dbd4:	0800dc69 	.word	0x0800dc69
 800dbd8:	0800dc69 	.word	0x0800dc69
 800dbdc:	0800dc69 	.word	0x0800dc69
 800dbe0:	0800dc69 	.word	0x0800dc69
 800dbe4:	0800dc69 	.word	0x0800dc69
 800dbe8:	0800dc5b 	.word	0x0800dc5b
 800dbec:	2b40      	cmp	r3, #64	@ 0x40
 800dbee:	d037      	beq.n	800dc60 <UART_SetConfig+0x6bc>
 800dbf0:	e03a      	b.n	800dc68 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dbf2:	f7fd f8e1 	bl	800adb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800dbf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dbf8:	e03c      	b.n	800dc74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fd f8f0 	bl	800ade4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc08:	e034      	b.n	800dc74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc0a:	f107 0318 	add.w	r3, r7, #24
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7fd fa3c 	bl	800b08c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc18:	e02c      	b.n	800dc74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc1a:	4b09      	ldr	r3, [pc, #36]	@ (800dc40 <UART_SetConfig+0x69c>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f003 0320 	and.w	r3, r3, #32
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d016      	beq.n	800dc54 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc26:	4b06      	ldr	r3, [pc, #24]	@ (800dc40 <UART_SetConfig+0x69c>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	08db      	lsrs	r3, r3, #3
 800dc2c:	f003 0303 	and.w	r3, r3, #3
 800dc30:	4a07      	ldr	r2, [pc, #28]	@ (800dc50 <UART_SetConfig+0x6ac>)
 800dc32:	fa22 f303 	lsr.w	r3, r2, r3
 800dc36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc38:	e01c      	b.n	800dc74 <UART_SetConfig+0x6d0>
 800dc3a:	bf00      	nop
 800dc3c:	40011400 	.word	0x40011400
 800dc40:	58024400 	.word	0x58024400
 800dc44:	40007800 	.word	0x40007800
 800dc48:	40007c00 	.word	0x40007c00
 800dc4c:	58000c00 	.word	0x58000c00
 800dc50:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800dc54:	4b9d      	ldr	r3, [pc, #628]	@ (800decc <UART_SetConfig+0x928>)
 800dc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc58:	e00c      	b.n	800dc74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc5a:	4b9d      	ldr	r3, [pc, #628]	@ (800ded0 <UART_SetConfig+0x92c>)
 800dc5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc5e:	e009      	b.n	800dc74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc66:	e005      	b.n	800dc74 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dc72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dc74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f000 81de 	beq.w	800e038 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc80:	4a94      	ldr	r2, [pc, #592]	@ (800ded4 <UART_SetConfig+0x930>)
 800dc82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc86:	461a      	mov	r2, r3
 800dc88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc8a:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc8e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	685a      	ldr	r2, [r3, #4]
 800dc94:	4613      	mov	r3, r2
 800dc96:	005b      	lsls	r3, r3, #1
 800dc98:	4413      	add	r3, r2
 800dc9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d305      	bcc.n	800dcac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d903      	bls.n	800dcb4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dcac:	2301      	movs	r3, #1
 800dcae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dcb2:	e1c1      	b.n	800e038 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dcb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	60bb      	str	r3, [r7, #8]
 800dcba:	60fa      	str	r2, [r7, #12]
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcc0:	4a84      	ldr	r2, [pc, #528]	@ (800ded4 <UART_SetConfig+0x930>)
 800dcc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	2200      	movs	r2, #0
 800dcca:	603b      	str	r3, [r7, #0]
 800dccc:	607a      	str	r2, [r7, #4]
 800dcce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dcd6:	f7f2 faff 	bl	80002d8 <__aeabi_uldivmod>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	460b      	mov	r3, r1
 800dcde:	4610      	mov	r0, r2
 800dce0:	4619      	mov	r1, r3
 800dce2:	f04f 0200 	mov.w	r2, #0
 800dce6:	f04f 0300 	mov.w	r3, #0
 800dcea:	020b      	lsls	r3, r1, #8
 800dcec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dcf0:	0202      	lsls	r2, r0, #8
 800dcf2:	6979      	ldr	r1, [r7, #20]
 800dcf4:	6849      	ldr	r1, [r1, #4]
 800dcf6:	0849      	lsrs	r1, r1, #1
 800dcf8:	2000      	movs	r0, #0
 800dcfa:	460c      	mov	r4, r1
 800dcfc:	4605      	mov	r5, r0
 800dcfe:	eb12 0804 	adds.w	r8, r2, r4
 800dd02:	eb43 0905 	adc.w	r9, r3, r5
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	469a      	mov	sl, r3
 800dd0e:	4693      	mov	fp, r2
 800dd10:	4652      	mov	r2, sl
 800dd12:	465b      	mov	r3, fp
 800dd14:	4640      	mov	r0, r8
 800dd16:	4649      	mov	r1, r9
 800dd18:	f7f2 fade 	bl	80002d8 <__aeabi_uldivmod>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	460b      	mov	r3, r1
 800dd20:	4613      	mov	r3, r2
 800dd22:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dd2a:	d308      	bcc.n	800dd3e <UART_SetConfig+0x79a>
 800dd2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd32:	d204      	bcs.n	800dd3e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd3a:	60da      	str	r2, [r3, #12]
 800dd3c:	e17c      	b.n	800e038 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dd44:	e178      	b.n	800e038 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	69db      	ldr	r3, [r3, #28]
 800dd4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd4e:	f040 80c5 	bne.w	800dedc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dd52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dd56:	2b20      	cmp	r3, #32
 800dd58:	dc48      	bgt.n	800ddec <UART_SetConfig+0x848>
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	db7b      	blt.n	800de56 <UART_SetConfig+0x8b2>
 800dd5e:	2b20      	cmp	r3, #32
 800dd60:	d879      	bhi.n	800de56 <UART_SetConfig+0x8b2>
 800dd62:	a201      	add	r2, pc, #4	@ (adr r2, 800dd68 <UART_SetConfig+0x7c4>)
 800dd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd68:	0800ddf3 	.word	0x0800ddf3
 800dd6c:	0800ddfb 	.word	0x0800ddfb
 800dd70:	0800de57 	.word	0x0800de57
 800dd74:	0800de57 	.word	0x0800de57
 800dd78:	0800de03 	.word	0x0800de03
 800dd7c:	0800de57 	.word	0x0800de57
 800dd80:	0800de57 	.word	0x0800de57
 800dd84:	0800de57 	.word	0x0800de57
 800dd88:	0800de13 	.word	0x0800de13
 800dd8c:	0800de57 	.word	0x0800de57
 800dd90:	0800de57 	.word	0x0800de57
 800dd94:	0800de57 	.word	0x0800de57
 800dd98:	0800de57 	.word	0x0800de57
 800dd9c:	0800de57 	.word	0x0800de57
 800dda0:	0800de57 	.word	0x0800de57
 800dda4:	0800de57 	.word	0x0800de57
 800dda8:	0800de23 	.word	0x0800de23
 800ddac:	0800de57 	.word	0x0800de57
 800ddb0:	0800de57 	.word	0x0800de57
 800ddb4:	0800de57 	.word	0x0800de57
 800ddb8:	0800de57 	.word	0x0800de57
 800ddbc:	0800de57 	.word	0x0800de57
 800ddc0:	0800de57 	.word	0x0800de57
 800ddc4:	0800de57 	.word	0x0800de57
 800ddc8:	0800de57 	.word	0x0800de57
 800ddcc:	0800de57 	.word	0x0800de57
 800ddd0:	0800de57 	.word	0x0800de57
 800ddd4:	0800de57 	.word	0x0800de57
 800ddd8:	0800de57 	.word	0x0800de57
 800dddc:	0800de57 	.word	0x0800de57
 800dde0:	0800de57 	.word	0x0800de57
 800dde4:	0800de57 	.word	0x0800de57
 800dde8:	0800de49 	.word	0x0800de49
 800ddec:	2b40      	cmp	r3, #64	@ 0x40
 800ddee:	d02e      	beq.n	800de4e <UART_SetConfig+0x8aa>
 800ddf0:	e031      	b.n	800de56 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddf2:	f7fb f82b 	bl	8008e4c <HAL_RCC_GetPCLK1Freq>
 800ddf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ddf8:	e033      	b.n	800de62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddfa:	f7fb f83d 	bl	8008e78 <HAL_RCC_GetPCLK2Freq>
 800ddfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800de00:	e02f      	b.n	800de62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800de06:	4618      	mov	r0, r3
 800de08:	f7fc ffec 	bl	800ade4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de10:	e027      	b.n	800de62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de12:	f107 0318 	add.w	r3, r7, #24
 800de16:	4618      	mov	r0, r3
 800de18:	f7fd f938 	bl	800b08c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de20:	e01f      	b.n	800de62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de22:	4b2d      	ldr	r3, [pc, #180]	@ (800ded8 <UART_SetConfig+0x934>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f003 0320 	and.w	r3, r3, #32
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d009      	beq.n	800de42 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de2e:	4b2a      	ldr	r3, [pc, #168]	@ (800ded8 <UART_SetConfig+0x934>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	08db      	lsrs	r3, r3, #3
 800de34:	f003 0303 	and.w	r3, r3, #3
 800de38:	4a24      	ldr	r2, [pc, #144]	@ (800decc <UART_SetConfig+0x928>)
 800de3a:	fa22 f303 	lsr.w	r3, r2, r3
 800de3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de40:	e00f      	b.n	800de62 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800de42:	4b22      	ldr	r3, [pc, #136]	@ (800decc <UART_SetConfig+0x928>)
 800de44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de46:	e00c      	b.n	800de62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de48:	4b21      	ldr	r3, [pc, #132]	@ (800ded0 <UART_SetConfig+0x92c>)
 800de4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de4c:	e009      	b.n	800de62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de54:	e005      	b.n	800de62 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800de56:	2300      	movs	r3, #0
 800de58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800de5a:	2301      	movs	r3, #1
 800de5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800de60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800de62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de64:	2b00      	cmp	r3, #0
 800de66:	f000 80e7 	beq.w	800e038 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de6e:	4a19      	ldr	r2, [pc, #100]	@ (800ded4 <UART_SetConfig+0x930>)
 800de70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de74:	461a      	mov	r2, r3
 800de76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de78:	fbb3 f3f2 	udiv	r3, r3, r2
 800de7c:	005a      	lsls	r2, r3, #1
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	085b      	lsrs	r3, r3, #1
 800de84:	441a      	add	r2, r3
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800de8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de92:	2b0f      	cmp	r3, #15
 800de94:	d916      	bls.n	800dec4 <UART_SetConfig+0x920>
 800de96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de9c:	d212      	bcs.n	800dec4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800de9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	f023 030f 	bic.w	r3, r3, #15
 800dea6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deaa:	085b      	lsrs	r3, r3, #1
 800deac:	b29b      	uxth	r3, r3
 800deae:	f003 0307 	and.w	r3, r3, #7
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800deb6:	4313      	orrs	r3, r2
 800deb8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dec0:	60da      	str	r2, [r3, #12]
 800dec2:	e0b9      	b.n	800e038 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dec4:	2301      	movs	r3, #1
 800dec6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800deca:	e0b5      	b.n	800e038 <UART_SetConfig+0xa94>
 800decc:	03d09000 	.word	0x03d09000
 800ded0:	003d0900 	.word	0x003d0900
 800ded4:	0800f0dc 	.word	0x0800f0dc
 800ded8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800dedc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dee0:	2b20      	cmp	r3, #32
 800dee2:	dc49      	bgt.n	800df78 <UART_SetConfig+0x9d4>
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	db7c      	blt.n	800dfe2 <UART_SetConfig+0xa3e>
 800dee8:	2b20      	cmp	r3, #32
 800deea:	d87a      	bhi.n	800dfe2 <UART_SetConfig+0xa3e>
 800deec:	a201      	add	r2, pc, #4	@ (adr r2, 800def4 <UART_SetConfig+0x950>)
 800deee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def2:	bf00      	nop
 800def4:	0800df7f 	.word	0x0800df7f
 800def8:	0800df87 	.word	0x0800df87
 800defc:	0800dfe3 	.word	0x0800dfe3
 800df00:	0800dfe3 	.word	0x0800dfe3
 800df04:	0800df8f 	.word	0x0800df8f
 800df08:	0800dfe3 	.word	0x0800dfe3
 800df0c:	0800dfe3 	.word	0x0800dfe3
 800df10:	0800dfe3 	.word	0x0800dfe3
 800df14:	0800df9f 	.word	0x0800df9f
 800df18:	0800dfe3 	.word	0x0800dfe3
 800df1c:	0800dfe3 	.word	0x0800dfe3
 800df20:	0800dfe3 	.word	0x0800dfe3
 800df24:	0800dfe3 	.word	0x0800dfe3
 800df28:	0800dfe3 	.word	0x0800dfe3
 800df2c:	0800dfe3 	.word	0x0800dfe3
 800df30:	0800dfe3 	.word	0x0800dfe3
 800df34:	0800dfaf 	.word	0x0800dfaf
 800df38:	0800dfe3 	.word	0x0800dfe3
 800df3c:	0800dfe3 	.word	0x0800dfe3
 800df40:	0800dfe3 	.word	0x0800dfe3
 800df44:	0800dfe3 	.word	0x0800dfe3
 800df48:	0800dfe3 	.word	0x0800dfe3
 800df4c:	0800dfe3 	.word	0x0800dfe3
 800df50:	0800dfe3 	.word	0x0800dfe3
 800df54:	0800dfe3 	.word	0x0800dfe3
 800df58:	0800dfe3 	.word	0x0800dfe3
 800df5c:	0800dfe3 	.word	0x0800dfe3
 800df60:	0800dfe3 	.word	0x0800dfe3
 800df64:	0800dfe3 	.word	0x0800dfe3
 800df68:	0800dfe3 	.word	0x0800dfe3
 800df6c:	0800dfe3 	.word	0x0800dfe3
 800df70:	0800dfe3 	.word	0x0800dfe3
 800df74:	0800dfd5 	.word	0x0800dfd5
 800df78:	2b40      	cmp	r3, #64	@ 0x40
 800df7a:	d02e      	beq.n	800dfda <UART_SetConfig+0xa36>
 800df7c:	e031      	b.n	800dfe2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df7e:	f7fa ff65 	bl	8008e4c <HAL_RCC_GetPCLK1Freq>
 800df82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800df84:	e033      	b.n	800dfee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df86:	f7fa ff77 	bl	8008e78 <HAL_RCC_GetPCLK2Freq>
 800df8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800df8c:	e02f      	b.n	800dfee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800df92:	4618      	mov	r0, r3
 800df94:	f7fc ff26 	bl	800ade4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df9c:	e027      	b.n	800dfee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df9e:	f107 0318 	add.w	r3, r7, #24
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fd f872 	bl	800b08c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfac:	e01f      	b.n	800dfee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dfae:	4b2d      	ldr	r3, [pc, #180]	@ (800e064 <UART_SetConfig+0xac0>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f003 0320 	and.w	r3, r3, #32
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d009      	beq.n	800dfce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dfba:	4b2a      	ldr	r3, [pc, #168]	@ (800e064 <UART_SetConfig+0xac0>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	08db      	lsrs	r3, r3, #3
 800dfc0:	f003 0303 	and.w	r3, r3, #3
 800dfc4:	4a28      	ldr	r2, [pc, #160]	@ (800e068 <UART_SetConfig+0xac4>)
 800dfc6:	fa22 f303 	lsr.w	r3, r2, r3
 800dfca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dfcc:	e00f      	b.n	800dfee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800dfce:	4b26      	ldr	r3, [pc, #152]	@ (800e068 <UART_SetConfig+0xac4>)
 800dfd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfd2:	e00c      	b.n	800dfee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dfd4:	4b25      	ldr	r3, [pc, #148]	@ (800e06c <UART_SetConfig+0xac8>)
 800dfd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfd8:	e009      	b.n	800dfee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dfda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dfde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfe0:	e005      	b.n	800dfee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dfec:	bf00      	nop
    }

    if (pclk != 0U)
 800dfee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d021      	beq.n	800e038 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dff8:	4a1d      	ldr	r2, [pc, #116]	@ (800e070 <UART_SetConfig+0xacc>)
 800dffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dffe:	461a      	mov	r2, r3
 800e000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e002:	fbb3 f2f2 	udiv	r2, r3, r2
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	085b      	lsrs	r3, r3, #1
 800e00c:	441a      	add	r2, r3
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	fbb2 f3f3 	udiv	r3, r2, r3
 800e016:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e01a:	2b0f      	cmp	r3, #15
 800e01c:	d909      	bls.n	800e032 <UART_SetConfig+0xa8e>
 800e01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e024:	d205      	bcs.n	800e032 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e028:	b29a      	uxth	r2, r3
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	60da      	str	r2, [r3, #12]
 800e030:	e002      	b.n	800e038 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e032:	2301      	movs	r3, #1
 800e034:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	2201      	movs	r2, #1
 800e03c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	2201      	movs	r2, #1
 800e044:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	2200      	movs	r2, #0
 800e04c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	2200      	movs	r2, #0
 800e052:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e054:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3748      	adds	r7, #72	@ 0x48
 800e05c:	46bd      	mov	sp, r7
 800e05e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e062:	bf00      	nop
 800e064:	58024400 	.word	0x58024400
 800e068:	03d09000 	.word	0x03d09000
 800e06c:	003d0900 	.word	0x003d0900
 800e070:	0800f0dc 	.word	0x0800f0dc

0800e074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e080:	f003 0308 	and.w	r3, r3, #8
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00a      	beq.n	800e09e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	430a      	orrs	r2, r1
 800e09c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0a2:	f003 0301 	and.w	r3, r3, #1
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d00a      	beq.n	800e0c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	685b      	ldr	r3, [r3, #4]
 800e0b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	430a      	orrs	r2, r1
 800e0be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0c4:	f003 0302 	and.w	r3, r3, #2
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d00a      	beq.n	800e0e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	430a      	orrs	r2, r1
 800e0e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0e6:	f003 0304 	and.w	r3, r3, #4
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d00a      	beq.n	800e104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	430a      	orrs	r2, r1
 800e102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e108:	f003 0310 	and.w	r3, r3, #16
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00a      	beq.n	800e126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	430a      	orrs	r2, r1
 800e124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e12a:	f003 0320 	and.w	r3, r3, #32
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00a      	beq.n	800e148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	430a      	orrs	r2, r1
 800e146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e14c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e150:	2b00      	cmp	r3, #0
 800e152:	d01a      	beq.n	800e18a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	430a      	orrs	r2, r1
 800e168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e16e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e172:	d10a      	bne.n	800e18a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	430a      	orrs	r2, r1
 800e188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e18e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00a      	beq.n	800e1ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	430a      	orrs	r2, r1
 800e1aa:	605a      	str	r2, [r3, #4]
  }
}
 800e1ac:	bf00      	nop
 800e1ae:	370c      	adds	r7, #12
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr

0800e1b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b098      	sub	sp, #96	@ 0x60
 800e1bc:	af02      	add	r7, sp, #8
 800e1be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e1c8:	f7f5 fb5e 	bl	8003888 <HAL_GetTick>
 800e1cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f003 0308 	and.w	r3, r3, #8
 800e1d8:	2b08      	cmp	r3, #8
 800e1da:	d12f      	bne.n	800e23c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e1dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e1e0:	9300      	str	r3, [sp, #0]
 800e1e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f000 f88e 	bl	800e30c <UART_WaitOnFlagUntilTimeout>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d022      	beq.n	800e23c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1fe:	e853 3f00 	ldrex	r3, [r3]
 800e202:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e20a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	461a      	mov	r2, r3
 800e212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e214:	647b      	str	r3, [r7, #68]	@ 0x44
 800e216:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e218:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e21a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e21c:	e841 2300 	strex	r3, r2, [r1]
 800e220:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e224:	2b00      	cmp	r3, #0
 800e226:	d1e6      	bne.n	800e1f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2220      	movs	r2, #32
 800e22c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2200      	movs	r2, #0
 800e234:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e238:	2303      	movs	r3, #3
 800e23a:	e063      	b.n	800e304 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f003 0304 	and.w	r3, r3, #4
 800e246:	2b04      	cmp	r3, #4
 800e248:	d149      	bne.n	800e2de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e24a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e24e:	9300      	str	r3, [sp, #0]
 800e250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e252:	2200      	movs	r2, #0
 800e254:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f000 f857 	bl	800e30c <UART_WaitOnFlagUntilTimeout>
 800e25e:	4603      	mov	r3, r0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d03c      	beq.n	800e2de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e26c:	e853 3f00 	ldrex	r3, [r3]
 800e270:	623b      	str	r3, [r7, #32]
   return(result);
 800e272:	6a3b      	ldr	r3, [r7, #32]
 800e274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e278:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	461a      	mov	r2, r3
 800e280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e282:	633b      	str	r3, [r7, #48]	@ 0x30
 800e284:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e28a:	e841 2300 	strex	r3, r2, [r1]
 800e28e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e292:	2b00      	cmp	r3, #0
 800e294:	d1e6      	bne.n	800e264 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	3308      	adds	r3, #8
 800e29c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	e853 3f00 	ldrex	r3, [r3]
 800e2a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f023 0301 	bic.w	r3, r3, #1
 800e2ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	3308      	adds	r3, #8
 800e2b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e2b6:	61fa      	str	r2, [r7, #28]
 800e2b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ba:	69b9      	ldr	r1, [r7, #24]
 800e2bc:	69fa      	ldr	r2, [r7, #28]
 800e2be:	e841 2300 	strex	r3, r2, [r1]
 800e2c2:	617b      	str	r3, [r7, #20]
   return(result);
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d1e5      	bne.n	800e296 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2220      	movs	r2, #32
 800e2ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e2da:	2303      	movs	r3, #3
 800e2dc:	e012      	b.n	800e304 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2220      	movs	r2, #32
 800e2e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2220      	movs	r2, #32
 800e2ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e302:	2300      	movs	r3, #0
}
 800e304:	4618      	mov	r0, r3
 800e306:	3758      	adds	r7, #88	@ 0x58
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	603b      	str	r3, [r7, #0]
 800e318:	4613      	mov	r3, r2
 800e31a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e31c:	e04f      	b.n	800e3be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e31e:	69bb      	ldr	r3, [r7, #24]
 800e320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e324:	d04b      	beq.n	800e3be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e326:	f7f5 faaf 	bl	8003888 <HAL_GetTick>
 800e32a:	4602      	mov	r2, r0
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	69ba      	ldr	r2, [r7, #24]
 800e332:	429a      	cmp	r2, r3
 800e334:	d302      	bcc.n	800e33c <UART_WaitOnFlagUntilTimeout+0x30>
 800e336:	69bb      	ldr	r3, [r7, #24]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d101      	bne.n	800e340 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e33c:	2303      	movs	r3, #3
 800e33e:	e04e      	b.n	800e3de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f003 0304 	and.w	r3, r3, #4
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d037      	beq.n	800e3be <UART_WaitOnFlagUntilTimeout+0xb2>
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	2b80      	cmp	r3, #128	@ 0x80
 800e352:	d034      	beq.n	800e3be <UART_WaitOnFlagUntilTimeout+0xb2>
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	2b40      	cmp	r3, #64	@ 0x40
 800e358:	d031      	beq.n	800e3be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	69db      	ldr	r3, [r3, #28]
 800e360:	f003 0308 	and.w	r3, r3, #8
 800e364:	2b08      	cmp	r3, #8
 800e366:	d110      	bne.n	800e38a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2208      	movs	r2, #8
 800e36e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f000 f839 	bl	800e3e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2208      	movs	r2, #8
 800e37a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2200      	movs	r2, #0
 800e382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e386:	2301      	movs	r3, #1
 800e388:	e029      	b.n	800e3de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	69db      	ldr	r3, [r3, #28]
 800e390:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e398:	d111      	bne.n	800e3be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e3a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f000 f81f 	bl	800e3e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2220      	movs	r2, #32
 800e3ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e3ba:	2303      	movs	r3, #3
 800e3bc:	e00f      	b.n	800e3de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	69da      	ldr	r2, [r3, #28]
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	4013      	ands	r3, r2
 800e3c8:	68ba      	ldr	r2, [r7, #8]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	bf0c      	ite	eq
 800e3ce:	2301      	moveq	r3, #1
 800e3d0:	2300      	movne	r3, #0
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	79fb      	ldrb	r3, [r7, #7]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d0a0      	beq.n	800e31e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e3dc:	2300      	movs	r3, #0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3710      	adds	r7, #16
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
	...

0800e3e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b095      	sub	sp, #84	@ 0x54
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3f8:	e853 3f00 	ldrex	r3, [r3]
 800e3fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e400:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e404:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	461a      	mov	r2, r3
 800e40c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e40e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e410:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e412:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e414:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e416:	e841 2300 	strex	r3, r2, [r1]
 800e41a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d1e6      	bne.n	800e3f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	3308      	adds	r3, #8
 800e428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e42a:	6a3b      	ldr	r3, [r7, #32]
 800e42c:	e853 3f00 	ldrex	r3, [r3]
 800e430:	61fb      	str	r3, [r7, #28]
   return(result);
 800e432:	69fa      	ldr	r2, [r7, #28]
 800e434:	4b1e      	ldr	r3, [pc, #120]	@ (800e4b0 <UART_EndRxTransfer+0xc8>)
 800e436:	4013      	ands	r3, r2
 800e438:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	3308      	adds	r3, #8
 800e440:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e444:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e446:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e448:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e44a:	e841 2300 	strex	r3, r2, [r1]
 800e44e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e452:	2b00      	cmp	r3, #0
 800e454:	d1e5      	bne.n	800e422 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d118      	bne.n	800e490 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	e853 3f00 	ldrex	r3, [r3]
 800e46a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	f023 0310 	bic.w	r3, r3, #16
 800e472:	647b      	str	r3, [r7, #68]	@ 0x44
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	461a      	mov	r2, r3
 800e47a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e47c:	61bb      	str	r3, [r7, #24]
 800e47e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e480:	6979      	ldr	r1, [r7, #20]
 800e482:	69ba      	ldr	r2, [r7, #24]
 800e484:	e841 2300 	strex	r3, r2, [r1]
 800e488:	613b      	str	r3, [r7, #16]
   return(result);
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d1e6      	bne.n	800e45e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2220      	movs	r2, #32
 800e494:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2200      	movs	r2, #0
 800e49c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e4a4:	bf00      	nop
 800e4a6:	3754      	adds	r7, #84	@ 0x54
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr
 800e4b0:	effffffe 	.word	0xeffffffe

0800e4b4 <memset>:
 800e4b4:	4402      	add	r2, r0
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d100      	bne.n	800e4be <memset+0xa>
 800e4bc:	4770      	bx	lr
 800e4be:	f803 1b01 	strb.w	r1, [r3], #1
 800e4c2:	e7f9      	b.n	800e4b8 <memset+0x4>

0800e4c4 <__libc_init_array>:
 800e4c4:	b570      	push	{r4, r5, r6, lr}
 800e4c6:	4d0d      	ldr	r5, [pc, #52]	@ (800e4fc <__libc_init_array+0x38>)
 800e4c8:	4c0d      	ldr	r4, [pc, #52]	@ (800e500 <__libc_init_array+0x3c>)
 800e4ca:	1b64      	subs	r4, r4, r5
 800e4cc:	10a4      	asrs	r4, r4, #2
 800e4ce:	2600      	movs	r6, #0
 800e4d0:	42a6      	cmp	r6, r4
 800e4d2:	d109      	bne.n	800e4e8 <__libc_init_array+0x24>
 800e4d4:	4d0b      	ldr	r5, [pc, #44]	@ (800e504 <__libc_init_array+0x40>)
 800e4d6:	4c0c      	ldr	r4, [pc, #48]	@ (800e508 <__libc_init_array+0x44>)
 800e4d8:	f000 fde6 	bl	800f0a8 <_init>
 800e4dc:	1b64      	subs	r4, r4, r5
 800e4de:	10a4      	asrs	r4, r4, #2
 800e4e0:	2600      	movs	r6, #0
 800e4e2:	42a6      	cmp	r6, r4
 800e4e4:	d105      	bne.n	800e4f2 <__libc_init_array+0x2e>
 800e4e6:	bd70      	pop	{r4, r5, r6, pc}
 800e4e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4ec:	4798      	blx	r3
 800e4ee:	3601      	adds	r6, #1
 800e4f0:	e7ee      	b.n	800e4d0 <__libc_init_array+0xc>
 800e4f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4f6:	4798      	blx	r3
 800e4f8:	3601      	adds	r6, #1
 800e4fa:	e7f2      	b.n	800e4e2 <__libc_init_array+0x1e>
 800e4fc:	0800f2d8 	.word	0x0800f2d8
 800e500:	0800f2d8 	.word	0x0800f2d8
 800e504:	0800f2d8 	.word	0x0800f2d8
 800e508:	0800f2dc 	.word	0x0800f2dc
 800e50c:	00000000 	.word	0x00000000

0800e510 <sin>:
 800e510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e512:	eeb0 7b40 	vmov.f64	d7, d0
 800e516:	ee17 3a90 	vmov	r3, s15
 800e51a:	4a21      	ldr	r2, [pc, #132]	@ (800e5a0 <sin+0x90>)
 800e51c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e520:	4293      	cmp	r3, r2
 800e522:	d807      	bhi.n	800e534 <sin+0x24>
 800e524:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800e598 <sin+0x88>
 800e528:	2000      	movs	r0, #0
 800e52a:	b005      	add	sp, #20
 800e52c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e530:	f000 b8a2 	b.w	800e678 <__kernel_sin>
 800e534:	4a1b      	ldr	r2, [pc, #108]	@ (800e5a4 <sin+0x94>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d904      	bls.n	800e544 <sin+0x34>
 800e53a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e53e:	b005      	add	sp, #20
 800e540:	f85d fb04 	ldr.w	pc, [sp], #4
 800e544:	4668      	mov	r0, sp
 800e546:	f000 f8ef 	bl	800e728 <__ieee754_rem_pio2>
 800e54a:	f000 0003 	and.w	r0, r0, #3
 800e54e:	2801      	cmp	r0, #1
 800e550:	d00a      	beq.n	800e568 <sin+0x58>
 800e552:	2802      	cmp	r0, #2
 800e554:	d00f      	beq.n	800e576 <sin+0x66>
 800e556:	b9c0      	cbnz	r0, 800e58a <sin+0x7a>
 800e558:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e55c:	ed9d 0b00 	vldr	d0, [sp]
 800e560:	2001      	movs	r0, #1
 800e562:	f000 f889 	bl	800e678 <__kernel_sin>
 800e566:	e7ea      	b.n	800e53e <sin+0x2e>
 800e568:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e56c:	ed9d 0b00 	vldr	d0, [sp]
 800e570:	f000 f81a 	bl	800e5a8 <__kernel_cos>
 800e574:	e7e3      	b.n	800e53e <sin+0x2e>
 800e576:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e57a:	ed9d 0b00 	vldr	d0, [sp]
 800e57e:	2001      	movs	r0, #1
 800e580:	f000 f87a 	bl	800e678 <__kernel_sin>
 800e584:	eeb1 0b40 	vneg.f64	d0, d0
 800e588:	e7d9      	b.n	800e53e <sin+0x2e>
 800e58a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e58e:	ed9d 0b00 	vldr	d0, [sp]
 800e592:	f000 f809 	bl	800e5a8 <__kernel_cos>
 800e596:	e7f5      	b.n	800e584 <sin+0x74>
	...
 800e5a0:	3fe921fb 	.word	0x3fe921fb
 800e5a4:	7fefffff 	.word	0x7fefffff

0800e5a8 <__kernel_cos>:
 800e5a8:	eeb0 5b40 	vmov.f64	d5, d0
 800e5ac:	ee15 1a90 	vmov	r1, s11
 800e5b0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e5b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800e5b8:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800e5bc:	d204      	bcs.n	800e5c8 <__kernel_cos+0x20>
 800e5be:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800e5c2:	ee17 3a90 	vmov	r3, s15
 800e5c6:	b343      	cbz	r3, 800e61a <__kernel_cos+0x72>
 800e5c8:	ee25 6b05 	vmul.f64	d6, d5, d5
 800e5cc:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800e5d0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800e640 <__kernel_cos+0x98>
 800e5d4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800e648 <__kernel_cos+0xa0>
 800e5d8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e5dc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800e650 <__kernel_cos+0xa8>
 800e5e0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e5e4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800e658 <__kernel_cos+0xb0>
 800e5e8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e5ec:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800e660 <__kernel_cos+0xb8>
 800e5f0:	4b1f      	ldr	r3, [pc, #124]	@ (800e670 <__kernel_cos+0xc8>)
 800e5f2:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e5f6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800e668 <__kernel_cos+0xc0>
 800e5fa:	4299      	cmp	r1, r3
 800e5fc:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e600:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e604:	ee24 4b06 	vmul.f64	d4, d4, d6
 800e608:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e60c:	eea6 1b04 	vfma.f64	d1, d6, d4
 800e610:	d804      	bhi.n	800e61c <__kernel_cos+0x74>
 800e612:	ee37 7b41 	vsub.f64	d7, d7, d1
 800e616:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e61a:	4770      	bx	lr
 800e61c:	4b15      	ldr	r3, [pc, #84]	@ (800e674 <__kernel_cos+0xcc>)
 800e61e:	4299      	cmp	r1, r3
 800e620:	d809      	bhi.n	800e636 <__kernel_cos+0x8e>
 800e622:	2200      	movs	r2, #0
 800e624:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800e628:	ec43 2b16 	vmov	d6, r2, r3
 800e62c:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e630:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e634:	e7ed      	b.n	800e612 <__kernel_cos+0x6a>
 800e636:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800e63a:	e7f7      	b.n	800e62c <__kernel_cos+0x84>
 800e63c:	f3af 8000 	nop.w
 800e640:	be8838d4 	.word	0xbe8838d4
 800e644:	bda8fae9 	.word	0xbda8fae9
 800e648:	bdb4b1c4 	.word	0xbdb4b1c4
 800e64c:	3e21ee9e 	.word	0x3e21ee9e
 800e650:	809c52ad 	.word	0x809c52ad
 800e654:	be927e4f 	.word	0xbe927e4f
 800e658:	19cb1590 	.word	0x19cb1590
 800e65c:	3efa01a0 	.word	0x3efa01a0
 800e660:	16c15177 	.word	0x16c15177
 800e664:	bf56c16c 	.word	0xbf56c16c
 800e668:	5555554c 	.word	0x5555554c
 800e66c:	3fa55555 	.word	0x3fa55555
 800e670:	3fd33332 	.word	0x3fd33332
 800e674:	3fe90000 	.word	0x3fe90000

0800e678 <__kernel_sin>:
 800e678:	ee10 3a90 	vmov	r3, s1
 800e67c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e680:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800e684:	d204      	bcs.n	800e690 <__kernel_sin+0x18>
 800e686:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e68a:	ee17 3a90 	vmov	r3, s15
 800e68e:	b35b      	cbz	r3, 800e6e8 <__kernel_sin+0x70>
 800e690:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e694:	ee20 5b06 	vmul.f64	d5, d0, d6
 800e698:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800e6f0 <__kernel_sin+0x78>
 800e69c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800e6f8 <__kernel_sin+0x80>
 800e6a0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e6a4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800e700 <__kernel_sin+0x88>
 800e6a8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e6ac:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800e708 <__kernel_sin+0x90>
 800e6b0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e6b4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800e710 <__kernel_sin+0x98>
 800e6b8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e6bc:	b930      	cbnz	r0, 800e6cc <__kernel_sin+0x54>
 800e6be:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800e718 <__kernel_sin+0xa0>
 800e6c2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e6c6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800e6ca:	4770      	bx	lr
 800e6cc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800e6d0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800e6d4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800e6d8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800e6dc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800e720 <__kernel_sin+0xa8>
 800e6e0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800e6e4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop
 800e6ec:	f3af 8000 	nop.w
 800e6f0:	5acfd57c 	.word	0x5acfd57c
 800e6f4:	3de5d93a 	.word	0x3de5d93a
 800e6f8:	8a2b9ceb 	.word	0x8a2b9ceb
 800e6fc:	be5ae5e6 	.word	0xbe5ae5e6
 800e700:	57b1fe7d 	.word	0x57b1fe7d
 800e704:	3ec71de3 	.word	0x3ec71de3
 800e708:	19c161d5 	.word	0x19c161d5
 800e70c:	bf2a01a0 	.word	0xbf2a01a0
 800e710:	1110f8a6 	.word	0x1110f8a6
 800e714:	3f811111 	.word	0x3f811111
 800e718:	55555549 	.word	0x55555549
 800e71c:	bfc55555 	.word	0xbfc55555
 800e720:	55555549 	.word	0x55555549
 800e724:	3fc55555 	.word	0x3fc55555

0800e728 <__ieee754_rem_pio2>:
 800e728:	b570      	push	{r4, r5, r6, lr}
 800e72a:	eeb0 7b40 	vmov.f64	d7, d0
 800e72e:	ee17 5a90 	vmov	r5, s15
 800e732:	4b99      	ldr	r3, [pc, #612]	@ (800e998 <__ieee754_rem_pio2+0x270>)
 800e734:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e738:	429e      	cmp	r6, r3
 800e73a:	b088      	sub	sp, #32
 800e73c:	4604      	mov	r4, r0
 800e73e:	d807      	bhi.n	800e750 <__ieee754_rem_pio2+0x28>
 800e740:	2200      	movs	r2, #0
 800e742:	2300      	movs	r3, #0
 800e744:	ed84 0b00 	vstr	d0, [r4]
 800e748:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e74c:	2000      	movs	r0, #0
 800e74e:	e01b      	b.n	800e788 <__ieee754_rem_pio2+0x60>
 800e750:	4b92      	ldr	r3, [pc, #584]	@ (800e99c <__ieee754_rem_pio2+0x274>)
 800e752:	429e      	cmp	r6, r3
 800e754:	d83b      	bhi.n	800e7ce <__ieee754_rem_pio2+0xa6>
 800e756:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800e75a:	2d00      	cmp	r5, #0
 800e75c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800e958 <__ieee754_rem_pio2+0x230>
 800e760:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800e764:	dd19      	ble.n	800e79a <__ieee754_rem_pio2+0x72>
 800e766:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e76a:	429e      	cmp	r6, r3
 800e76c:	d00e      	beq.n	800e78c <__ieee754_rem_pio2+0x64>
 800e76e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800e960 <__ieee754_rem_pio2+0x238>
 800e772:	ee37 6b45 	vsub.f64	d6, d7, d5
 800e776:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e77a:	ed84 6b00 	vstr	d6, [r4]
 800e77e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e782:	ed84 7b02 	vstr	d7, [r4, #8]
 800e786:	2001      	movs	r0, #1
 800e788:	b008      	add	sp, #32
 800e78a:	bd70      	pop	{r4, r5, r6, pc}
 800e78c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800e968 <__ieee754_rem_pio2+0x240>
 800e790:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800e970 <__ieee754_rem_pio2+0x248>
 800e794:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e798:	e7eb      	b.n	800e772 <__ieee754_rem_pio2+0x4a>
 800e79a:	429e      	cmp	r6, r3
 800e79c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e7a0:	d00e      	beq.n	800e7c0 <__ieee754_rem_pio2+0x98>
 800e7a2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800e960 <__ieee754_rem_pio2+0x238>
 800e7a6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e7aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e7ae:	ed84 6b00 	vstr	d6, [r4]
 800e7b2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ba:	ed84 7b02 	vstr	d7, [r4, #8]
 800e7be:	e7e3      	b.n	800e788 <__ieee754_rem_pio2+0x60>
 800e7c0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800e968 <__ieee754_rem_pio2+0x240>
 800e7c4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800e970 <__ieee754_rem_pio2+0x248>
 800e7c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e7cc:	e7eb      	b.n	800e7a6 <__ieee754_rem_pio2+0x7e>
 800e7ce:	4b74      	ldr	r3, [pc, #464]	@ (800e9a0 <__ieee754_rem_pio2+0x278>)
 800e7d0:	429e      	cmp	r6, r3
 800e7d2:	d870      	bhi.n	800e8b6 <__ieee754_rem_pio2+0x18e>
 800e7d4:	f000 f8ec 	bl	800e9b0 <fabs>
 800e7d8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e7dc:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800e978 <__ieee754_rem_pio2+0x250>
 800e7e0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e7e4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e7e8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e7ec:	ee17 0a90 	vmov	r0, s15
 800e7f0:	eeb1 4b45 	vneg.f64	d4, d5
 800e7f4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800e958 <__ieee754_rem_pio2+0x230>
 800e7f8:	eea5 0b47 	vfms.f64	d0, d5, d7
 800e7fc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800e960 <__ieee754_rem_pio2+0x238>
 800e800:	281f      	cmp	r0, #31
 800e802:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e806:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e80a:	dc05      	bgt.n	800e818 <__ieee754_rem_pio2+0xf0>
 800e80c:	4b65      	ldr	r3, [pc, #404]	@ (800e9a4 <__ieee754_rem_pio2+0x27c>)
 800e80e:	1e42      	subs	r2, r0, #1
 800e810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e814:	42b3      	cmp	r3, r6
 800e816:	d109      	bne.n	800e82c <__ieee754_rem_pio2+0x104>
 800e818:	ee16 3a90 	vmov	r3, s13
 800e81c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e820:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800e824:	2b10      	cmp	r3, #16
 800e826:	ea4f 5226 	mov.w	r2, r6, asr #20
 800e82a:	dc02      	bgt.n	800e832 <__ieee754_rem_pio2+0x10a>
 800e82c:	ed84 6b00 	vstr	d6, [r4]
 800e830:	e01a      	b.n	800e868 <__ieee754_rem_pio2+0x140>
 800e832:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800e968 <__ieee754_rem_pio2+0x240>
 800e836:	eeb0 6b40 	vmov.f64	d6, d0
 800e83a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800e83e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e842:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e846:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800e970 <__ieee754_rem_pio2+0x248>
 800e84a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800e84e:	ee36 3b47 	vsub.f64	d3, d6, d7
 800e852:	ee13 3a90 	vmov	r3, s7
 800e856:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e85a:	1ad3      	subs	r3, r2, r3
 800e85c:	2b31      	cmp	r3, #49	@ 0x31
 800e85e:	dc17      	bgt.n	800e890 <__ieee754_rem_pio2+0x168>
 800e860:	eeb0 0b46 	vmov.f64	d0, d6
 800e864:	ed84 3b00 	vstr	d3, [r4]
 800e868:	ed94 6b00 	vldr	d6, [r4]
 800e86c:	2d00      	cmp	r5, #0
 800e86e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e872:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e876:	ed84 0b02 	vstr	d0, [r4, #8]
 800e87a:	da85      	bge.n	800e788 <__ieee754_rem_pio2+0x60>
 800e87c:	eeb1 6b46 	vneg.f64	d6, d6
 800e880:	eeb1 0b40 	vneg.f64	d0, d0
 800e884:	ed84 6b00 	vstr	d6, [r4]
 800e888:	ed84 0b02 	vstr	d0, [r4, #8]
 800e88c:	4240      	negs	r0, r0
 800e88e:	e77b      	b.n	800e788 <__ieee754_rem_pio2+0x60>
 800e890:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800e980 <__ieee754_rem_pio2+0x258>
 800e894:	eeb0 0b46 	vmov.f64	d0, d6
 800e898:	eea4 0b07 	vfma.f64	d0, d4, d7
 800e89c:	ee36 6b40 	vsub.f64	d6, d6, d0
 800e8a0:	eea4 6b07 	vfma.f64	d6, d4, d7
 800e8a4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800e988 <__ieee754_rem_pio2+0x260>
 800e8a8:	eeb0 7b46 	vmov.f64	d7, d6
 800e8ac:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800e8b0:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e8b4:	e7ba      	b.n	800e82c <__ieee754_rem_pio2+0x104>
 800e8b6:	4b3c      	ldr	r3, [pc, #240]	@ (800e9a8 <__ieee754_rem_pio2+0x280>)
 800e8b8:	429e      	cmp	r6, r3
 800e8ba:	d906      	bls.n	800e8ca <__ieee754_rem_pio2+0x1a2>
 800e8bc:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e8c0:	ed80 7b02 	vstr	d7, [r0, #8]
 800e8c4:	ed80 7b00 	vstr	d7, [r0]
 800e8c8:	e740      	b.n	800e74c <__ieee754_rem_pio2+0x24>
 800e8ca:	ee10 3a10 	vmov	r3, s0
 800e8ce:	1532      	asrs	r2, r6, #20
 800e8d0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800e8da:	ec41 0b17 	vmov	d7, r0, r1
 800e8de:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e8e2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800e990 <__ieee754_rem_pio2+0x268>
 800e8e6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e8ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e8ee:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e8f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e8f6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e8fa:	a808      	add	r0, sp, #32
 800e8fc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e900:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e904:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e908:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e90c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e910:	2103      	movs	r1, #3
 800e912:	ed30 7b02 	vldmdb	r0!, {d7}
 800e916:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e91e:	460b      	mov	r3, r1
 800e920:	f101 31ff 	add.w	r1, r1, #4294967295
 800e924:	d0f5      	beq.n	800e912 <__ieee754_rem_pio2+0x1ea>
 800e926:	4921      	ldr	r1, [pc, #132]	@ (800e9ac <__ieee754_rem_pio2+0x284>)
 800e928:	9101      	str	r1, [sp, #4]
 800e92a:	2102      	movs	r1, #2
 800e92c:	9100      	str	r1, [sp, #0]
 800e92e:	a802      	add	r0, sp, #8
 800e930:	4621      	mov	r1, r4
 800e932:	f000 f845 	bl	800e9c0 <__kernel_rem_pio2>
 800e936:	2d00      	cmp	r5, #0
 800e938:	f6bf af26 	bge.w	800e788 <__ieee754_rem_pio2+0x60>
 800e93c:	ed94 7b00 	vldr	d7, [r4]
 800e940:	eeb1 7b47 	vneg.f64	d7, d7
 800e944:	ed84 7b00 	vstr	d7, [r4]
 800e948:	ed94 7b02 	vldr	d7, [r4, #8]
 800e94c:	eeb1 7b47 	vneg.f64	d7, d7
 800e950:	ed84 7b02 	vstr	d7, [r4, #8]
 800e954:	e79a      	b.n	800e88c <__ieee754_rem_pio2+0x164>
 800e956:	bf00      	nop
 800e958:	54400000 	.word	0x54400000
 800e95c:	3ff921fb 	.word	0x3ff921fb
 800e960:	1a626331 	.word	0x1a626331
 800e964:	3dd0b461 	.word	0x3dd0b461
 800e968:	1a600000 	.word	0x1a600000
 800e96c:	3dd0b461 	.word	0x3dd0b461
 800e970:	2e037073 	.word	0x2e037073
 800e974:	3ba3198a 	.word	0x3ba3198a
 800e978:	6dc9c883 	.word	0x6dc9c883
 800e97c:	3fe45f30 	.word	0x3fe45f30
 800e980:	2e000000 	.word	0x2e000000
 800e984:	3ba3198a 	.word	0x3ba3198a
 800e988:	252049c1 	.word	0x252049c1
 800e98c:	397b839a 	.word	0x397b839a
 800e990:	00000000 	.word	0x00000000
 800e994:	41700000 	.word	0x41700000
 800e998:	3fe921fb 	.word	0x3fe921fb
 800e99c:	4002d97b 	.word	0x4002d97b
 800e9a0:	413921fb 	.word	0x413921fb
 800e9a4:	0800f0f4 	.word	0x0800f0f4
 800e9a8:	7fefffff 	.word	0x7fefffff
 800e9ac:	0800f174 	.word	0x0800f174

0800e9b0 <fabs>:
 800e9b0:	ec51 0b10 	vmov	r0, r1, d0
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e9ba:	ec43 2b10 	vmov	d0, r2, r3
 800e9be:	4770      	bx	lr

0800e9c0 <__kernel_rem_pio2>:
 800e9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c4:	ed2d 8b06 	vpush	{d8-d10}
 800e9c8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800e9cc:	469b      	mov	fp, r3
 800e9ce:	9001      	str	r0, [sp, #4]
 800e9d0:	4bbb      	ldr	r3, [pc, #748]	@ (800ecc0 <__kernel_rem_pio2+0x300>)
 800e9d2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800e9d4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800e9d8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800e9dc:	f112 0f14 	cmn.w	r2, #20
 800e9e0:	bfa8      	it	ge
 800e9e2:	1ed3      	subge	r3, r2, #3
 800e9e4:	f10b 3aff 	add.w	sl, fp, #4294967295
 800e9e8:	bfb8      	it	lt
 800e9ea:	2300      	movlt	r3, #0
 800e9ec:	f06f 0517 	mvn.w	r5, #23
 800e9f0:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800eca8 <__kernel_rem_pio2+0x2e8>
 800e9f4:	bfa4      	itt	ge
 800e9f6:	2018      	movge	r0, #24
 800e9f8:	fb93 f3f0 	sdivge	r3, r3, r0
 800e9fc:	fb03 5505 	mla	r5, r3, r5, r5
 800ea00:	eba3 040a 	sub.w	r4, r3, sl
 800ea04:	4415      	add	r5, r2
 800ea06:	460f      	mov	r7, r1
 800ea08:	eb09 060a 	add.w	r6, r9, sl
 800ea0c:	a81a      	add	r0, sp, #104	@ 0x68
 800ea0e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800ea12:	2200      	movs	r2, #0
 800ea14:	42b2      	cmp	r2, r6
 800ea16:	dd0e      	ble.n	800ea36 <__kernel_rem_pio2+0x76>
 800ea18:	aa1a      	add	r2, sp, #104	@ 0x68
 800ea1a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800ea1e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800ea22:	2600      	movs	r6, #0
 800ea24:	454e      	cmp	r6, r9
 800ea26:	dc25      	bgt.n	800ea74 <__kernel_rem_pio2+0xb4>
 800ea28:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800eca8 <__kernel_rem_pio2+0x2e8>
 800ea2c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ea30:	4614      	mov	r4, r2
 800ea32:	2000      	movs	r0, #0
 800ea34:	e015      	b.n	800ea62 <__kernel_rem_pio2+0xa2>
 800ea36:	42d4      	cmn	r4, r2
 800ea38:	d409      	bmi.n	800ea4e <__kernel_rem_pio2+0x8e>
 800ea3a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800ea3e:	ee07 1a90 	vmov	s15, r1
 800ea42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ea46:	eca0 7b02 	vstmia	r0!, {d7}
 800ea4a:	3201      	adds	r2, #1
 800ea4c:	e7e2      	b.n	800ea14 <__kernel_rem_pio2+0x54>
 800ea4e:	eeb0 7b46 	vmov.f64	d7, d6
 800ea52:	e7f8      	b.n	800ea46 <__kernel_rem_pio2+0x86>
 800ea54:	ecbc 5b02 	vldmia	ip!, {d5}
 800ea58:	ed94 6b00 	vldr	d6, [r4]
 800ea5c:	3001      	adds	r0, #1
 800ea5e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ea62:	4550      	cmp	r0, sl
 800ea64:	f1a4 0408 	sub.w	r4, r4, #8
 800ea68:	ddf4      	ble.n	800ea54 <__kernel_rem_pio2+0x94>
 800ea6a:	ecae 7b02 	vstmia	lr!, {d7}
 800ea6e:	3601      	adds	r6, #1
 800ea70:	3208      	adds	r2, #8
 800ea72:	e7d7      	b.n	800ea24 <__kernel_rem_pio2+0x64>
 800ea74:	aa06      	add	r2, sp, #24
 800ea76:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800ecb0 <__kernel_rem_pio2+0x2f0>
 800ea7a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800ecb8 <__kernel_rem_pio2+0x2f8>
 800ea7e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800ea82:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800ea86:	9203      	str	r2, [sp, #12]
 800ea88:	9302      	str	r3, [sp, #8]
 800ea8a:	464c      	mov	r4, r9
 800ea8c:	00e3      	lsls	r3, r4, #3
 800ea8e:	9304      	str	r3, [sp, #16]
 800ea90:	ab92      	add	r3, sp, #584	@ 0x248
 800ea92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea96:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800ea9a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800ea9c:	ab06      	add	r3, sp, #24
 800ea9e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800eaa2:	461e      	mov	r6, r3
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	f1a2 0208 	sub.w	r2, r2, #8
 800eaac:	dc4a      	bgt.n	800eb44 <__kernel_rem_pio2+0x184>
 800eaae:	4628      	mov	r0, r5
 800eab0:	9305      	str	r3, [sp, #20]
 800eab2:	f000 fa01 	bl	800eeb8 <scalbn>
 800eab6:	eeb0 8b40 	vmov.f64	d8, d0
 800eaba:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800eabe:	ee28 0b00 	vmul.f64	d0, d8, d0
 800eac2:	f000 fa79 	bl	800efb8 <floor>
 800eac6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800eaca:	eea0 8b47 	vfms.f64	d8, d0, d7
 800eace:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ead2:	2d00      	cmp	r5, #0
 800ead4:	ee17 8a90 	vmov	r8, s15
 800ead8:	9b05      	ldr	r3, [sp, #20]
 800eada:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800eade:	ee38 8b47 	vsub.f64	d8, d8, d7
 800eae2:	dd41      	ble.n	800eb68 <__kernel_rem_pio2+0x1a8>
 800eae4:	1e60      	subs	r0, r4, #1
 800eae6:	aa06      	add	r2, sp, #24
 800eae8:	f1c5 0c18 	rsb	ip, r5, #24
 800eaec:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800eaf0:	fa46 f20c 	asr.w	r2, r6, ip
 800eaf4:	4490      	add	r8, r2
 800eaf6:	fa02 f20c 	lsl.w	r2, r2, ip
 800eafa:	1ab6      	subs	r6, r6, r2
 800eafc:	aa06      	add	r2, sp, #24
 800eafe:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800eb02:	f1c5 0217 	rsb	r2, r5, #23
 800eb06:	4116      	asrs	r6, r2
 800eb08:	2e00      	cmp	r6, #0
 800eb0a:	dd3c      	ble.n	800eb86 <__kernel_rem_pio2+0x1c6>
 800eb0c:	f04f 0c00 	mov.w	ip, #0
 800eb10:	f108 0801 	add.w	r8, r8, #1
 800eb14:	4660      	mov	r0, ip
 800eb16:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800eb1a:	4564      	cmp	r4, ip
 800eb1c:	dc66      	bgt.n	800ebec <__kernel_rem_pio2+0x22c>
 800eb1e:	2d00      	cmp	r5, #0
 800eb20:	dd03      	ble.n	800eb2a <__kernel_rem_pio2+0x16a>
 800eb22:	2d01      	cmp	r5, #1
 800eb24:	d072      	beq.n	800ec0c <__kernel_rem_pio2+0x24c>
 800eb26:	2d02      	cmp	r5, #2
 800eb28:	d07a      	beq.n	800ec20 <__kernel_rem_pio2+0x260>
 800eb2a:	2e02      	cmp	r6, #2
 800eb2c:	d12b      	bne.n	800eb86 <__kernel_rem_pio2+0x1c6>
 800eb2e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800eb32:	ee30 8b48 	vsub.f64	d8, d0, d8
 800eb36:	b330      	cbz	r0, 800eb86 <__kernel_rem_pio2+0x1c6>
 800eb38:	4628      	mov	r0, r5
 800eb3a:	f000 f9bd 	bl	800eeb8 <scalbn>
 800eb3e:	ee38 8b40 	vsub.f64	d8, d8, d0
 800eb42:	e020      	b.n	800eb86 <__kernel_rem_pio2+0x1c6>
 800eb44:	ee20 7b09 	vmul.f64	d7, d0, d9
 800eb48:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800eb4c:	3801      	subs	r0, #1
 800eb4e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800eb52:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800eb56:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800eb5a:	eca6 0a01 	vstmia	r6!, {s0}
 800eb5e:	ed92 0b00 	vldr	d0, [r2]
 800eb62:	ee37 0b00 	vadd.f64	d0, d7, d0
 800eb66:	e79e      	b.n	800eaa6 <__kernel_rem_pio2+0xe6>
 800eb68:	d105      	bne.n	800eb76 <__kernel_rem_pio2+0x1b6>
 800eb6a:	1e62      	subs	r2, r4, #1
 800eb6c:	a906      	add	r1, sp, #24
 800eb6e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800eb72:	15f6      	asrs	r6, r6, #23
 800eb74:	e7c8      	b.n	800eb08 <__kernel_rem_pio2+0x148>
 800eb76:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800eb7a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eb7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb82:	da31      	bge.n	800ebe8 <__kernel_rem_pio2+0x228>
 800eb84:	2600      	movs	r6, #0
 800eb86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb8e:	f040 809b 	bne.w	800ecc8 <__kernel_rem_pio2+0x308>
 800eb92:	1e62      	subs	r2, r4, #1
 800eb94:	2000      	movs	r0, #0
 800eb96:	454a      	cmp	r2, r9
 800eb98:	da49      	bge.n	800ec2e <__kernel_rem_pio2+0x26e>
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	d062      	beq.n	800ec64 <__kernel_rem_pio2+0x2a4>
 800eb9e:	3c01      	subs	r4, #1
 800eba0:	ab06      	add	r3, sp, #24
 800eba2:	3d18      	subs	r5, #24
 800eba4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d0f8      	beq.n	800eb9e <__kernel_rem_pio2+0x1de>
 800ebac:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ebb0:	4628      	mov	r0, r5
 800ebb2:	f000 f981 	bl	800eeb8 <scalbn>
 800ebb6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800ecb0 <__kernel_rem_pio2+0x2f0>
 800ebba:	1c62      	adds	r2, r4, #1
 800ebbc:	a96a      	add	r1, sp, #424	@ 0x1a8
 800ebbe:	00d3      	lsls	r3, r2, #3
 800ebc0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ebc4:	4622      	mov	r2, r4
 800ebc6:	2a00      	cmp	r2, #0
 800ebc8:	f280 80a8 	bge.w	800ed1c <__kernel_rem_pio2+0x35c>
 800ebcc:	4622      	mov	r2, r4
 800ebce:	2a00      	cmp	r2, #0
 800ebd0:	f2c0 80c6 	blt.w	800ed60 <__kernel_rem_pio2+0x3a0>
 800ebd4:	a96a      	add	r1, sp, #424	@ 0x1a8
 800ebd6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ebda:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800eca8 <__kernel_rem_pio2+0x2e8>
 800ebde:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800ecc4 <__kernel_rem_pio2+0x304>
 800ebe2:	2000      	movs	r0, #0
 800ebe4:	1aa1      	subs	r1, r4, r2
 800ebe6:	e0b0      	b.n	800ed4a <__kernel_rem_pio2+0x38a>
 800ebe8:	2602      	movs	r6, #2
 800ebea:	e78f      	b.n	800eb0c <__kernel_rem_pio2+0x14c>
 800ebec:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebf0:	b948      	cbnz	r0, 800ec06 <__kernel_rem_pio2+0x246>
 800ebf2:	b122      	cbz	r2, 800ebfe <__kernel_rem_pio2+0x23e>
 800ebf4:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800ebf8:	f843 2c04 	str.w	r2, [r3, #-4]
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	f10c 0c01 	add.w	ip, ip, #1
 800ec02:	4610      	mov	r0, r2
 800ec04:	e789      	b.n	800eb1a <__kernel_rem_pio2+0x15a>
 800ec06:	ebae 0202 	sub.w	r2, lr, r2
 800ec0a:	e7f5      	b.n	800ebf8 <__kernel_rem_pio2+0x238>
 800ec0c:	1e62      	subs	r2, r4, #1
 800ec0e:	ab06      	add	r3, sp, #24
 800ec10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec14:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ec18:	a906      	add	r1, sp, #24
 800ec1a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ec1e:	e784      	b.n	800eb2a <__kernel_rem_pio2+0x16a>
 800ec20:	1e62      	subs	r2, r4, #1
 800ec22:	ab06      	add	r3, sp, #24
 800ec24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec28:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ec2c:	e7f4      	b.n	800ec18 <__kernel_rem_pio2+0x258>
 800ec2e:	ab06      	add	r3, sp, #24
 800ec30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec34:	3a01      	subs	r2, #1
 800ec36:	4318      	orrs	r0, r3
 800ec38:	e7ad      	b.n	800eb96 <__kernel_rem_pio2+0x1d6>
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800ec40:	2800      	cmp	r0, #0
 800ec42:	d0fa      	beq.n	800ec3a <__kernel_rem_pio2+0x27a>
 800ec44:	9a04      	ldr	r2, [sp, #16]
 800ec46:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800ec4a:	446a      	add	r2, sp
 800ec4c:	eb04 000b 	add.w	r0, r4, fp
 800ec50:	a91a      	add	r1, sp, #104	@ 0x68
 800ec52:	1c66      	adds	r6, r4, #1
 800ec54:	3a98      	subs	r2, #152	@ 0x98
 800ec56:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800ec5a:	4423      	add	r3, r4
 800ec5c:	42b3      	cmp	r3, r6
 800ec5e:	da04      	bge.n	800ec6a <__kernel_rem_pio2+0x2aa>
 800ec60:	461c      	mov	r4, r3
 800ec62:	e713      	b.n	800ea8c <__kernel_rem_pio2+0xcc>
 800ec64:	9a03      	ldr	r2, [sp, #12]
 800ec66:	2301      	movs	r3, #1
 800ec68:	e7e8      	b.n	800ec3c <__kernel_rem_pio2+0x27c>
 800ec6a:	9902      	ldr	r1, [sp, #8]
 800ec6c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ec70:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800ec74:	9104      	str	r1, [sp, #16]
 800ec76:	ee07 1a90 	vmov	s15, r1
 800ec7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ec7e:	2400      	movs	r4, #0
 800ec80:	eca0 7b02 	vstmia	r0!, {d7}
 800ec84:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800eca8 <__kernel_rem_pio2+0x2e8>
 800ec88:	4686      	mov	lr, r0
 800ec8a:	4554      	cmp	r4, sl
 800ec8c:	dd03      	ble.n	800ec96 <__kernel_rem_pio2+0x2d6>
 800ec8e:	eca2 7b02 	vstmia	r2!, {d7}
 800ec92:	3601      	adds	r6, #1
 800ec94:	e7e2      	b.n	800ec5c <__kernel_rem_pio2+0x29c>
 800ec96:	ecbc 5b02 	vldmia	ip!, {d5}
 800ec9a:	ed3e 6b02 	vldmdb	lr!, {d6}
 800ec9e:	3401      	adds	r4, #1
 800eca0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800eca4:	e7f1      	b.n	800ec8a <__kernel_rem_pio2+0x2ca>
 800eca6:	bf00      	nop
	...
 800ecb4:	3e700000 	.word	0x3e700000
 800ecb8:	00000000 	.word	0x00000000
 800ecbc:	41700000 	.word	0x41700000
 800ecc0:	0800f2c0 	.word	0x0800f2c0
 800ecc4:	0800f280 	.word	0x0800f280
 800ecc8:	4268      	negs	r0, r5
 800ecca:	eeb0 0b48 	vmov.f64	d0, d8
 800ecce:	f000 f8f3 	bl	800eeb8 <scalbn>
 800ecd2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800eea0 <__kernel_rem_pio2+0x4e0>
 800ecd6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ecda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecde:	db17      	blt.n	800ed10 <__kernel_rem_pio2+0x350>
 800ece0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800eea8 <__kernel_rem_pio2+0x4e8>
 800ece4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ece8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ecec:	aa06      	add	r2, sp, #24
 800ecee:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800ecf2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800ecf6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ecfa:	3518      	adds	r5, #24
 800ecfc:	ee10 3a10 	vmov	r3, s0
 800ed00:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ed04:	ee17 3a10 	vmov	r3, s14
 800ed08:	3401      	adds	r4, #1
 800ed0a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ed0e:	e74d      	b.n	800ebac <__kernel_rem_pio2+0x1ec>
 800ed10:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ed14:	aa06      	add	r2, sp, #24
 800ed16:	ee10 3a10 	vmov	r3, s0
 800ed1a:	e7f6      	b.n	800ed0a <__kernel_rem_pio2+0x34a>
 800ed1c:	a806      	add	r0, sp, #24
 800ed1e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800ed22:	9001      	str	r0, [sp, #4]
 800ed24:	ee07 0a90 	vmov	s15, r0
 800ed28:	3a01      	subs	r2, #1
 800ed2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ed2e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800ed32:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ed36:	ed21 7b02 	vstmdb	r1!, {d7}
 800ed3a:	e744      	b.n	800ebc6 <__kernel_rem_pio2+0x206>
 800ed3c:	ecbc 5b02 	vldmia	ip!, {d5}
 800ed40:	ecb5 6b02 	vldmia	r5!, {d6}
 800ed44:	3001      	adds	r0, #1
 800ed46:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ed4a:	4548      	cmp	r0, r9
 800ed4c:	dc01      	bgt.n	800ed52 <__kernel_rem_pio2+0x392>
 800ed4e:	4281      	cmp	r1, r0
 800ed50:	daf4      	bge.n	800ed3c <__kernel_rem_pio2+0x37c>
 800ed52:	a842      	add	r0, sp, #264	@ 0x108
 800ed54:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ed58:	ed81 7b00 	vstr	d7, [r1]
 800ed5c:	3a01      	subs	r2, #1
 800ed5e:	e736      	b.n	800ebce <__kernel_rem_pio2+0x20e>
 800ed60:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800ed62:	2a02      	cmp	r2, #2
 800ed64:	dc0a      	bgt.n	800ed7c <__kernel_rem_pio2+0x3bc>
 800ed66:	2a00      	cmp	r2, #0
 800ed68:	dc2d      	bgt.n	800edc6 <__kernel_rem_pio2+0x406>
 800ed6a:	d046      	beq.n	800edfa <__kernel_rem_pio2+0x43a>
 800ed6c:	f008 0007 	and.w	r0, r8, #7
 800ed70:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800ed74:	ecbd 8b06 	vpop	{d8-d10}
 800ed78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed7c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800ed7e:	2a03      	cmp	r2, #3
 800ed80:	d1f4      	bne.n	800ed6c <__kernel_rem_pio2+0x3ac>
 800ed82:	a942      	add	r1, sp, #264	@ 0x108
 800ed84:	f1a3 0208 	sub.w	r2, r3, #8
 800ed88:	440a      	add	r2, r1
 800ed8a:	4611      	mov	r1, r2
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	f1a1 0108 	sub.w	r1, r1, #8
 800ed94:	dc52      	bgt.n	800ee3c <__kernel_rem_pio2+0x47c>
 800ed96:	4621      	mov	r1, r4
 800ed98:	2901      	cmp	r1, #1
 800ed9a:	f1a2 0208 	sub.w	r2, r2, #8
 800ed9e:	dc5d      	bgt.n	800ee5c <__kernel_rem_pio2+0x49c>
 800eda0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800eeb0 <__kernel_rem_pio2+0x4f0>
 800eda4:	aa42      	add	r2, sp, #264	@ 0x108
 800eda6:	4413      	add	r3, r2
 800eda8:	2c01      	cmp	r4, #1
 800edaa:	dc67      	bgt.n	800ee7c <__kernel_rem_pio2+0x4bc>
 800edac:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800edb0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800edb4:	2e00      	cmp	r6, #0
 800edb6:	d167      	bne.n	800ee88 <__kernel_rem_pio2+0x4c8>
 800edb8:	ed87 5b00 	vstr	d5, [r7]
 800edbc:	ed87 6b02 	vstr	d6, [r7, #8]
 800edc0:	ed87 7b04 	vstr	d7, [r7, #16]
 800edc4:	e7d2      	b.n	800ed6c <__kernel_rem_pio2+0x3ac>
 800edc6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800eeb0 <__kernel_rem_pio2+0x4f0>
 800edca:	aa42      	add	r2, sp, #264	@ 0x108
 800edcc:	4413      	add	r3, r2
 800edce:	4622      	mov	r2, r4
 800edd0:	2a00      	cmp	r2, #0
 800edd2:	da24      	bge.n	800ee1e <__kernel_rem_pio2+0x45e>
 800edd4:	b34e      	cbz	r6, 800ee2a <__kernel_rem_pio2+0x46a>
 800edd6:	eeb1 7b46 	vneg.f64	d7, d6
 800edda:	ed87 7b00 	vstr	d7, [r7]
 800edde:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800ede2:	aa44      	add	r2, sp, #272	@ 0x110
 800ede4:	2301      	movs	r3, #1
 800ede6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800edea:	429c      	cmp	r4, r3
 800edec:	da20      	bge.n	800ee30 <__kernel_rem_pio2+0x470>
 800edee:	b10e      	cbz	r6, 800edf4 <__kernel_rem_pio2+0x434>
 800edf0:	eeb1 7b47 	vneg.f64	d7, d7
 800edf4:	ed87 7b02 	vstr	d7, [r7, #8]
 800edf8:	e7b8      	b.n	800ed6c <__kernel_rem_pio2+0x3ac>
 800edfa:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800eeb0 <__kernel_rem_pio2+0x4f0>
 800edfe:	aa42      	add	r2, sp, #264	@ 0x108
 800ee00:	4413      	add	r3, r2
 800ee02:	2c00      	cmp	r4, #0
 800ee04:	da05      	bge.n	800ee12 <__kernel_rem_pio2+0x452>
 800ee06:	b10e      	cbz	r6, 800ee0c <__kernel_rem_pio2+0x44c>
 800ee08:	eeb1 7b47 	vneg.f64	d7, d7
 800ee0c:	ed87 7b00 	vstr	d7, [r7]
 800ee10:	e7ac      	b.n	800ed6c <__kernel_rem_pio2+0x3ac>
 800ee12:	ed33 6b02 	vldmdb	r3!, {d6}
 800ee16:	3c01      	subs	r4, #1
 800ee18:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ee1c:	e7f1      	b.n	800ee02 <__kernel_rem_pio2+0x442>
 800ee1e:	ed33 7b02 	vldmdb	r3!, {d7}
 800ee22:	3a01      	subs	r2, #1
 800ee24:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ee28:	e7d2      	b.n	800edd0 <__kernel_rem_pio2+0x410>
 800ee2a:	eeb0 7b46 	vmov.f64	d7, d6
 800ee2e:	e7d4      	b.n	800edda <__kernel_rem_pio2+0x41a>
 800ee30:	ecb2 6b02 	vldmia	r2!, {d6}
 800ee34:	3301      	adds	r3, #1
 800ee36:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ee3a:	e7d6      	b.n	800edea <__kernel_rem_pio2+0x42a>
 800ee3c:	ed91 7b00 	vldr	d7, [r1]
 800ee40:	ed91 5b02 	vldr	d5, [r1, #8]
 800ee44:	3801      	subs	r0, #1
 800ee46:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ee4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee4e:	ed81 6b00 	vstr	d6, [r1]
 800ee52:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ee56:	ed81 7b02 	vstr	d7, [r1, #8]
 800ee5a:	e798      	b.n	800ed8e <__kernel_rem_pio2+0x3ce>
 800ee5c:	ed92 7b00 	vldr	d7, [r2]
 800ee60:	ed92 5b02 	vldr	d5, [r2, #8]
 800ee64:	3901      	subs	r1, #1
 800ee66:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ee6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee6e:	ed82 6b00 	vstr	d6, [r2]
 800ee72:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ee76:	ed82 7b02 	vstr	d7, [r2, #8]
 800ee7a:	e78d      	b.n	800ed98 <__kernel_rem_pio2+0x3d8>
 800ee7c:	ed33 6b02 	vldmdb	r3!, {d6}
 800ee80:	3c01      	subs	r4, #1
 800ee82:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ee86:	e78f      	b.n	800eda8 <__kernel_rem_pio2+0x3e8>
 800ee88:	eeb1 5b45 	vneg.f64	d5, d5
 800ee8c:	eeb1 6b46 	vneg.f64	d6, d6
 800ee90:	ed87 5b00 	vstr	d5, [r7]
 800ee94:	eeb1 7b47 	vneg.f64	d7, d7
 800ee98:	ed87 6b02 	vstr	d6, [r7, #8]
 800ee9c:	e790      	b.n	800edc0 <__kernel_rem_pio2+0x400>
 800ee9e:	bf00      	nop
 800eea0:	00000000 	.word	0x00000000
 800eea4:	41700000 	.word	0x41700000
 800eea8:	00000000 	.word	0x00000000
 800eeac:	3e700000 	.word	0x3e700000
	...

0800eeb8 <scalbn>:
 800eeb8:	ee10 1a90 	vmov	r1, s1
 800eebc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eec0:	b98b      	cbnz	r3, 800eee6 <scalbn+0x2e>
 800eec2:	ee10 3a10 	vmov	r3, s0
 800eec6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800eeca:	4319      	orrs	r1, r3
 800eecc:	d00a      	beq.n	800eee4 <scalbn+0x2c>
 800eece:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800ef80 <scalbn+0xc8>
 800eed2:	4b37      	ldr	r3, [pc, #220]	@ (800efb0 <scalbn+0xf8>)
 800eed4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800eed8:	4298      	cmp	r0, r3
 800eeda:	da0b      	bge.n	800eef4 <scalbn+0x3c>
 800eedc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ef88 <scalbn+0xd0>
 800eee0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800eee4:	4770      	bx	lr
 800eee6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d107      	bne.n	800eefe <scalbn+0x46>
 800eeee:	ee30 0b00 	vadd.f64	d0, d0, d0
 800eef2:	4770      	bx	lr
 800eef4:	ee10 1a90 	vmov	r1, s1
 800eef8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eefc:	3b36      	subs	r3, #54	@ 0x36
 800eefe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ef02:	4290      	cmp	r0, r2
 800ef04:	dd0d      	ble.n	800ef22 <scalbn+0x6a>
 800ef06:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800ef90 <scalbn+0xd8>
 800ef0a:	ee10 3a90 	vmov	r3, s1
 800ef0e:	eeb0 6b47 	vmov.f64	d6, d7
 800ef12:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800ef98 <scalbn+0xe0>
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	fe27 7b05 	vselge.f64	d7, d7, d5
 800ef1c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800ef20:	4770      	bx	lr
 800ef22:	4418      	add	r0, r3
 800ef24:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800ef28:	4298      	cmp	r0, r3
 800ef2a:	dcec      	bgt.n	800ef06 <scalbn+0x4e>
 800ef2c:	2800      	cmp	r0, #0
 800ef2e:	dd0a      	ble.n	800ef46 <scalbn+0x8e>
 800ef30:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800ef34:	ec53 2b10 	vmov	r2, r3, d0
 800ef38:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800ef3c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800ef40:	ec43 2b10 	vmov	d0, r2, r3
 800ef44:	4770      	bx	lr
 800ef46:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800ef4a:	da09      	bge.n	800ef60 <scalbn+0xa8>
 800ef4c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800ef88 <scalbn+0xd0>
 800ef50:	ee10 3a90 	vmov	r3, s1
 800ef54:	eeb0 6b47 	vmov.f64	d6, d7
 800ef58:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800efa0 <scalbn+0xe8>
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	e7db      	b.n	800ef18 <scalbn+0x60>
 800ef60:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800ef64:	ec53 2b10 	vmov	r2, r3, d0
 800ef68:	3036      	adds	r0, #54	@ 0x36
 800ef6a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800ef6e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800ef72:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800efa8 <scalbn+0xf0>
 800ef76:	ec43 2b10 	vmov	d0, r2, r3
 800ef7a:	e7b1      	b.n	800eee0 <scalbn+0x28>
 800ef7c:	f3af 8000 	nop.w
 800ef80:	00000000 	.word	0x00000000
 800ef84:	43500000 	.word	0x43500000
 800ef88:	c2f8f359 	.word	0xc2f8f359
 800ef8c:	01a56e1f 	.word	0x01a56e1f
 800ef90:	8800759c 	.word	0x8800759c
 800ef94:	7e37e43c 	.word	0x7e37e43c
 800ef98:	8800759c 	.word	0x8800759c
 800ef9c:	fe37e43c 	.word	0xfe37e43c
 800efa0:	c2f8f359 	.word	0xc2f8f359
 800efa4:	81a56e1f 	.word	0x81a56e1f
 800efa8:	00000000 	.word	0x00000000
 800efac:	3c900000 	.word	0x3c900000
 800efb0:	ffff3cb0 	.word	0xffff3cb0
 800efb4:	00000000 	.word	0x00000000

0800efb8 <floor>:
 800efb8:	ee10 3a90 	vmov	r3, s1
 800efbc:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800efc0:	ee10 2a10 	vmov	r2, s0
 800efc4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800efc8:	2913      	cmp	r1, #19
 800efca:	b530      	push	{r4, r5, lr}
 800efcc:	4615      	mov	r5, r2
 800efce:	dc33      	bgt.n	800f038 <floor+0x80>
 800efd0:	2900      	cmp	r1, #0
 800efd2:	da18      	bge.n	800f006 <floor+0x4e>
 800efd4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800f098 <floor+0xe0>
 800efd8:	ee30 0b07 	vadd.f64	d0, d0, d7
 800efdc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800efe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe4:	dd0a      	ble.n	800effc <floor+0x44>
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	da50      	bge.n	800f08c <floor+0xd4>
 800efea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800efee:	4313      	orrs	r3, r2
 800eff0:	2200      	movs	r2, #0
 800eff2:	4293      	cmp	r3, r2
 800eff4:	4b2a      	ldr	r3, [pc, #168]	@ (800f0a0 <floor+0xe8>)
 800eff6:	bf08      	it	eq
 800eff8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800effc:	4619      	mov	r1, r3
 800effe:	4610      	mov	r0, r2
 800f000:	ec41 0b10 	vmov	d0, r0, r1
 800f004:	e01f      	b.n	800f046 <floor+0x8e>
 800f006:	4827      	ldr	r0, [pc, #156]	@ (800f0a4 <floor+0xec>)
 800f008:	4108      	asrs	r0, r1
 800f00a:	ea03 0400 	and.w	r4, r3, r0
 800f00e:	4314      	orrs	r4, r2
 800f010:	d019      	beq.n	800f046 <floor+0x8e>
 800f012:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f098 <floor+0xe0>
 800f016:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f01a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f022:	ddeb      	ble.n	800effc <floor+0x44>
 800f024:	2b00      	cmp	r3, #0
 800f026:	bfbe      	ittt	lt
 800f028:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800f02c:	410a      	asrlt	r2, r1
 800f02e:	189b      	addlt	r3, r3, r2
 800f030:	ea23 0300 	bic.w	r3, r3, r0
 800f034:	2200      	movs	r2, #0
 800f036:	e7e1      	b.n	800effc <floor+0x44>
 800f038:	2933      	cmp	r1, #51	@ 0x33
 800f03a:	dd05      	ble.n	800f048 <floor+0x90>
 800f03c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f040:	d101      	bne.n	800f046 <floor+0x8e>
 800f042:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f046:	bd30      	pop	{r4, r5, pc}
 800f048:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800f04c:	f04f 30ff 	mov.w	r0, #4294967295
 800f050:	40e0      	lsrs	r0, r4
 800f052:	4210      	tst	r0, r2
 800f054:	d0f7      	beq.n	800f046 <floor+0x8e>
 800f056:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800f098 <floor+0xe0>
 800f05a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f05e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f066:	ddc9      	ble.n	800effc <floor+0x44>
 800f068:	2b00      	cmp	r3, #0
 800f06a:	da02      	bge.n	800f072 <floor+0xba>
 800f06c:	2914      	cmp	r1, #20
 800f06e:	d103      	bne.n	800f078 <floor+0xc0>
 800f070:	3301      	adds	r3, #1
 800f072:	ea22 0200 	bic.w	r2, r2, r0
 800f076:	e7c1      	b.n	800effc <floor+0x44>
 800f078:	2401      	movs	r4, #1
 800f07a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800f07e:	fa04 f101 	lsl.w	r1, r4, r1
 800f082:	440a      	add	r2, r1
 800f084:	42aa      	cmp	r2, r5
 800f086:	bf38      	it	cc
 800f088:	191b      	addcc	r3, r3, r4
 800f08a:	e7f2      	b.n	800f072 <floor+0xba>
 800f08c:	2200      	movs	r2, #0
 800f08e:	4613      	mov	r3, r2
 800f090:	e7b4      	b.n	800effc <floor+0x44>
 800f092:	bf00      	nop
 800f094:	f3af 8000 	nop.w
 800f098:	8800759c 	.word	0x8800759c
 800f09c:	7e37e43c 	.word	0x7e37e43c
 800f0a0:	bff00000 	.word	0xbff00000
 800f0a4:	000fffff 	.word	0x000fffff

0800f0a8 <_init>:
 800f0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0aa:	bf00      	nop
 800f0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0ae:	bc08      	pop	{r3}
 800f0b0:	469e      	mov	lr, r3
 800f0b2:	4770      	bx	lr

0800f0b4 <_fini>:
 800f0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0b6:	bf00      	nop
 800f0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0ba:	bc08      	pop	{r3}
 800f0bc:	469e      	mov	lr, r3
 800f0be:	4770      	bx	lr
